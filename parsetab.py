
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN ASTERISK AUTO BITAND BITOR BREAK CASE CHAR COMMA COMMENT CONST CONTINUE DEFAULT DEFINE DIVIDE DO DOUBLE ELSE ENDIF ENUM EQ EXTERN FLOAT FOR GE GOTO GT ID IF IFNDEF INCLUDE INLINE INT LBRACE LBRACK LCOMMENT LE LONG LPAREN LT MEMBER MINUS NEGATE NEQ OR PERCENT PLUS RBRACE RBRACK REGISTER RESTRICT RETURN RPAREN SEMI SHORT SIGNED SIZEOF STATIC STRING STRUCT SWITCH TYPEDEF UINT16_T UINT8_T UNION UNSIGNED VOID VOLATILE WHILE _ALIGNAS _ALIGNOF _ATOMIC _BOOL _COMPLEX _GENERIC _IMAGERY _NORETURN _STATIC_ASSERT _THREAD_LOCALdeclaration : preprocessorpreprocessor : IFNDEF\n                    | DEFINEtype_specifier : INT\n                      | FLOAT\n                      | CHAR\n                      | VOID\n                      | DOUBLE\n                      | UINT8_T\n                      | UINT16_T\n                      | type_specifier ASTERISK\n                      | LPAREN type_specifier RPAREN\n    function_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMI\n                         | type_specifier ASTERISK ID LPAREN parameter_list RPAREN SEMI\n                         | type_specifier ID LPAREN RPAREN\n                         | type_specifier ASTERISK ID LPAREN RPAREN\n    \n    parameter_list : parameter_declaration\n                   | parameter_declaration COMMA parameter_list\n    \n    parameter_declaration : type_specifier ID\n                          | type_specifier ASTERISK ID\n                          | VOID\n    expr : INT\n            | FLOAT\n            | CHAR\n            | ID\n            | expr PLUS expr\n            | expr MINUS expr\n            | expr ASTERISK expr\n            | expr DIVIDE expr\n            | LPAREN expr RPAREN'
    
_lr_action_items = {'IFNDEF':([0,],[3,]),'DEFINE':([0,],[4,]),'$end':([1,2,3,4,],[0,-1,-2,-3,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration':([0,],[1,]),'preprocessor':([0,],[2,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> declaration","S'",1,None,None,None),
  ('declaration -> preprocessor','declaration',1,'p_declaration','ply_tokenizer.py',141),
  ('preprocessor -> IFNDEF','preprocessor',1,'p_preprocessor','ply_tokenizer.py',148),
  ('preprocessor -> DEFINE','preprocessor',1,'p_preprocessor','ply_tokenizer.py',149),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','ply_tokenizer.py',155),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','ply_tokenizer.py',156),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','ply_tokenizer.py',157),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','ply_tokenizer.py',158),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','ply_tokenizer.py',159),
  ('type_specifier -> UINT8_T','type_specifier',1,'p_type_specifier','ply_tokenizer.py',160),
  ('type_specifier -> UINT16_T','type_specifier',1,'p_type_specifier','ply_tokenizer.py',161),
  ('type_specifier -> type_specifier ASTERISK','type_specifier',2,'p_type_specifier','ply_tokenizer.py',162),
  ('type_specifier -> LPAREN type_specifier RPAREN','type_specifier',3,'p_type_specifier','ply_tokenizer.py',163),
  ('function_declaration -> type_specifier ID LPAREN parameter_list RPAREN SEMI','function_declaration',6,'p_function_declaration','ply_tokenizer.py',169),
  ('function_declaration -> type_specifier ASTERISK ID LPAREN parameter_list RPAREN SEMI','function_declaration',7,'p_function_declaration','ply_tokenizer.py',170),
  ('function_declaration -> type_specifier ID LPAREN RPAREN','function_declaration',4,'p_function_declaration','ply_tokenizer.py',171),
  ('function_declaration -> type_specifier ASTERISK ID LPAREN RPAREN','function_declaration',5,'p_function_declaration','ply_tokenizer.py',172),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','ply_tokenizer.py',186),
  ('parameter_list -> parameter_declaration COMMA parameter_list','parameter_list',3,'p_parameter_list','ply_tokenizer.py',187),
  ('parameter_declaration -> type_specifier ID','parameter_declaration',2,'p_parameter_declaration','ply_tokenizer.py',197),
  ('parameter_declaration -> type_specifier ASTERISK ID','parameter_declaration',3,'p_parameter_declaration','ply_tokenizer.py',198),
  ('parameter_declaration -> VOID','parameter_declaration',1,'p_parameter_declaration','ply_tokenizer.py',199),
  ('expr -> INT','expr',1,'p_expr','ply_tokenizer.py',221),
  ('expr -> FLOAT','expr',1,'p_expr','ply_tokenizer.py',222),
  ('expr -> CHAR','expr',1,'p_expr','ply_tokenizer.py',223),
  ('expr -> ID','expr',1,'p_expr','ply_tokenizer.py',224),
  ('expr -> expr PLUS expr','expr',3,'p_expr','ply_tokenizer.py',225),
  ('expr -> expr MINUS expr','expr',3,'p_expr','ply_tokenizer.py',226),
  ('expr -> expr ASTERISK expr','expr',3,'p_expr','ply_tokenizer.py',227),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','ply_tokenizer.py',228),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr','ply_tokenizer.py',229),
]
