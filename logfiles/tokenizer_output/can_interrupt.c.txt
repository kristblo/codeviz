Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
Token(type='PREPROC', value='#include "can_interrupt.h"', line=13, column=0)
Token(type='PREPROC', value='#include <stdio.h>', line=15, column=0)
Token(type='PREPROC', value='#include "sam.h"', line=16, column=0)
Token(type='PREPROC', value='#include "../uart_and_printf/printf-stdarg.h"', line=18, column=0)
Token(type='PREPROC', value='#include "can_controller.h"', line=20, column=0)
Token(type='PREPROC', value='#define DEBUG_INTERRUPT 0', line=22, column=0)
Token(type='ID', value='void', line=31, column=0)
Token(type='ID', value='CAN0_Handler', line=31, column=5)
Token(type='PAROPEN', value='(', line=31, column=17)
Token(type='ID', value='void', line=31, column=19)
Token(type='PARCLOSE', value=')', line=31, column=24)
Token(type='BRACEOPEN', value='{', line=32, column=0)
Token(type='IF', value='if', line=33, column=1)
Token(type='PAROPEN', value='(', line=33, column=3)
Token(type='ID', value='DEBUG_INTERRUPT', line=33, column=4)
Token(type='PARCLOSE', value=')', line=33, column=19)
Token(type='ID', value='printf', line=33, column=20)
Token(type='PAROPEN', value='(', line=33, column=26)
Token(type='STRING', value='CAN0 interrupt\\n\\r', line=33, column=46)
Token(type='PARCLOSE', value=')', line=33, column=47)
Token(type='END', value=';', line=33, column=48)
Token(type='ID', value='char', line=34, column=1)
Token(type='ID', value='can_sr', line=34, column=6)
Token(type='ASSIGN', value='=', line=34, column=13)
Token(type='ID', value='CAN0', line=34, column=15)
Token(type='MEMBER', value='->', line=34, column=19)
Token(type='ID', value='CAN_SR', line=34, column=21)
Token(type='END', value=';', line=34, column=27)
Token(type='IF', value='if', line=37, column=1)
Token(type='PAROPEN', value='(', line=37, column=3)
Token(type='ID', value='can_sr', line=37, column=4)
Token(type='BITWOP', value='&', line=37, column=11)
Token(type='PAROPEN', value='(', line=37, column=13)
Token(type='ID', value='CAN_SR_MB1', line=37, column=14)
Token(type='BITWOP', value='|', line=37, column=25)
Token(type='ID', value='CAN_SR_MB2', line=37, column=27)
Token(type='PARCLOSE', value=')', line=37, column=37)
Token(type='PARCLOSE', value=')', line=37, column=39)
Token(type='BRACEOPEN', value='{', line=38, column=1)
Token(type='ID', value='CAN_MESSAGE', line=39, column=2)
Token(type='ID', value='message', line=39, column=14)
Token(type='END', value=';', line=39, column=21)
Token(type='IF', value='if', line=40, column=2)
Token(type='PAROPEN', value='(', line=40, column=4)
Token(type='ID', value='can_sr', line=40, column=5)
Token(type='BITWOP', value='&', line=40, column=12)
Token(type='ID', value='CAN_SR_MB1', line=40, column=14)
Token(type='PARCLOSE', value=')', line=40, column=24)
Token(type='BRACEOPEN', value='{', line=41, column=2)
Token(type='ID', value='can_receive', line=42, column=3)
Token(type='PAROPEN', value='(', line=42, column=14)
Token(type='BITWOP', value='&', line=42, column=15)
Token(type='ID', value='message', line=42, column=16)
Token(type='LISTSEP', value=',', line=42, column=23)
Token(type='NUMBER', value=1, line=42, column=25)
Token(type='PARCLOSE', value=')', line=42, column=26)
Token(type='END', value=';', line=42, column=27)
Token(type='BRACECLOSE', value='}', line=44, column=2)
Token(type='ELSE', value='else', line=45, column=2)
Token(type='IF', value='if', line=45, column=7)
Token(type='PAROPEN', value='(', line=45, column=9)
Token(type='ID', value='can_sr', line=45, column=10)
Token(type='BITWOP', value='&', line=45, column=17)
Token(type='ID', value='CAN_SR_MB2', line=45, column=19)
Token(type='PARCLOSE', value=')', line=45, column=29)
Token(type='BRACEOPEN', value='{', line=47, column=2)
Token(type='ID', value='can_receive', line=48, column=3)
Token(type='PAROPEN', value='(', line=48, column=14)
Token(type='BITWOP', value='&', line=48, column=15)
Token(type='ID', value='message', line=48, column=16)
Token(type='LISTSEP', value=',', line=48, column=23)
Token(type='NUMBER', value=2, line=48, column=25)
Token(type='PARCLOSE', value=')', line=48, column=26)
Token(type='END', value=';', line=48, column=27)
Token(type='BRACECLOSE', value='}', line=49, column=2)
Token(type='ELSE', value='else', line=50, column=2)
Token(type='BRACEOPEN', value='{', line=51, column=2)
Token(type='ID', value='printf', line=52, column=3)
Token(type='PAROPEN', value='(', line=52, column=9)
Token(type='STRING', value='CAN0 message arrived in non-used mailbox\\n\\r', line=52, column=55)
Token(type='PARCLOSE', value=')', line=52, column=56)
Token(type='END', value=';', line=52, column=57)
Token(type='BRACECLOSE', value='}', line=53, column=2)
Token(type='IF', value='if', line=55, column=2)
Token(type='PAROPEN', value='(', line=55, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=55, column=5)
Token(type='PARCLOSE', value=')', line=55, column=20)
Token(type='ID', value='printf', line=55, column=21)
Token(type='PAROPEN', value='(', line=55, column=27)
Token(type='STRING', value='message id: %d\\n\\r', line=55, column=47)
Token(type='LISTSEP', value=',', line=55, column=48)
Token(type='ID', value='message', line=55, column=50)
Token(type='MEMBER', value='.', line=55, column=57)
Token(type='ID', value='id', line=55, column=58)
Token(type='PARCLOSE', value=')', line=55, column=60)
Token(type='END', value=';', line=55, column=61)
Token(type='IF', value='if', line=56, column=2)
Token(type='PAROPEN', value='(', line=56, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=56, column=5)
Token(type='PARCLOSE', value=')', line=56, column=20)
Token(type='ID', value='printf', line=56, column=21)
Token(type='PAROPEN', value='(', line=56, column=27)
Token(type='STRING', value='message data length: %d\\n\\r', line=56, column=56)
Token(type='LISTSEP', value=',', line=56, column=57)
Token(type='ID', value='message', line=56, column=59)
Token(type='MEMBER', value='.', line=56, column=66)
Token(type='ID', value='data_length', line=56, column=67)
Token(type='PARCLOSE', value=')', line=56, column=78)
Token(type='END', value=';', line=56, column=79)
Token(type='FOR', value='for', line=57, column=2)
Token(type='PAROPEN', value='(', line=57, column=6)
Token(type='ID', value='int', line=57, column=7)
Token(type='ID', value='i', line=57, column=11)
Token(type='ASSIGN', value='=', line=57, column=13)
Token(type='NUMBER', value=0, line=57, column=15)
Token(type='END', value=';', line=57, column=16)
Token(type='ID', value='i', line=57, column=18)
Token(type='ARITOP', value='<', line=57, column=20)
Token(type='ID', value='message', line=57, column=22)
Token(type='MEMBER', value='.', line=57, column=29)
Token(type='ID', value='data_length', line=57, column=30)
Token(type='END', value=';', line=57, column=41)
Token(type='ID', value='i', line=57, column=43)
Token(type='ARITOP', value='+', line=57, column=44)
Token(type='ARITOP', value='+', line=57, column=45)
Token(type='PARCLOSE', value=')', line=57, column=46)
Token(type='BRACEOPEN', value='{', line=58, column=2)
Token(type='IF', value='if', line=59, column=3)
Token(type='PAROPEN', value='(', line=59, column=5)
Token(type='ID', value='DEBUG_INTERRUPT', line=59, column=6)
Token(type='PARCLOSE', value=')', line=59, column=21)
Token(type='ID', value='printf', line=59, column=22)
Token(type='PAROPEN', value='(', line=59, column=28)
Token(type='STRING', value='%d ', line=59, column=33)
Token(type='LISTSEP', value=',', line=59, column=34)
Token(type='ID', value='message', line=59, column=36)
Token(type='MEMBER', value='.', line=59, column=43)
Token(type='ID', value='data', line=59, column=44)
Token(type='BRACKOPEN', value='[', line=59, column=48)
Token(type='ID', value='i', line=59, column=49)
Token(type='BRACKCLOSE', value=']', line=59, column=50)
Token(type='PARCLOSE', value=')', line=59, column=51)
Token(type='END', value=';', line=59, column=52)
Token(type='BRACECLOSE', value='}', line=60, column=2)
Token(type='IF', value='if', line=61, column=2)
Token(type='PAROPEN', value='(', line=61, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=61, column=5)
Token(type='PARCLOSE', value=')', line=61, column=20)
Token(type='ID', value='printf', line=61, column=21)
Token(type='PAROPEN', value='(', line=61, column=27)
Token(type='STRING', value='\\n\\r', line=61, column=33)
Token(type='PARCLOSE', value=')', line=61, column=34)
Token(type='END', value=';', line=61, column=35)
Token(type='BRACECLOSE', value='}', line=62, column=1)
Token(type='IF', value='if', line=64, column=1)
Token(type='PAROPEN', value='(', line=64, column=3)
Token(type='ID', value='can_sr', line=64, column=4)
Token(type='BITWOP', value='&', line=64, column=11)
Token(type='ID', value='CAN_SR_MB0', line=64, column=13)
Token(type='PARCLOSE', value=')', line=64, column=23)
Token(type='BRACEOPEN', value='{', line=65, column=1)
Token(type='IF', value='if', line=66, column=2)
Token(type='PAROPEN', value='(', line=66, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=66, column=5)
Token(type='PARCLOSE', value=')', line=66, column=20)
Token(type='ID', value='printf', line=66, column=22)
Token(type='PAROPEN', value='(', line=66, column=28)
Token(type='STRING', value='CAN0 MB0 ready to send \\n\\r', line=66, column=57)
Token(type='PARCLOSE', value=')', line=66, column=58)
Token(type='END', value=';', line=66, column=59)
Token(type='ID', value='CAN0', line=69, column=2)
Token(type='MEMBER', value='->', line=69, column=6)
Token(type='ID', value='CAN_IDR', line=69, column=8)
Token(type='ASSIGN', value='=', line=69, column=16)
Token(type='ID', value='CAN_IER_MB0', line=69, column=18)
Token(type='END', value=';', line=69, column=29)
Token(type='BRACECLOSE', value='}', line=71, column=1)
Token(type='IF', value='if', line=73, column=1)
Token(type='PAROPEN', value='(', line=73, column=3)
Token(type='ID', value='can_sr', line=73, column=4)
Token(type='BITWOP', value='&', line=73, column=11)
Token(type='ID', value='CAN_SR_ERRP', line=73, column=13)
Token(type='PARCLOSE', value=')', line=73, column=24)
Token(type='BRACEOPEN', value='{', line=74, column=1)
Token(type='IF', value='if', line=75, column=2)
Token(type='PAROPEN', value='(', line=75, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=75, column=5)
Token(type='PARCLOSE', value=')', line=75, column=20)
Token(type='ID', value='printf', line=75, column=21)
Token(type='PAROPEN', value='(', line=75, column=27)
Token(type='STRING', value='CAN0 ERRP error\\n\\r', line=75, column=48)
Token(type='PARCLOSE', value=')', line=75, column=49)
Token(type='END', value=';', line=75, column=50)
Token(type='BRACECLOSE', value='}', line=77, column=1)
Token(type='IF', value='if', line=78, column=1)
Token(type='PAROPEN', value='(', line=78, column=3)
Token(type='ID', value='can_sr', line=78, column=4)
Token(type='BITWOP', value='&', line=78, column=11)
Token(type='ID', value='CAN_SR_TOVF', line=78, column=13)
Token(type='PARCLOSE', value=')', line=78, column=24)
Token(type='BRACEOPEN', value='{', line=79, column=1)
Token(type='IF', value='if', line=80, column=2)
Token(type='PAROPEN', value='(', line=80, column=4)
Token(type='ID', value='DEBUG_INTERRUPT', line=80, column=5)
Token(type='PARCLOSE', value=')', line=80, column=20)
Token(type='ID', value='printf', line=80, column=21)
Token(type='PAROPEN', value='(', line=80, column=27)
Token(type='STRING', value='CAN0 timer overflow\\n\\r', line=80, column=52)
Token(type='PARCLOSE', value=')', line=80, column=53)
Token(type='END', value=';', line=80, column=54)
Token(type='BRACECLOSE', value='}', line=82, column=1)
Token(type='ID', value='char', line=83, column=1)
Token(type='ID', value='can_sr', line=83, column=6)
Token(type='ASSIGN', value='=', line=83, column=13)
Token(type='ID', value='CAN0', line=83, column=15)
Token(type='MEMBER', value='->', line=83, column=19)
Token(type='ID', value='CAN_SR', line=83, column=21)
Token(type='END', value=';', line=83, column=27)
Token(type='ID', value='NVIC_ClearPendingIRQ', line=84, column=1)
Token(type='PAROPEN', value='(', line=84, column=21)
Token(type='ID', value='ID_CAN0', line=84, column=22)
Token(type='PARCLOSE', value=')', line=84, column=29)
Token(type='END', value=';', line=84, column=30)
Token(type='BRACECLOSE', value='}', line=86, column=0)
