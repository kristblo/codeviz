Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AUTO
    BREAK
    CASE
    COMMENT
    CONTINUE
    DEFAULT
    DO
    ENUM
    GOTO
    LCOMMENT
    NUMBER
    PROGMEM
    REGISTER
    RESTRICT
    STATIC
    SWITCH
    UNION
    _ALIGNAS
    _ALIGNOF
    _ATOMIC
    _BOOL
    _COMPLEX
    _GENERIC
    _IMAGERY
    _NORETURN
    _STATIC_ASSERT
    _THREAD_LOCAL

Grammar

Rule 0     S' -> node_list
Rule 1     node_list -> <empty>
Rule 2     node_list -> node_list node
Rule 3     node -> include
Rule 4     node -> define
Rule 5     node -> if
Rule 6     node -> func_def
Rule 7     node -> func_decl
Rule 8     node -> statement
Rule 9     node -> control_expr
Rule 10    node -> struct_def
Rule 11    literal -> FLOAT_L
Rule 12    literal -> INT_L
Rule 13    literal -> CHAR_L
Rule 14    literal -> STRING_L
Rule 15    literal -> NONDECIMAL_L
Rule 16    assign -> SIMPLE_ASSIGN
Rule 17    assign -> COMPLEX_ASSIGN
Rule 18    struct_type -> STRUCT name
Rule 19    type_cast -> LPAREN dtype RPAREN
Rule 20    modifier -> CONST
Rule 21    modifier -> EXTERN
Rule 22    modifier -> INLINE
Rule 23    modifier -> LONG
Rule 24    modifier -> SHORT
Rule 25    modifier -> SIGNED
Rule 26    modifier -> UNSIGNED
Rule 27    modifier -> VOLATILE
Rule 28    modifier_list -> <empty>
Rule 29    modifier_list -> modifier_list modifier
Rule 30    dtype -> CHAR
Rule 31    dtype -> DOUBLE
Rule 32    dtype -> FLOAT
Rule 33    dtype -> INT
Rule 34    dtype -> VOID
Rule 35    dtype -> INT8_T
Rule 36    dtype -> INT16_T
Rule 37    dtype -> INT32_T
Rule 38    dtype -> INT64_T
Rule 39    dtype -> UINT8_T
Rule 40    dtype -> UINT16_T
Rule 41    dtype -> UINT32_T
Rule 42    dtype -> UINT64_T
Rule 43    dtype -> struct_type
Rule 44    dtype -> dtype ASTERISK
Rule 45    name -> ID
Rule 46    name -> literal
Rule 47    name -> access
Rule 48    include -> INCLUDE
Rule 49    define -> DEFINE
Rule 50    if -> IFNDEF
Rule 51    if -> ENDIF
Rule 52    scope -> LBRACE node_list RBRACE
Rule 53    scope -> error RBRACE
Rule 54    control -> WHILE
Rule 55    control -> IF
Rule 56    control -> ELSE
Rule 57    conditional -> EQ
Rule 58    conditional -> NEQ
Rule 59    conditional -> LT
Rule 60    conditional -> GT
Rule 61    conditional -> LE
Rule 62    conditional -> GE
Rule 63    conditional -> AND
Rule 64    conditional -> OR
Rule 65    conditional_expr -> name conditional expression
Rule 66    conditional_expr -> expression conditional name
Rule 67    conditional_expr -> expression conditional expression
Rule 68    conditional_expr -> name conditional name
Rule 69    conditional_expr -> name
Rule 70    conditional_expr -> expression
Rule 71    for_loop -> FOR LPAREN init_var conditional_expr SEMI ID INCREMENT RPAREN
Rule 72    control_expr -> control LPAREN conditional_expr RPAREN scope
Rule 73    control_expr -> control scope
Rule 74    control_expr -> for_loop scope
Rule 75    control_expr -> ELSE node_list
Rule 76    control_expr -> error LBRACE
Rule 77    func_def_arg -> dtype
Rule 78    func_def_arg -> dtype name
Rule 79    func_def_arg -> modifier_list dtype name
Rule 80    func_def_arglist -> <empty>
Rule 81    func_def_arglist -> func_def_arglist func_def_arg
Rule 82    func_def_arglist -> func_def_arglist func_def_arg COMMA
Rule 83    func_def -> dtype ID LPAREN func_def_arglist RPAREN scope
Rule 84    func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope
Rule 85    func_def -> func_call scope
Rule 86    func_def -> error scope
Rule 87    func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI
Rule 88    func_arg -> name
Rule 89    func_arg -> dtype
Rule 90    func_arg -> expression
Rule 91    func_arg -> type_cast name
Rule 92    func_arg -> type_cast expression
Rule 93    func_arg -> func_call
Rule 94    func_arg -> type_cast func_call
Rule 95    func_arglist -> <empty>
Rule 96    func_arglist -> func_arglist func_arg
Rule 97    func_arglist -> func_arglist func_arg COMMA
Rule 98    func_call -> ID LPAREN func_arglist RPAREN
Rule 99    func_call -> SIZEOF LPAREN func_arglist RPAREN
Rule 100   access -> name LBRACK name RBRACK
Rule 101   access -> name LBRACK expression RBRACK
Rule 102   access -> name MEMBER name
Rule 103   access -> BITAND name
Rule 104   struct_def -> STRUCT ID scope SEMI
Rule 105   struct_typedef -> TYPEDEF STRUCT scope ID SEMI
Rule 106   statement -> init_var
Rule 107   statement -> assign_var
Rule 108   statement -> declare_var
Rule 109   statement -> expression SEMI
Rule 110   statement -> func_call SEMI
Rule 111   statement -> return SEMI
Rule 112   statement -> error SEMI
Rule 113   expression -> LPAREN expression RPAREN
Rule 114   expression -> LPAREN name RPAREN
Rule 115   expression -> NEGATE expression
Rule 116   expression -> MINUS expression
Rule 117   expression -> NEGATE name
Rule 118   expression -> MINUS name
Rule 119   binop -> PLUS
Rule 120   binop -> MINUS
Rule 121   binop -> ASTERISK
Rule 122   binop -> DIVIDE
Rule 123   binop -> LSHIFT
Rule 124   binop -> RSHIFT
Rule 125   binop -> PERCENT
Rule 126   binop -> BITAND
Rule 127   binop -> BITOR
Rule 128   binop -> conditional
Rule 129   operand -> name
Rule 130   operand -> expression
Rule 131   operand -> type_cast name
Rule 132   operand -> func_call
Rule 133   expression -> operand binop operand
Rule 134   expression -> name INCREMENT
Rule 135   return -> RETURN name
Rule 136   return -> RETURN expression
Rule 137   declare_var_ls -> dtype ID
Rule 138   declare_var_ls -> modifier_list ID
Rule 139   declare_var_ls -> modifier_list dtype ID
Rule 140   declare_var -> declare_var_ls SEMI
Rule 141   vector_init -> LBRACK RBRACK
Rule 142   vector_init -> LBRACK name RBRACK
Rule 143   vector_init_list -> <empty>
Rule 144   vector_init_list -> vector_init_list vector_init
Rule 145   init_var_ls -> declare_var_ls assign
Rule 146   init_var_ls -> declare_var_ls vector_init_list assign
Rule 147   vector_item -> name
Rule 148   vector_item -> func_call
Rule 149   vector_item -> vector_body
Rule 150   vec_item_list -> <empty>
Rule 151   vec_item_list -> vec_item_list vector_item
Rule 152   vec_item_list -> vec_item_list vector_item COMMA
Rule 153   vector_body -> LBRACE vec_item_list RBRACE
Rule 154   vector_init_rs -> vector_body SEMI
Rule 155   typecast_init -> type_cast init_var_rs
Rule 156   init_var_rs -> name SEMI
Rule 157   init_var_rs -> func_call SEMI
Rule 158   init_var_rs -> expression SEMI
Rule 159   init_var_rs -> typecast_init
Rule 160   init_var_rs -> vector_init_rs
Rule 161   init_var_rs -> LPAREN name RPAREN
Rule 162   init_var_rs -> error SEMI
Rule 163   init_var -> init_var_ls init_var_rs
Rule 164   assign_var_ls -> name assign
Rule 165   assign_var_rs -> init_var_rs
Rule 166   assign_var -> assign_var_ls assign_var_rs

Terminals, with rules where they appear

AND                  : 63
ASTERISK             : 44 121
AUTO                 : 
BITAND               : 103 126
BITOR                : 127
BREAK                : 
CASE                 : 
CHAR                 : 30
CHAR_L               : 13
COMMA                : 82 97 152
COMMENT              : 
COMPLEX_ASSIGN       : 17
CONST                : 20
CONTINUE             : 
DEFAULT              : 
DEFINE               : 49
DIVIDE               : 122
DO                   : 
DOUBLE               : 31
ELSE                 : 56 75
ENDIF                : 51
ENUM                 : 
EQ                   : 57
EXTERN               : 21
FLOAT                : 32
FLOAT_L              : 11
FOR                  : 71
GE                   : 62
GOTO                 : 
GT                   : 60
ID                   : 45 71 83 84 87 98 104 105 137 138 139
IF                   : 55
IFNDEF               : 50
INCLUDE              : 48
INCREMENT            : 71 134
INLINE               : 22
INT                  : 33
INT16_T              : 36
INT32_T              : 37
INT64_T              : 38
INT8_T               : 35
INT_L                : 12
LBRACE               : 52 76 153
LBRACK               : 100 101 141 142
LCOMMENT             : 
LE                   : 61
LONG                 : 23
LPAREN               : 19 71 72 83 84 87 98 99 113 114 161
LSHIFT               : 123
LT                   : 59
MEMBER               : 102
MINUS                : 116 118 120
NEGATE               : 115 117
NEQ                  : 58
NONDECIMAL_L         : 15
NUMBER               : 
OR                   : 64
PERCENT              : 125
PLUS                 : 119
PROGMEM              : 
RBRACE               : 52 53 153
RBRACK               : 100 101 141 142
REGISTER             : 
RESTRICT             : 
RETURN               : 135 136
RPAREN               : 19 71 72 83 84 87 98 99 113 114 161
RSHIFT               : 124
SEMI                 : 71 87 104 105 109 110 111 112 140 154 156 157 158 162
SHORT                : 24
SIGNED               : 25
SIMPLE_ASSIGN        : 16
SIZEOF               : 99
STATIC               : 
STRING_L             : 14
STRUCT               : 18 104 105
SWITCH               : 
TYPEDEF              : 105
UINT16_T             : 40
UINT32_T             : 41
UINT64_T             : 42
UINT8_T              : 39
UNION                : 
UNSIGNED             : 26
VOID                 : 34
VOLATILE             : 27
WHILE                : 54
_ALIGNAS             : 
_ALIGNOF             : 
_ATOMIC              : 
_BOOL                : 
_COMPLEX             : 
_GENERIC             : 
_IMAGERY             : 
_NORETURN            : 
_STATIC_ASSERT       : 
_THREAD_LOCAL        : 
error                : 53 76 86 112 162

Nonterminals, with rules where they appear

access               : 47
assign               : 145 146 164
assign_var           : 107
assign_var_ls        : 166
assign_var_rs        : 166
binop                : 133
conditional          : 65 66 67 68 128
conditional_expr     : 71 72
control              : 72 73
control_expr         : 9
declare_var          : 108
declare_var_ls       : 140 145 146
define               : 4
dtype                : 19 44 77 78 79 83 84 87 89 137 139
expression           : 65 66 67 67 70 90 92 101 109 113 115 116 130 136 158
for_loop             : 74
func_arg             : 96 97
func_arglist         : 96 97 98 99
func_call            : 85 93 94 110 132 148 157
func_decl            : 7
func_def             : 6
func_def_arg         : 81 82
func_def_arglist     : 81 82 83 84 87
if                   : 5
include              : 3
init_var             : 71 106
init_var_ls          : 163
init_var_rs          : 155 163 165
literal              : 46
modifier             : 29
modifier_list        : 29 79 84 138 139
name                 : 18 65 66 68 68 69 78 79 88 91 100 100 101 102 102 103 114 117 118 129 131 134 135 142 147 156 161 164
node                 : 2
node_list            : 2 52 75 0
operand              : 133 133
return               : 111
scope                : 72 73 74 83 84 85 86 104 105
statement            : 8
struct_def           : 10
struct_type          : 43
struct_typedef       : 
type_cast            : 91 92 94 131 155
typecast_init        : 159
vec_item_list        : 151 152 153
vector_body          : 149 154
vector_init          : 144
vector_init_list     : 144 146
vector_init_rs       : 160
vector_item          : 151 152

Parsing method: LALR

state 0

    (0) S' -> . node_list
    (1) node_list -> .
    (2) node_list -> . node_list node

    INCLUDE         reduce using rule 1 (node_list -> .)
    DEFINE          reduce using rule 1 (node_list -> .)
    IFNDEF          reduce using rule 1 (node_list -> .)
    ENDIF           reduce using rule 1 (node_list -> .)
    error           reduce using rule 1 (node_list -> .)
    ELSE            reduce using rule 1 (node_list -> .)
    STRUCT          reduce using rule 1 (node_list -> .)
    CHAR            reduce using rule 1 (node_list -> .)
    DOUBLE          reduce using rule 1 (node_list -> .)
    FLOAT           reduce using rule 1 (node_list -> .)
    INT             reduce using rule 1 (node_list -> .)
    VOID            reduce using rule 1 (node_list -> .)
    INT8_T          reduce using rule 1 (node_list -> .)
    INT16_T         reduce using rule 1 (node_list -> .)
    INT32_T         reduce using rule 1 (node_list -> .)
    INT64_T         reduce using rule 1 (node_list -> .)
    UINT8_T         reduce using rule 1 (node_list -> .)
    UINT16_T        reduce using rule 1 (node_list -> .)
    UINT32_T        reduce using rule 1 (node_list -> .)
    UINT64_T        reduce using rule 1 (node_list -> .)
    ID              reduce using rule 1 (node_list -> .)
    SIZEOF          reduce using rule 1 (node_list -> .)
    LPAREN          reduce using rule 1 (node_list -> .)
    NEGATE          reduce using rule 1 (node_list -> .)
    MINUS           reduce using rule 1 (node_list -> .)
    RETURN          reduce using rule 1 (node_list -> .)
    WHILE           reduce using rule 1 (node_list -> .)
    IF              reduce using rule 1 (node_list -> .)
    FOR             reduce using rule 1 (node_list -> .)
    FLOAT_L         reduce using rule 1 (node_list -> .)
    INT_L           reduce using rule 1 (node_list -> .)
    CHAR_L          reduce using rule 1 (node_list -> .)
    STRING_L        reduce using rule 1 (node_list -> .)
    NONDECIMAL_L    reduce using rule 1 (node_list -> .)
    BITAND          reduce using rule 1 (node_list -> .)
    $end            reduce using rule 1 (node_list -> .)
    CONST           reduce using rule 1 (node_list -> .)
    EXTERN          reduce using rule 1 (node_list -> .)
    INLINE          reduce using rule 1 (node_list -> .)
    LONG            reduce using rule 1 (node_list -> .)
    SHORT           reduce using rule 1 (node_list -> .)
    SIGNED          reduce using rule 1 (node_list -> .)
    UNSIGNED        reduce using rule 1 (node_list -> .)
    VOLATILE        reduce using rule 1 (node_list -> .)

    node_list                      shift and go to state 1

state 1

    (0) S' -> node_list .
    (2) node_list -> node_list . node
    (3) node -> . include
    (4) node -> . define
    (5) node -> . if
    (6) node -> . func_def
    (7) node -> . func_decl
    (8) node -> . statement
    (9) node -> . control_expr
    (10) node -> . struct_def
    (48) include -> . INCLUDE
    (49) define -> . DEFINE
    (50) if -> . IFNDEF
    (51) if -> . ENDIF
    (83) func_def -> . dtype ID LPAREN func_def_arglist RPAREN scope
    (84) func_def -> . modifier_list dtype ID LPAREN func_def_arglist RPAREN scope
    (85) func_def -> . func_call scope
    (86) func_def -> . error scope
    (87) func_decl -> . dtype ID LPAREN func_def_arglist RPAREN SEMI
    (106) statement -> . init_var
    (107) statement -> . assign_var
    (108) statement -> . declare_var
    (109) statement -> . expression SEMI
    (110) statement -> . func_call SEMI
    (111) statement -> . return SEMI
    (112) statement -> . error SEMI
    (72) control_expr -> . control LPAREN conditional_expr RPAREN scope
    (73) control_expr -> . control scope
    (74) control_expr -> . for_loop scope
    (75) control_expr -> . ELSE node_list
    (76) control_expr -> . error LBRACE
    (104) struct_def -> . STRUCT ID scope SEMI
    (30) dtype -> . CHAR
    (31) dtype -> . DOUBLE
    (32) dtype -> . FLOAT
    (33) dtype -> . INT
    (34) dtype -> . VOID
    (35) dtype -> . INT8_T
    (36) dtype -> . INT16_T
    (37) dtype -> . INT32_T
    (38) dtype -> . INT64_T
    (39) dtype -> . UINT8_T
    (40) dtype -> . UINT16_T
    (41) dtype -> . UINT32_T
    (42) dtype -> . UINT64_T
    (43) dtype -> . struct_type
    (44) dtype -> . dtype ASTERISK
    (28) modifier_list -> .
    (29) modifier_list -> . modifier_list modifier
    (98) func_call -> . ID LPAREN func_arglist RPAREN
    (99) func_call -> . SIZEOF LPAREN func_arglist RPAREN
    (163) init_var -> . init_var_ls init_var_rs
    (166) assign_var -> . assign_var_ls assign_var_rs
    (140) declare_var -> . declare_var_ls SEMI
    (113) expression -> . LPAREN expression RPAREN
    (114) expression -> . LPAREN name RPAREN
    (115) expression -> . NEGATE expression
    (116) expression -> . MINUS expression
    (117) expression -> . NEGATE name
    (118) expression -> . MINUS name
    (133) expression -> . operand binop operand
    (134) expression -> . name INCREMENT
    (135) return -> . RETURN name
    (136) return -> . RETURN expression
    (54) control -> . WHILE
    (55) control -> . IF
    (56) control -> . ELSE
    (71) for_loop -> . FOR LPAREN init_var conditional_expr SEMI ID INCREMENT RPAREN
    (18) struct_type -> . STRUCT name
    (145) init_var_ls -> . declare_var_ls assign
    (146) init_var_ls -> . declare_var_ls vector_init_list assign
    (164) assign_var_ls -> . name assign
    (137) declare_var_ls -> . dtype ID
    (138) declare_var_ls -> . modifier_list ID
    (139) declare_var_ls -> . modifier_list dtype ID
    (129) operand -> . name
    (130) operand -> . expression
    (131) operand -> . type_cast name
    (132) operand -> . func_call
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (19) type_cast -> . LPAREN dtype RPAREN
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name

  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT8_T resolved as shift
  ! shift/reduce conflict for INT16_T resolved as shift
  ! shift/reduce conflict for INT32_T resolved as shift
  ! shift/reduce conflict for INT64_T resolved as shift
  ! shift/reduce conflict for UINT8_T resolved as shift
  ! shift/reduce conflict for UINT16_T resolved as shift
  ! shift/reduce conflict for UINT32_T resolved as shift
  ! shift/reduce conflict for UINT64_T resolved as shift
  ! shift/reduce conflict for STRUCT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    INCLUDE         shift and go to state 11
    DEFINE          shift and go to state 12
    IFNDEF          shift and go to state 13
    ENDIF           shift and go to state 14
    error           shift and go to state 20
    ELSE            shift and go to state 28
    STRUCT          shift and go to state 29
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 31
    FLOAT           shift and go to state 32
    INT             shift and go to state 33
    VOID            shift and go to state 34
    INT8_T          shift and go to state 35
    INT16_T         shift and go to state 36
    INT32_T         shift and go to state 37
    INT64_T         shift and go to state 38
    UINT8_T         shift and go to state 39
    UINT16_T        shift and go to state 40
    UINT32_T        shift and go to state 41
    UINT64_T        shift and go to state 42
    CONST           reduce using rule 28 (modifier_list -> .)
    EXTERN          reduce using rule 28 (modifier_list -> .)
    INLINE          reduce using rule 28 (modifier_list -> .)
    LONG            reduce using rule 28 (modifier_list -> .)
    SHORT           reduce using rule 28 (modifier_list -> .)
    SIGNED          reduce using rule 28 (modifier_list -> .)
    UNSIGNED        reduce using rule 28 (modifier_list -> .)
    VOLATILE        reduce using rule 28 (modifier_list -> .)
    ID              shift and go to state 16
    SIZEOF          shift and go to state 44
    LPAREN          shift and go to state 17
    NEGATE          shift and go to state 49
    MINUS           shift and go to state 50
    RETURN          shift and go to state 52
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    FOR             shift and go to state 55
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64

  ! ID              [ reduce using rule 28 (modifier_list -> .) ]
  ! CHAR            [ reduce using rule 28 (modifier_list -> .) ]
  ! DOUBLE          [ reduce using rule 28 (modifier_list -> .) ]
  ! FLOAT           [ reduce using rule 28 (modifier_list -> .) ]
  ! INT             [ reduce using rule 28 (modifier_list -> .) ]
  ! VOID            [ reduce using rule 28 (modifier_list -> .) ]
  ! INT8_T          [ reduce using rule 28 (modifier_list -> .) ]
  ! INT16_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! INT32_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! INT64_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT8_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT16_T        [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT32_T        [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT64_T        [ reduce using rule 28 (modifier_list -> .) ]
  ! STRUCT          [ reduce using rule 28 (modifier_list -> .) ]

    node                           shift and go to state 2
    include                        shift and go to state 3
    define                         shift and go to state 4
    if                             shift and go to state 5
    func_def                       shift and go to state 6
    func_decl                      shift and go to state 7
    statement                      shift and go to state 8
    control_expr                   shift and go to state 9
    struct_def                     shift and go to state 10
    dtype                          shift and go to state 15
    modifier_list                  shift and go to state 18
    func_call                      shift and go to state 19
    init_var                       shift and go to state 21
    assign_var                     shift and go to state 22
    declare_var                    shift and go to state 23
    expression                     shift and go to state 24
    return                         shift and go to state 25
    control                        shift and go to state 26
    for_loop                       shift and go to state 27
    struct_type                    shift and go to state 43
    init_var_ls                    shift and go to state 45
    assign_var_ls                  shift and go to state 46
    declare_var_ls                 shift and go to state 47
    name                           shift and go to state 48
    operand                        shift and go to state 51
    type_cast                      shift and go to state 56
    literal                        shift and go to state 57
    access                         shift and go to state 58

state 2

    (2) node_list -> node_list node .

    INCLUDE         reduce using rule 2 (node_list -> node_list node .)
    DEFINE          reduce using rule 2 (node_list -> node_list node .)
    IFNDEF          reduce using rule 2 (node_list -> node_list node .)
    ENDIF           reduce using rule 2 (node_list -> node_list node .)
    error           reduce using rule 2 (node_list -> node_list node .)
    ELSE            reduce using rule 2 (node_list -> node_list node .)
    STRUCT          reduce using rule 2 (node_list -> node_list node .)
    CHAR            reduce using rule 2 (node_list -> node_list node .)
    DOUBLE          reduce using rule 2 (node_list -> node_list node .)
    FLOAT           reduce using rule 2 (node_list -> node_list node .)
    INT             reduce using rule 2 (node_list -> node_list node .)
    VOID            reduce using rule 2 (node_list -> node_list node .)
    INT8_T          reduce using rule 2 (node_list -> node_list node .)
    INT16_T         reduce using rule 2 (node_list -> node_list node .)
    INT32_T         reduce using rule 2 (node_list -> node_list node .)
    INT64_T         reduce using rule 2 (node_list -> node_list node .)
    UINT8_T         reduce using rule 2 (node_list -> node_list node .)
    UINT16_T        reduce using rule 2 (node_list -> node_list node .)
    UINT32_T        reduce using rule 2 (node_list -> node_list node .)
    UINT64_T        reduce using rule 2 (node_list -> node_list node .)
    ID              reduce using rule 2 (node_list -> node_list node .)
    SIZEOF          reduce using rule 2 (node_list -> node_list node .)
    LPAREN          reduce using rule 2 (node_list -> node_list node .)
    NEGATE          reduce using rule 2 (node_list -> node_list node .)
    MINUS           reduce using rule 2 (node_list -> node_list node .)
    RETURN          reduce using rule 2 (node_list -> node_list node .)
    WHILE           reduce using rule 2 (node_list -> node_list node .)
    IF              reduce using rule 2 (node_list -> node_list node .)
    FOR             reduce using rule 2 (node_list -> node_list node .)
    FLOAT_L         reduce using rule 2 (node_list -> node_list node .)
    INT_L           reduce using rule 2 (node_list -> node_list node .)
    CHAR_L          reduce using rule 2 (node_list -> node_list node .)
    STRING_L        reduce using rule 2 (node_list -> node_list node .)
    NONDECIMAL_L    reduce using rule 2 (node_list -> node_list node .)
    BITAND          reduce using rule 2 (node_list -> node_list node .)
    $end            reduce using rule 2 (node_list -> node_list node .)
    CONST           reduce using rule 2 (node_list -> node_list node .)
    EXTERN          reduce using rule 2 (node_list -> node_list node .)
    INLINE          reduce using rule 2 (node_list -> node_list node .)
    LONG            reduce using rule 2 (node_list -> node_list node .)
    SHORT           reduce using rule 2 (node_list -> node_list node .)
    SIGNED          reduce using rule 2 (node_list -> node_list node .)
    UNSIGNED        reduce using rule 2 (node_list -> node_list node .)
    VOLATILE        reduce using rule 2 (node_list -> node_list node .)
    RBRACE          reduce using rule 2 (node_list -> node_list node .)


state 3

    (3) node -> include .

    INCLUDE         reduce using rule 3 (node -> include .)
    DEFINE          reduce using rule 3 (node -> include .)
    IFNDEF          reduce using rule 3 (node -> include .)
    ENDIF           reduce using rule 3 (node -> include .)
    error           reduce using rule 3 (node -> include .)
    ELSE            reduce using rule 3 (node -> include .)
    STRUCT          reduce using rule 3 (node -> include .)
    CHAR            reduce using rule 3 (node -> include .)
    DOUBLE          reduce using rule 3 (node -> include .)
    FLOAT           reduce using rule 3 (node -> include .)
    INT             reduce using rule 3 (node -> include .)
    VOID            reduce using rule 3 (node -> include .)
    INT8_T          reduce using rule 3 (node -> include .)
    INT16_T         reduce using rule 3 (node -> include .)
    INT32_T         reduce using rule 3 (node -> include .)
    INT64_T         reduce using rule 3 (node -> include .)
    UINT8_T         reduce using rule 3 (node -> include .)
    UINT16_T        reduce using rule 3 (node -> include .)
    UINT32_T        reduce using rule 3 (node -> include .)
    UINT64_T        reduce using rule 3 (node -> include .)
    ID              reduce using rule 3 (node -> include .)
    SIZEOF          reduce using rule 3 (node -> include .)
    LPAREN          reduce using rule 3 (node -> include .)
    NEGATE          reduce using rule 3 (node -> include .)
    MINUS           reduce using rule 3 (node -> include .)
    RETURN          reduce using rule 3 (node -> include .)
    WHILE           reduce using rule 3 (node -> include .)
    IF              reduce using rule 3 (node -> include .)
    FOR             reduce using rule 3 (node -> include .)
    FLOAT_L         reduce using rule 3 (node -> include .)
    INT_L           reduce using rule 3 (node -> include .)
    CHAR_L          reduce using rule 3 (node -> include .)
    STRING_L        reduce using rule 3 (node -> include .)
    NONDECIMAL_L    reduce using rule 3 (node -> include .)
    BITAND          reduce using rule 3 (node -> include .)
    $end            reduce using rule 3 (node -> include .)
    CONST           reduce using rule 3 (node -> include .)
    EXTERN          reduce using rule 3 (node -> include .)
    INLINE          reduce using rule 3 (node -> include .)
    LONG            reduce using rule 3 (node -> include .)
    SHORT           reduce using rule 3 (node -> include .)
    SIGNED          reduce using rule 3 (node -> include .)
    UNSIGNED        reduce using rule 3 (node -> include .)
    VOLATILE        reduce using rule 3 (node -> include .)
    RBRACE          reduce using rule 3 (node -> include .)


state 4

    (4) node -> define .

    INCLUDE         reduce using rule 4 (node -> define .)
    DEFINE          reduce using rule 4 (node -> define .)
    IFNDEF          reduce using rule 4 (node -> define .)
    ENDIF           reduce using rule 4 (node -> define .)
    error           reduce using rule 4 (node -> define .)
    ELSE            reduce using rule 4 (node -> define .)
    STRUCT          reduce using rule 4 (node -> define .)
    CHAR            reduce using rule 4 (node -> define .)
    DOUBLE          reduce using rule 4 (node -> define .)
    FLOAT           reduce using rule 4 (node -> define .)
    INT             reduce using rule 4 (node -> define .)
    VOID            reduce using rule 4 (node -> define .)
    INT8_T          reduce using rule 4 (node -> define .)
    INT16_T         reduce using rule 4 (node -> define .)
    INT32_T         reduce using rule 4 (node -> define .)
    INT64_T         reduce using rule 4 (node -> define .)
    UINT8_T         reduce using rule 4 (node -> define .)
    UINT16_T        reduce using rule 4 (node -> define .)
    UINT32_T        reduce using rule 4 (node -> define .)
    UINT64_T        reduce using rule 4 (node -> define .)
    ID              reduce using rule 4 (node -> define .)
    SIZEOF          reduce using rule 4 (node -> define .)
    LPAREN          reduce using rule 4 (node -> define .)
    NEGATE          reduce using rule 4 (node -> define .)
    MINUS           reduce using rule 4 (node -> define .)
    RETURN          reduce using rule 4 (node -> define .)
    WHILE           reduce using rule 4 (node -> define .)
    IF              reduce using rule 4 (node -> define .)
    FOR             reduce using rule 4 (node -> define .)
    FLOAT_L         reduce using rule 4 (node -> define .)
    INT_L           reduce using rule 4 (node -> define .)
    CHAR_L          reduce using rule 4 (node -> define .)
    STRING_L        reduce using rule 4 (node -> define .)
    NONDECIMAL_L    reduce using rule 4 (node -> define .)
    BITAND          reduce using rule 4 (node -> define .)
    $end            reduce using rule 4 (node -> define .)
    CONST           reduce using rule 4 (node -> define .)
    EXTERN          reduce using rule 4 (node -> define .)
    INLINE          reduce using rule 4 (node -> define .)
    LONG            reduce using rule 4 (node -> define .)
    SHORT           reduce using rule 4 (node -> define .)
    SIGNED          reduce using rule 4 (node -> define .)
    UNSIGNED        reduce using rule 4 (node -> define .)
    VOLATILE        reduce using rule 4 (node -> define .)
    RBRACE          reduce using rule 4 (node -> define .)


state 5

    (5) node -> if .

    INCLUDE         reduce using rule 5 (node -> if .)
    DEFINE          reduce using rule 5 (node -> if .)
    IFNDEF          reduce using rule 5 (node -> if .)
    ENDIF           reduce using rule 5 (node -> if .)
    error           reduce using rule 5 (node -> if .)
    ELSE            reduce using rule 5 (node -> if .)
    STRUCT          reduce using rule 5 (node -> if .)
    CHAR            reduce using rule 5 (node -> if .)
    DOUBLE          reduce using rule 5 (node -> if .)
    FLOAT           reduce using rule 5 (node -> if .)
    INT             reduce using rule 5 (node -> if .)
    VOID            reduce using rule 5 (node -> if .)
    INT8_T          reduce using rule 5 (node -> if .)
    INT16_T         reduce using rule 5 (node -> if .)
    INT32_T         reduce using rule 5 (node -> if .)
    INT64_T         reduce using rule 5 (node -> if .)
    UINT8_T         reduce using rule 5 (node -> if .)
    UINT16_T        reduce using rule 5 (node -> if .)
    UINT32_T        reduce using rule 5 (node -> if .)
    UINT64_T        reduce using rule 5 (node -> if .)
    ID              reduce using rule 5 (node -> if .)
    SIZEOF          reduce using rule 5 (node -> if .)
    LPAREN          reduce using rule 5 (node -> if .)
    NEGATE          reduce using rule 5 (node -> if .)
    MINUS           reduce using rule 5 (node -> if .)
    RETURN          reduce using rule 5 (node -> if .)
    WHILE           reduce using rule 5 (node -> if .)
    IF              reduce using rule 5 (node -> if .)
    FOR             reduce using rule 5 (node -> if .)
    FLOAT_L         reduce using rule 5 (node -> if .)
    INT_L           reduce using rule 5 (node -> if .)
    CHAR_L          reduce using rule 5 (node -> if .)
    STRING_L        reduce using rule 5 (node -> if .)
    NONDECIMAL_L    reduce using rule 5 (node -> if .)
    BITAND          reduce using rule 5 (node -> if .)
    $end            reduce using rule 5 (node -> if .)
    CONST           reduce using rule 5 (node -> if .)
    EXTERN          reduce using rule 5 (node -> if .)
    INLINE          reduce using rule 5 (node -> if .)
    LONG            reduce using rule 5 (node -> if .)
    SHORT           reduce using rule 5 (node -> if .)
    SIGNED          reduce using rule 5 (node -> if .)
    UNSIGNED        reduce using rule 5 (node -> if .)
    VOLATILE        reduce using rule 5 (node -> if .)
    RBRACE          reduce using rule 5 (node -> if .)


state 6

    (6) node -> func_def .

    INCLUDE         reduce using rule 6 (node -> func_def .)
    DEFINE          reduce using rule 6 (node -> func_def .)
    IFNDEF          reduce using rule 6 (node -> func_def .)
    ENDIF           reduce using rule 6 (node -> func_def .)
    error           reduce using rule 6 (node -> func_def .)
    ELSE            reduce using rule 6 (node -> func_def .)
    STRUCT          reduce using rule 6 (node -> func_def .)
    CHAR            reduce using rule 6 (node -> func_def .)
    DOUBLE          reduce using rule 6 (node -> func_def .)
    FLOAT           reduce using rule 6 (node -> func_def .)
    INT             reduce using rule 6 (node -> func_def .)
    VOID            reduce using rule 6 (node -> func_def .)
    INT8_T          reduce using rule 6 (node -> func_def .)
    INT16_T         reduce using rule 6 (node -> func_def .)
    INT32_T         reduce using rule 6 (node -> func_def .)
    INT64_T         reduce using rule 6 (node -> func_def .)
    UINT8_T         reduce using rule 6 (node -> func_def .)
    UINT16_T        reduce using rule 6 (node -> func_def .)
    UINT32_T        reduce using rule 6 (node -> func_def .)
    UINT64_T        reduce using rule 6 (node -> func_def .)
    ID              reduce using rule 6 (node -> func_def .)
    SIZEOF          reduce using rule 6 (node -> func_def .)
    LPAREN          reduce using rule 6 (node -> func_def .)
    NEGATE          reduce using rule 6 (node -> func_def .)
    MINUS           reduce using rule 6 (node -> func_def .)
    RETURN          reduce using rule 6 (node -> func_def .)
    WHILE           reduce using rule 6 (node -> func_def .)
    IF              reduce using rule 6 (node -> func_def .)
    FOR             reduce using rule 6 (node -> func_def .)
    FLOAT_L         reduce using rule 6 (node -> func_def .)
    INT_L           reduce using rule 6 (node -> func_def .)
    CHAR_L          reduce using rule 6 (node -> func_def .)
    STRING_L        reduce using rule 6 (node -> func_def .)
    NONDECIMAL_L    reduce using rule 6 (node -> func_def .)
    BITAND          reduce using rule 6 (node -> func_def .)
    $end            reduce using rule 6 (node -> func_def .)
    CONST           reduce using rule 6 (node -> func_def .)
    EXTERN          reduce using rule 6 (node -> func_def .)
    INLINE          reduce using rule 6 (node -> func_def .)
    LONG            reduce using rule 6 (node -> func_def .)
    SHORT           reduce using rule 6 (node -> func_def .)
    SIGNED          reduce using rule 6 (node -> func_def .)
    UNSIGNED        reduce using rule 6 (node -> func_def .)
    VOLATILE        reduce using rule 6 (node -> func_def .)
    RBRACE          reduce using rule 6 (node -> func_def .)


state 7

    (7) node -> func_decl .

    INCLUDE         reduce using rule 7 (node -> func_decl .)
    DEFINE          reduce using rule 7 (node -> func_decl .)
    IFNDEF          reduce using rule 7 (node -> func_decl .)
    ENDIF           reduce using rule 7 (node -> func_decl .)
    error           reduce using rule 7 (node -> func_decl .)
    ELSE            reduce using rule 7 (node -> func_decl .)
    STRUCT          reduce using rule 7 (node -> func_decl .)
    CHAR            reduce using rule 7 (node -> func_decl .)
    DOUBLE          reduce using rule 7 (node -> func_decl .)
    FLOAT           reduce using rule 7 (node -> func_decl .)
    INT             reduce using rule 7 (node -> func_decl .)
    VOID            reduce using rule 7 (node -> func_decl .)
    INT8_T          reduce using rule 7 (node -> func_decl .)
    INT16_T         reduce using rule 7 (node -> func_decl .)
    INT32_T         reduce using rule 7 (node -> func_decl .)
    INT64_T         reduce using rule 7 (node -> func_decl .)
    UINT8_T         reduce using rule 7 (node -> func_decl .)
    UINT16_T        reduce using rule 7 (node -> func_decl .)
    UINT32_T        reduce using rule 7 (node -> func_decl .)
    UINT64_T        reduce using rule 7 (node -> func_decl .)
    ID              reduce using rule 7 (node -> func_decl .)
    SIZEOF          reduce using rule 7 (node -> func_decl .)
    LPAREN          reduce using rule 7 (node -> func_decl .)
    NEGATE          reduce using rule 7 (node -> func_decl .)
    MINUS           reduce using rule 7 (node -> func_decl .)
    RETURN          reduce using rule 7 (node -> func_decl .)
    WHILE           reduce using rule 7 (node -> func_decl .)
    IF              reduce using rule 7 (node -> func_decl .)
    FOR             reduce using rule 7 (node -> func_decl .)
    FLOAT_L         reduce using rule 7 (node -> func_decl .)
    INT_L           reduce using rule 7 (node -> func_decl .)
    CHAR_L          reduce using rule 7 (node -> func_decl .)
    STRING_L        reduce using rule 7 (node -> func_decl .)
    NONDECIMAL_L    reduce using rule 7 (node -> func_decl .)
    BITAND          reduce using rule 7 (node -> func_decl .)
    $end            reduce using rule 7 (node -> func_decl .)
    CONST           reduce using rule 7 (node -> func_decl .)
    EXTERN          reduce using rule 7 (node -> func_decl .)
    INLINE          reduce using rule 7 (node -> func_decl .)
    LONG            reduce using rule 7 (node -> func_decl .)
    SHORT           reduce using rule 7 (node -> func_decl .)
    SIGNED          reduce using rule 7 (node -> func_decl .)
    UNSIGNED        reduce using rule 7 (node -> func_decl .)
    VOLATILE        reduce using rule 7 (node -> func_decl .)
    RBRACE          reduce using rule 7 (node -> func_decl .)


state 8

    (8) node -> statement .

    INCLUDE         reduce using rule 8 (node -> statement .)
    DEFINE          reduce using rule 8 (node -> statement .)
    IFNDEF          reduce using rule 8 (node -> statement .)
    ENDIF           reduce using rule 8 (node -> statement .)
    error           reduce using rule 8 (node -> statement .)
    ELSE            reduce using rule 8 (node -> statement .)
    STRUCT          reduce using rule 8 (node -> statement .)
    CHAR            reduce using rule 8 (node -> statement .)
    DOUBLE          reduce using rule 8 (node -> statement .)
    FLOAT           reduce using rule 8 (node -> statement .)
    INT             reduce using rule 8 (node -> statement .)
    VOID            reduce using rule 8 (node -> statement .)
    INT8_T          reduce using rule 8 (node -> statement .)
    INT16_T         reduce using rule 8 (node -> statement .)
    INT32_T         reduce using rule 8 (node -> statement .)
    INT64_T         reduce using rule 8 (node -> statement .)
    UINT8_T         reduce using rule 8 (node -> statement .)
    UINT16_T        reduce using rule 8 (node -> statement .)
    UINT32_T        reduce using rule 8 (node -> statement .)
    UINT64_T        reduce using rule 8 (node -> statement .)
    ID              reduce using rule 8 (node -> statement .)
    SIZEOF          reduce using rule 8 (node -> statement .)
    LPAREN          reduce using rule 8 (node -> statement .)
    NEGATE          reduce using rule 8 (node -> statement .)
    MINUS           reduce using rule 8 (node -> statement .)
    RETURN          reduce using rule 8 (node -> statement .)
    WHILE           reduce using rule 8 (node -> statement .)
    IF              reduce using rule 8 (node -> statement .)
    FOR             reduce using rule 8 (node -> statement .)
    FLOAT_L         reduce using rule 8 (node -> statement .)
    INT_L           reduce using rule 8 (node -> statement .)
    CHAR_L          reduce using rule 8 (node -> statement .)
    STRING_L        reduce using rule 8 (node -> statement .)
    NONDECIMAL_L    reduce using rule 8 (node -> statement .)
    BITAND          reduce using rule 8 (node -> statement .)
    $end            reduce using rule 8 (node -> statement .)
    CONST           reduce using rule 8 (node -> statement .)
    EXTERN          reduce using rule 8 (node -> statement .)
    INLINE          reduce using rule 8 (node -> statement .)
    LONG            reduce using rule 8 (node -> statement .)
    SHORT           reduce using rule 8 (node -> statement .)
    SIGNED          reduce using rule 8 (node -> statement .)
    UNSIGNED        reduce using rule 8 (node -> statement .)
    VOLATILE        reduce using rule 8 (node -> statement .)
    RBRACE          reduce using rule 8 (node -> statement .)


state 9

    (9) node -> control_expr .

    INCLUDE         reduce using rule 9 (node -> control_expr .)
    DEFINE          reduce using rule 9 (node -> control_expr .)
    IFNDEF          reduce using rule 9 (node -> control_expr .)
    ENDIF           reduce using rule 9 (node -> control_expr .)
    error           reduce using rule 9 (node -> control_expr .)
    ELSE            reduce using rule 9 (node -> control_expr .)
    STRUCT          reduce using rule 9 (node -> control_expr .)
    CHAR            reduce using rule 9 (node -> control_expr .)
    DOUBLE          reduce using rule 9 (node -> control_expr .)
    FLOAT           reduce using rule 9 (node -> control_expr .)
    INT             reduce using rule 9 (node -> control_expr .)
    VOID            reduce using rule 9 (node -> control_expr .)
    INT8_T          reduce using rule 9 (node -> control_expr .)
    INT16_T         reduce using rule 9 (node -> control_expr .)
    INT32_T         reduce using rule 9 (node -> control_expr .)
    INT64_T         reduce using rule 9 (node -> control_expr .)
    UINT8_T         reduce using rule 9 (node -> control_expr .)
    UINT16_T        reduce using rule 9 (node -> control_expr .)
    UINT32_T        reduce using rule 9 (node -> control_expr .)
    UINT64_T        reduce using rule 9 (node -> control_expr .)
    ID              reduce using rule 9 (node -> control_expr .)
    SIZEOF          reduce using rule 9 (node -> control_expr .)
    LPAREN          reduce using rule 9 (node -> control_expr .)
    NEGATE          reduce using rule 9 (node -> control_expr .)
    MINUS           reduce using rule 9 (node -> control_expr .)
    RETURN          reduce using rule 9 (node -> control_expr .)
    WHILE           reduce using rule 9 (node -> control_expr .)
    IF              reduce using rule 9 (node -> control_expr .)
    FOR             reduce using rule 9 (node -> control_expr .)
    FLOAT_L         reduce using rule 9 (node -> control_expr .)
    INT_L           reduce using rule 9 (node -> control_expr .)
    CHAR_L          reduce using rule 9 (node -> control_expr .)
    STRING_L        reduce using rule 9 (node -> control_expr .)
    NONDECIMAL_L    reduce using rule 9 (node -> control_expr .)
    BITAND          reduce using rule 9 (node -> control_expr .)
    $end            reduce using rule 9 (node -> control_expr .)
    CONST           reduce using rule 9 (node -> control_expr .)
    EXTERN          reduce using rule 9 (node -> control_expr .)
    INLINE          reduce using rule 9 (node -> control_expr .)
    LONG            reduce using rule 9 (node -> control_expr .)
    SHORT           reduce using rule 9 (node -> control_expr .)
    SIGNED          reduce using rule 9 (node -> control_expr .)
    UNSIGNED        reduce using rule 9 (node -> control_expr .)
    VOLATILE        reduce using rule 9 (node -> control_expr .)
    RBRACE          reduce using rule 9 (node -> control_expr .)


state 10

    (10) node -> struct_def .

    INCLUDE         reduce using rule 10 (node -> struct_def .)
    DEFINE          reduce using rule 10 (node -> struct_def .)
    IFNDEF          reduce using rule 10 (node -> struct_def .)
    ENDIF           reduce using rule 10 (node -> struct_def .)
    error           reduce using rule 10 (node -> struct_def .)
    ELSE            reduce using rule 10 (node -> struct_def .)
    STRUCT          reduce using rule 10 (node -> struct_def .)
    CHAR            reduce using rule 10 (node -> struct_def .)
    DOUBLE          reduce using rule 10 (node -> struct_def .)
    FLOAT           reduce using rule 10 (node -> struct_def .)
    INT             reduce using rule 10 (node -> struct_def .)
    VOID            reduce using rule 10 (node -> struct_def .)
    INT8_T          reduce using rule 10 (node -> struct_def .)
    INT16_T         reduce using rule 10 (node -> struct_def .)
    INT32_T         reduce using rule 10 (node -> struct_def .)
    INT64_T         reduce using rule 10 (node -> struct_def .)
    UINT8_T         reduce using rule 10 (node -> struct_def .)
    UINT16_T        reduce using rule 10 (node -> struct_def .)
    UINT32_T        reduce using rule 10 (node -> struct_def .)
    UINT64_T        reduce using rule 10 (node -> struct_def .)
    ID              reduce using rule 10 (node -> struct_def .)
    SIZEOF          reduce using rule 10 (node -> struct_def .)
    LPAREN          reduce using rule 10 (node -> struct_def .)
    NEGATE          reduce using rule 10 (node -> struct_def .)
    MINUS           reduce using rule 10 (node -> struct_def .)
    RETURN          reduce using rule 10 (node -> struct_def .)
    WHILE           reduce using rule 10 (node -> struct_def .)
    IF              reduce using rule 10 (node -> struct_def .)
    FOR             reduce using rule 10 (node -> struct_def .)
    FLOAT_L         reduce using rule 10 (node -> struct_def .)
    INT_L           reduce using rule 10 (node -> struct_def .)
    CHAR_L          reduce using rule 10 (node -> struct_def .)
    STRING_L        reduce using rule 10 (node -> struct_def .)
    NONDECIMAL_L    reduce using rule 10 (node -> struct_def .)
    BITAND          reduce using rule 10 (node -> struct_def .)
    $end            reduce using rule 10 (node -> struct_def .)
    CONST           reduce using rule 10 (node -> struct_def .)
    EXTERN          reduce using rule 10 (node -> struct_def .)
    INLINE          reduce using rule 10 (node -> struct_def .)
    LONG            reduce using rule 10 (node -> struct_def .)
    SHORT           reduce using rule 10 (node -> struct_def .)
    SIGNED          reduce using rule 10 (node -> struct_def .)
    UNSIGNED        reduce using rule 10 (node -> struct_def .)
    VOLATILE        reduce using rule 10 (node -> struct_def .)
    RBRACE          reduce using rule 10 (node -> struct_def .)


state 11

    (48) include -> INCLUDE .

    INCLUDE         reduce using rule 48 (include -> INCLUDE .)
    DEFINE          reduce using rule 48 (include -> INCLUDE .)
    IFNDEF          reduce using rule 48 (include -> INCLUDE .)
    ENDIF           reduce using rule 48 (include -> INCLUDE .)
    error           reduce using rule 48 (include -> INCLUDE .)
    ELSE            reduce using rule 48 (include -> INCLUDE .)
    STRUCT          reduce using rule 48 (include -> INCLUDE .)
    CHAR            reduce using rule 48 (include -> INCLUDE .)
    DOUBLE          reduce using rule 48 (include -> INCLUDE .)
    FLOAT           reduce using rule 48 (include -> INCLUDE .)
    INT             reduce using rule 48 (include -> INCLUDE .)
    VOID            reduce using rule 48 (include -> INCLUDE .)
    INT8_T          reduce using rule 48 (include -> INCLUDE .)
    INT16_T         reduce using rule 48 (include -> INCLUDE .)
    INT32_T         reduce using rule 48 (include -> INCLUDE .)
    INT64_T         reduce using rule 48 (include -> INCLUDE .)
    UINT8_T         reduce using rule 48 (include -> INCLUDE .)
    UINT16_T        reduce using rule 48 (include -> INCLUDE .)
    UINT32_T        reduce using rule 48 (include -> INCLUDE .)
    UINT64_T        reduce using rule 48 (include -> INCLUDE .)
    ID              reduce using rule 48 (include -> INCLUDE .)
    SIZEOF          reduce using rule 48 (include -> INCLUDE .)
    LPAREN          reduce using rule 48 (include -> INCLUDE .)
    NEGATE          reduce using rule 48 (include -> INCLUDE .)
    MINUS           reduce using rule 48 (include -> INCLUDE .)
    RETURN          reduce using rule 48 (include -> INCLUDE .)
    WHILE           reduce using rule 48 (include -> INCLUDE .)
    IF              reduce using rule 48 (include -> INCLUDE .)
    FOR             reduce using rule 48 (include -> INCLUDE .)
    FLOAT_L         reduce using rule 48 (include -> INCLUDE .)
    INT_L           reduce using rule 48 (include -> INCLUDE .)
    CHAR_L          reduce using rule 48 (include -> INCLUDE .)
    STRING_L        reduce using rule 48 (include -> INCLUDE .)
    NONDECIMAL_L    reduce using rule 48 (include -> INCLUDE .)
    BITAND          reduce using rule 48 (include -> INCLUDE .)
    $end            reduce using rule 48 (include -> INCLUDE .)
    CONST           reduce using rule 48 (include -> INCLUDE .)
    EXTERN          reduce using rule 48 (include -> INCLUDE .)
    INLINE          reduce using rule 48 (include -> INCLUDE .)
    LONG            reduce using rule 48 (include -> INCLUDE .)
    SHORT           reduce using rule 48 (include -> INCLUDE .)
    SIGNED          reduce using rule 48 (include -> INCLUDE .)
    UNSIGNED        reduce using rule 48 (include -> INCLUDE .)
    VOLATILE        reduce using rule 48 (include -> INCLUDE .)
    RBRACE          reduce using rule 48 (include -> INCLUDE .)


state 12

    (49) define -> DEFINE .

    INCLUDE         reduce using rule 49 (define -> DEFINE .)
    DEFINE          reduce using rule 49 (define -> DEFINE .)
    IFNDEF          reduce using rule 49 (define -> DEFINE .)
    ENDIF           reduce using rule 49 (define -> DEFINE .)
    error           reduce using rule 49 (define -> DEFINE .)
    ELSE            reduce using rule 49 (define -> DEFINE .)
    STRUCT          reduce using rule 49 (define -> DEFINE .)
    CHAR            reduce using rule 49 (define -> DEFINE .)
    DOUBLE          reduce using rule 49 (define -> DEFINE .)
    FLOAT           reduce using rule 49 (define -> DEFINE .)
    INT             reduce using rule 49 (define -> DEFINE .)
    VOID            reduce using rule 49 (define -> DEFINE .)
    INT8_T          reduce using rule 49 (define -> DEFINE .)
    INT16_T         reduce using rule 49 (define -> DEFINE .)
    INT32_T         reduce using rule 49 (define -> DEFINE .)
    INT64_T         reduce using rule 49 (define -> DEFINE .)
    UINT8_T         reduce using rule 49 (define -> DEFINE .)
    UINT16_T        reduce using rule 49 (define -> DEFINE .)
    UINT32_T        reduce using rule 49 (define -> DEFINE .)
    UINT64_T        reduce using rule 49 (define -> DEFINE .)
    ID              reduce using rule 49 (define -> DEFINE .)
    SIZEOF          reduce using rule 49 (define -> DEFINE .)
    LPAREN          reduce using rule 49 (define -> DEFINE .)
    NEGATE          reduce using rule 49 (define -> DEFINE .)
    MINUS           reduce using rule 49 (define -> DEFINE .)
    RETURN          reduce using rule 49 (define -> DEFINE .)
    WHILE           reduce using rule 49 (define -> DEFINE .)
    IF              reduce using rule 49 (define -> DEFINE .)
    FOR             reduce using rule 49 (define -> DEFINE .)
    FLOAT_L         reduce using rule 49 (define -> DEFINE .)
    INT_L           reduce using rule 49 (define -> DEFINE .)
    CHAR_L          reduce using rule 49 (define -> DEFINE .)
    STRING_L        reduce using rule 49 (define -> DEFINE .)
    NONDECIMAL_L    reduce using rule 49 (define -> DEFINE .)
    BITAND          reduce using rule 49 (define -> DEFINE .)
    $end            reduce using rule 49 (define -> DEFINE .)
    CONST           reduce using rule 49 (define -> DEFINE .)
    EXTERN          reduce using rule 49 (define -> DEFINE .)
    INLINE          reduce using rule 49 (define -> DEFINE .)
    LONG            reduce using rule 49 (define -> DEFINE .)
    SHORT           reduce using rule 49 (define -> DEFINE .)
    SIGNED          reduce using rule 49 (define -> DEFINE .)
    UNSIGNED        reduce using rule 49 (define -> DEFINE .)
    VOLATILE        reduce using rule 49 (define -> DEFINE .)
    RBRACE          reduce using rule 49 (define -> DEFINE .)


state 13

    (50) if -> IFNDEF .

    INCLUDE         reduce using rule 50 (if -> IFNDEF .)
    DEFINE          reduce using rule 50 (if -> IFNDEF .)
    IFNDEF          reduce using rule 50 (if -> IFNDEF .)
    ENDIF           reduce using rule 50 (if -> IFNDEF .)
    error           reduce using rule 50 (if -> IFNDEF .)
    ELSE            reduce using rule 50 (if -> IFNDEF .)
    STRUCT          reduce using rule 50 (if -> IFNDEF .)
    CHAR            reduce using rule 50 (if -> IFNDEF .)
    DOUBLE          reduce using rule 50 (if -> IFNDEF .)
    FLOAT           reduce using rule 50 (if -> IFNDEF .)
    INT             reduce using rule 50 (if -> IFNDEF .)
    VOID            reduce using rule 50 (if -> IFNDEF .)
    INT8_T          reduce using rule 50 (if -> IFNDEF .)
    INT16_T         reduce using rule 50 (if -> IFNDEF .)
    INT32_T         reduce using rule 50 (if -> IFNDEF .)
    INT64_T         reduce using rule 50 (if -> IFNDEF .)
    UINT8_T         reduce using rule 50 (if -> IFNDEF .)
    UINT16_T        reduce using rule 50 (if -> IFNDEF .)
    UINT32_T        reduce using rule 50 (if -> IFNDEF .)
    UINT64_T        reduce using rule 50 (if -> IFNDEF .)
    ID              reduce using rule 50 (if -> IFNDEF .)
    SIZEOF          reduce using rule 50 (if -> IFNDEF .)
    LPAREN          reduce using rule 50 (if -> IFNDEF .)
    NEGATE          reduce using rule 50 (if -> IFNDEF .)
    MINUS           reduce using rule 50 (if -> IFNDEF .)
    RETURN          reduce using rule 50 (if -> IFNDEF .)
    WHILE           reduce using rule 50 (if -> IFNDEF .)
    IF              reduce using rule 50 (if -> IFNDEF .)
    FOR             reduce using rule 50 (if -> IFNDEF .)
    FLOAT_L         reduce using rule 50 (if -> IFNDEF .)
    INT_L           reduce using rule 50 (if -> IFNDEF .)
    CHAR_L          reduce using rule 50 (if -> IFNDEF .)
    STRING_L        reduce using rule 50 (if -> IFNDEF .)
    NONDECIMAL_L    reduce using rule 50 (if -> IFNDEF .)
    BITAND          reduce using rule 50 (if -> IFNDEF .)
    $end            reduce using rule 50 (if -> IFNDEF .)
    CONST           reduce using rule 50 (if -> IFNDEF .)
    EXTERN          reduce using rule 50 (if -> IFNDEF .)
    INLINE          reduce using rule 50 (if -> IFNDEF .)
    LONG            reduce using rule 50 (if -> IFNDEF .)
    SHORT           reduce using rule 50 (if -> IFNDEF .)
    SIGNED          reduce using rule 50 (if -> IFNDEF .)
    UNSIGNED        reduce using rule 50 (if -> IFNDEF .)
    VOLATILE        reduce using rule 50 (if -> IFNDEF .)
    RBRACE          reduce using rule 50 (if -> IFNDEF .)


state 14

    (51) if -> ENDIF .

    INCLUDE         reduce using rule 51 (if -> ENDIF .)
    DEFINE          reduce using rule 51 (if -> ENDIF .)
    IFNDEF          reduce using rule 51 (if -> ENDIF .)
    ENDIF           reduce using rule 51 (if -> ENDIF .)
    error           reduce using rule 51 (if -> ENDIF .)
    ELSE            reduce using rule 51 (if -> ENDIF .)
    STRUCT          reduce using rule 51 (if -> ENDIF .)
    CHAR            reduce using rule 51 (if -> ENDIF .)
    DOUBLE          reduce using rule 51 (if -> ENDIF .)
    FLOAT           reduce using rule 51 (if -> ENDIF .)
    INT             reduce using rule 51 (if -> ENDIF .)
    VOID            reduce using rule 51 (if -> ENDIF .)
    INT8_T          reduce using rule 51 (if -> ENDIF .)
    INT16_T         reduce using rule 51 (if -> ENDIF .)
    INT32_T         reduce using rule 51 (if -> ENDIF .)
    INT64_T         reduce using rule 51 (if -> ENDIF .)
    UINT8_T         reduce using rule 51 (if -> ENDIF .)
    UINT16_T        reduce using rule 51 (if -> ENDIF .)
    UINT32_T        reduce using rule 51 (if -> ENDIF .)
    UINT64_T        reduce using rule 51 (if -> ENDIF .)
    ID              reduce using rule 51 (if -> ENDIF .)
    SIZEOF          reduce using rule 51 (if -> ENDIF .)
    LPAREN          reduce using rule 51 (if -> ENDIF .)
    NEGATE          reduce using rule 51 (if -> ENDIF .)
    MINUS           reduce using rule 51 (if -> ENDIF .)
    RETURN          reduce using rule 51 (if -> ENDIF .)
    WHILE           reduce using rule 51 (if -> ENDIF .)
    IF              reduce using rule 51 (if -> ENDIF .)
    FOR             reduce using rule 51 (if -> ENDIF .)
    FLOAT_L         reduce using rule 51 (if -> ENDIF .)
    INT_L           reduce using rule 51 (if -> ENDIF .)
    CHAR_L          reduce using rule 51 (if -> ENDIF .)
    STRING_L        reduce using rule 51 (if -> ENDIF .)
    NONDECIMAL_L    reduce using rule 51 (if -> ENDIF .)
    BITAND          reduce using rule 51 (if -> ENDIF .)
    $end            reduce using rule 51 (if -> ENDIF .)
    CONST           reduce using rule 51 (if -> ENDIF .)
    EXTERN          reduce using rule 51 (if -> ENDIF .)
    INLINE          reduce using rule 51 (if -> ENDIF .)
    LONG            reduce using rule 51 (if -> ENDIF .)
    SHORT           reduce using rule 51 (if -> ENDIF .)
    SIGNED          reduce using rule 51 (if -> ENDIF .)
    UNSIGNED        reduce using rule 51 (if -> ENDIF .)
    VOLATILE        reduce using rule 51 (if -> ENDIF .)
    RBRACE          reduce using rule 51 (if -> ENDIF .)


state 15

    (83) func_def -> dtype . ID LPAREN func_def_arglist RPAREN scope
    (87) func_decl -> dtype . ID LPAREN func_def_arglist RPAREN SEMI
    (44) dtype -> dtype . ASTERISK
    (137) declare_var_ls -> dtype . ID

    ID              shift and go to state 65
    ASTERISK        shift and go to state 66


state 16

    (98) func_call -> ID . LPAREN func_arglist RPAREN
    (45) name -> ID .

    LPAREN          shift and go to state 67
    INCREMENT       reduce using rule 45 (name -> ID .)
    LBRACK          reduce using rule 45 (name -> ID .)
    MEMBER          reduce using rule 45 (name -> ID .)
    SIMPLE_ASSIGN   reduce using rule 45 (name -> ID .)
    COMPLEX_ASSIGN  reduce using rule 45 (name -> ID .)
    PLUS            reduce using rule 45 (name -> ID .)
    MINUS           reduce using rule 45 (name -> ID .)
    ASTERISK        reduce using rule 45 (name -> ID .)
    DIVIDE          reduce using rule 45 (name -> ID .)
    LSHIFT          reduce using rule 45 (name -> ID .)
    RSHIFT          reduce using rule 45 (name -> ID .)
    PERCENT         reduce using rule 45 (name -> ID .)
    BITAND          reduce using rule 45 (name -> ID .)
    BITOR           reduce using rule 45 (name -> ID .)
    EQ              reduce using rule 45 (name -> ID .)
    NEQ             reduce using rule 45 (name -> ID .)
    LT              reduce using rule 45 (name -> ID .)
    GT              reduce using rule 45 (name -> ID .)
    LE              reduce using rule 45 (name -> ID .)
    GE              reduce using rule 45 (name -> ID .)
    AND             reduce using rule 45 (name -> ID .)
    OR              reduce using rule 45 (name -> ID .)


state 17

    (113) expression -> LPAREN . expression RPAREN
    (114) expression -> LPAREN . name RPAREN
    (19) type_cast -> LPAREN . dtype RPAREN
    (113) expression -> . LPAREN expression RPAREN
    (114) expression -> . LPAREN name RPAREN
    (115) expression -> . NEGATE expression
    (116) expression -> . MINUS expression
    (117) expression -> . NEGATE name
    (118) expression -> . MINUS name
    (133) expression -> . operand binop operand
    (134) expression -> . name INCREMENT
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (30) dtype -> . CHAR
    (31) dtype -> . DOUBLE
    (32) dtype -> . FLOAT
    (33) dtype -> . INT
    (34) dtype -> . VOID
    (35) dtype -> . INT8_T
    (36) dtype -> . INT16_T
    (37) dtype -> . INT32_T
    (38) dtype -> . INT64_T
    (39) dtype -> . UINT8_T
    (40) dtype -> . UINT16_T
    (41) dtype -> . UINT32_T
    (42) dtype -> . UINT64_T
    (43) dtype -> . struct_type
    (44) dtype -> . dtype ASTERISK
    (129) operand -> . name
    (130) operand -> . expression
    (131) operand -> . type_cast name
    (132) operand -> . func_call
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name
    (18) struct_type -> . STRUCT name
    (19) type_cast -> . LPAREN dtype RPAREN
    (98) func_call -> . ID LPAREN func_arglist RPAREN
    (99) func_call -> . SIZEOF LPAREN func_arglist RPAREN

    LPAREN          shift and go to state 17
    NEGATE          shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 71
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 31
    FLOAT           shift and go to state 32
    INT             shift and go to state 33
    VOID            shift and go to state 34
    INT8_T          shift and go to state 35
    INT16_T         shift and go to state 36
    INT32_T         shift and go to state 37
    INT64_T         shift and go to state 38
    UINT8_T         shift and go to state 39
    UINT16_T        shift and go to state 40
    UINT32_T        shift and go to state 41
    UINT64_T        shift and go to state 42
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64
    STRUCT          shift and go to state 73
    SIZEOF          shift and go to state 44

    expression                     shift and go to state 68
    name                           shift and go to state 69
    dtype                          shift and go to state 70
    operand                        shift and go to state 51
    literal                        shift and go to state 57
    access                         shift and go to state 58
    struct_type                    shift and go to state 43
    type_cast                      shift and go to state 56
    func_call                      shift and go to state 72

state 18

    (84) func_def -> modifier_list . dtype ID LPAREN func_def_arglist RPAREN scope
    (29) modifier_list -> modifier_list . modifier
    (138) declare_var_ls -> modifier_list . ID
    (139) declare_var_ls -> modifier_list . dtype ID
    (30) dtype -> . CHAR
    (31) dtype -> . DOUBLE
    (32) dtype -> . FLOAT
    (33) dtype -> . INT
    (34) dtype -> . VOID
    (35) dtype -> . INT8_T
    (36) dtype -> . INT16_T
    (37) dtype -> . INT32_T
    (38) dtype -> . INT64_T
    (39) dtype -> . UINT8_T
    (40) dtype -> . UINT16_T
    (41) dtype -> . UINT32_T
    (42) dtype -> . UINT64_T
    (43) dtype -> . struct_type
    (44) dtype -> . dtype ASTERISK
    (20) modifier -> . CONST
    (21) modifier -> . EXTERN
    (22) modifier -> . INLINE
    (23) modifier -> . LONG
    (24) modifier -> . SHORT
    (25) modifier -> . SIGNED
    (26) modifier -> . UNSIGNED
    (27) modifier -> . VOLATILE
    (18) struct_type -> . STRUCT name

    ID              shift and go to state 75
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 31
    FLOAT           shift and go to state 32
    INT             shift and go to state 33
    VOID            shift and go to state 34
    INT8_T          shift and go to state 35
    INT16_T         shift and go to state 36
    INT32_T         shift and go to state 37
    INT64_T         shift and go to state 38
    UINT8_T         shift and go to state 39
    UINT16_T        shift and go to state 40
    UINT32_T        shift and go to state 41
    UINT64_T        shift and go to state 42
    CONST           shift and go to state 77
    EXTERN          shift and go to state 78
    INLINE          shift and go to state 79
    LONG            shift and go to state 80
    SHORT           shift and go to state 81
    SIGNED          shift and go to state 82
    UNSIGNED        shift and go to state 83
    VOLATILE        shift and go to state 84
    STRUCT          shift and go to state 73

    dtype                          shift and go to state 74
    modifier                       shift and go to state 76
    struct_type                    shift and go to state 43

state 19

    (85) func_def -> func_call . scope
    (110) statement -> func_call . SEMI
    (132) operand -> func_call .
    (52) scope -> . LBRACE node_list RBRACE
    (53) scope -> . error RBRACE

    SEMI            shift and go to state 86
    PLUS            reduce using rule 132 (operand -> func_call .)
    MINUS           reduce using rule 132 (operand -> func_call .)
    ASTERISK        reduce using rule 132 (operand -> func_call .)
    DIVIDE          reduce using rule 132 (operand -> func_call .)
    LSHIFT          reduce using rule 132 (operand -> func_call .)
    RSHIFT          reduce using rule 132 (operand -> func_call .)
    PERCENT         reduce using rule 132 (operand -> func_call .)
    BITAND          reduce using rule 132 (operand -> func_call .)
    BITOR           reduce using rule 132 (operand -> func_call .)
    EQ              reduce using rule 132 (operand -> func_call .)
    NEQ             reduce using rule 132 (operand -> func_call .)
    LT              reduce using rule 132 (operand -> func_call .)
    GT              reduce using rule 132 (operand -> func_call .)
    LE              reduce using rule 132 (operand -> func_call .)
    GE              reduce using rule 132 (operand -> func_call .)
    AND             reduce using rule 132 (operand -> func_call .)
    OR              reduce using rule 132 (operand -> func_call .)
    LBRACE          shift and go to state 87
    error           shift and go to state 88

    scope                          shift and go to state 85

state 20

    (86) func_def -> error . scope
    (112) statement -> error . SEMI
    (76) control_expr -> error . LBRACE
    (52) scope -> . LBRACE node_list RBRACE
    (53) scope -> . error RBRACE

    SEMI            shift and go to state 90
    LBRACE          shift and go to state 91
    error           shift and go to state 88

    scope                          shift and go to state 89

state 21

    (106) statement -> init_var .

    INCLUDE         reduce using rule 106 (statement -> init_var .)
    DEFINE          reduce using rule 106 (statement -> init_var .)
    IFNDEF          reduce using rule 106 (statement -> init_var .)
    ENDIF           reduce using rule 106 (statement -> init_var .)
    error           reduce using rule 106 (statement -> init_var .)
    ELSE            reduce using rule 106 (statement -> init_var .)
    STRUCT          reduce using rule 106 (statement -> init_var .)
    CHAR            reduce using rule 106 (statement -> init_var .)
    DOUBLE          reduce using rule 106 (statement -> init_var .)
    FLOAT           reduce using rule 106 (statement -> init_var .)
    INT             reduce using rule 106 (statement -> init_var .)
    VOID            reduce using rule 106 (statement -> init_var .)
    INT8_T          reduce using rule 106 (statement -> init_var .)
    INT16_T         reduce using rule 106 (statement -> init_var .)
    INT32_T         reduce using rule 106 (statement -> init_var .)
    INT64_T         reduce using rule 106 (statement -> init_var .)
    UINT8_T         reduce using rule 106 (statement -> init_var .)
    UINT16_T        reduce using rule 106 (statement -> init_var .)
    UINT32_T        reduce using rule 106 (statement -> init_var .)
    UINT64_T        reduce using rule 106 (statement -> init_var .)
    ID              reduce using rule 106 (statement -> init_var .)
    SIZEOF          reduce using rule 106 (statement -> init_var .)
    LPAREN          reduce using rule 106 (statement -> init_var .)
    NEGATE          reduce using rule 106 (statement -> init_var .)
    MINUS           reduce using rule 106 (statement -> init_var .)
    RETURN          reduce using rule 106 (statement -> init_var .)
    WHILE           reduce using rule 106 (statement -> init_var .)
    IF              reduce using rule 106 (statement -> init_var .)
    FOR             reduce using rule 106 (statement -> init_var .)
    FLOAT_L         reduce using rule 106 (statement -> init_var .)
    INT_L           reduce using rule 106 (statement -> init_var .)
    CHAR_L          reduce using rule 106 (statement -> init_var .)
    STRING_L        reduce using rule 106 (statement -> init_var .)
    NONDECIMAL_L    reduce using rule 106 (statement -> init_var .)
    BITAND          reduce using rule 106 (statement -> init_var .)
    $end            reduce using rule 106 (statement -> init_var .)
    CONST           reduce using rule 106 (statement -> init_var .)
    EXTERN          reduce using rule 106 (statement -> init_var .)
    INLINE          reduce using rule 106 (statement -> init_var .)
    LONG            reduce using rule 106 (statement -> init_var .)
    SHORT           reduce using rule 106 (statement -> init_var .)
    SIGNED          reduce using rule 106 (statement -> init_var .)
    UNSIGNED        reduce using rule 106 (statement -> init_var .)
    VOLATILE        reduce using rule 106 (statement -> init_var .)
    RBRACE          reduce using rule 106 (statement -> init_var .)


state 22

    (107) statement -> assign_var .

    INCLUDE         reduce using rule 107 (statement -> assign_var .)
    DEFINE          reduce using rule 107 (statement -> assign_var .)
    IFNDEF          reduce using rule 107 (statement -> assign_var .)
    ENDIF           reduce using rule 107 (statement -> assign_var .)
    error           reduce using rule 107 (statement -> assign_var .)
    ELSE            reduce using rule 107 (statement -> assign_var .)
    STRUCT          reduce using rule 107 (statement -> assign_var .)
    CHAR            reduce using rule 107 (statement -> assign_var .)
    DOUBLE          reduce using rule 107 (statement -> assign_var .)
    FLOAT           reduce using rule 107 (statement -> assign_var .)
    INT             reduce using rule 107 (statement -> assign_var .)
    VOID            reduce using rule 107 (statement -> assign_var .)
    INT8_T          reduce using rule 107 (statement -> assign_var .)
    INT16_T         reduce using rule 107 (statement -> assign_var .)
    INT32_T         reduce using rule 107 (statement -> assign_var .)
    INT64_T         reduce using rule 107 (statement -> assign_var .)
    UINT8_T         reduce using rule 107 (statement -> assign_var .)
    UINT16_T        reduce using rule 107 (statement -> assign_var .)
    UINT32_T        reduce using rule 107 (statement -> assign_var .)
    UINT64_T        reduce using rule 107 (statement -> assign_var .)
    ID              reduce using rule 107 (statement -> assign_var .)
    SIZEOF          reduce using rule 107 (statement -> assign_var .)
    LPAREN          reduce using rule 107 (statement -> assign_var .)
    NEGATE          reduce using rule 107 (statement -> assign_var .)
    MINUS           reduce using rule 107 (statement -> assign_var .)
    RETURN          reduce using rule 107 (statement -> assign_var .)
    WHILE           reduce using rule 107 (statement -> assign_var .)
    IF              reduce using rule 107 (statement -> assign_var .)
    FOR             reduce using rule 107 (statement -> assign_var .)
    FLOAT_L         reduce using rule 107 (statement -> assign_var .)
    INT_L           reduce using rule 107 (statement -> assign_var .)
    CHAR_L          reduce using rule 107 (statement -> assign_var .)
    STRING_L        reduce using rule 107 (statement -> assign_var .)
    NONDECIMAL_L    reduce using rule 107 (statement -> assign_var .)
    BITAND          reduce using rule 107 (statement -> assign_var .)
    $end            reduce using rule 107 (statement -> assign_var .)
    CONST           reduce using rule 107 (statement -> assign_var .)
    EXTERN          reduce using rule 107 (statement -> assign_var .)
    INLINE          reduce using rule 107 (statement -> assign_var .)
    LONG            reduce using rule 107 (statement -> assign_var .)
    SHORT           reduce using rule 107 (statement -> assign_var .)
    SIGNED          reduce using rule 107 (statement -> assign_var .)
    UNSIGNED        reduce using rule 107 (statement -> assign_var .)
    VOLATILE        reduce using rule 107 (statement -> assign_var .)
    RBRACE          reduce using rule 107 (statement -> assign_var .)


state 23

    (108) statement -> declare_var .

    INCLUDE         reduce using rule 108 (statement -> declare_var .)
    DEFINE          reduce using rule 108 (statement -> declare_var .)
    IFNDEF          reduce using rule 108 (statement -> declare_var .)
    ENDIF           reduce using rule 108 (statement -> declare_var .)
    error           reduce using rule 108 (statement -> declare_var .)
    ELSE            reduce using rule 108 (statement -> declare_var .)
    STRUCT          reduce using rule 108 (statement -> declare_var .)
    CHAR            reduce using rule 108 (statement -> declare_var .)
    DOUBLE          reduce using rule 108 (statement -> declare_var .)
    FLOAT           reduce using rule 108 (statement -> declare_var .)
    INT             reduce using rule 108 (statement -> declare_var .)
    VOID            reduce using rule 108 (statement -> declare_var .)
    INT8_T          reduce using rule 108 (statement -> declare_var .)
    INT16_T         reduce using rule 108 (statement -> declare_var .)
    INT32_T         reduce using rule 108 (statement -> declare_var .)
    INT64_T         reduce using rule 108 (statement -> declare_var .)
    UINT8_T         reduce using rule 108 (statement -> declare_var .)
    UINT16_T        reduce using rule 108 (statement -> declare_var .)
    UINT32_T        reduce using rule 108 (statement -> declare_var .)
    UINT64_T        reduce using rule 108 (statement -> declare_var .)
    ID              reduce using rule 108 (statement -> declare_var .)
    SIZEOF          reduce using rule 108 (statement -> declare_var .)
    LPAREN          reduce using rule 108 (statement -> declare_var .)
    NEGATE          reduce using rule 108 (statement -> declare_var .)
    MINUS           reduce using rule 108 (statement -> declare_var .)
    RETURN          reduce using rule 108 (statement -> declare_var .)
    WHILE           reduce using rule 108 (statement -> declare_var .)
    IF              reduce using rule 108 (statement -> declare_var .)
    FOR             reduce using rule 108 (statement -> declare_var .)
    FLOAT_L         reduce using rule 108 (statement -> declare_var .)
    INT_L           reduce using rule 108 (statement -> declare_var .)
    CHAR_L          reduce using rule 108 (statement -> declare_var .)
    STRING_L        reduce using rule 108 (statement -> declare_var .)
    NONDECIMAL_L    reduce using rule 108 (statement -> declare_var .)
    BITAND          reduce using rule 108 (statement -> declare_var .)
    $end            reduce using rule 108 (statement -> declare_var .)
    CONST           reduce using rule 108 (statement -> declare_var .)
    EXTERN          reduce using rule 108 (statement -> declare_var .)
    INLINE          reduce using rule 108 (statement -> declare_var .)
    LONG            reduce using rule 108 (statement -> declare_var .)
    SHORT           reduce using rule 108 (statement -> declare_var .)
    SIGNED          reduce using rule 108 (statement -> declare_var .)
    UNSIGNED        reduce using rule 108 (statement -> declare_var .)
    VOLATILE        reduce using rule 108 (statement -> declare_var .)
    RBRACE          reduce using rule 108 (statement -> declare_var .)


state 24

    (109) statement -> expression . SEMI
    (130) operand -> expression .

    SEMI            shift and go to state 92
    PLUS            reduce using rule 130 (operand -> expression .)
    MINUS           reduce using rule 130 (operand -> expression .)
    ASTERISK        reduce using rule 130 (operand -> expression .)
    DIVIDE          reduce using rule 130 (operand -> expression .)
    LSHIFT          reduce using rule 130 (operand -> expression .)
    RSHIFT          reduce using rule 130 (operand -> expression .)
    PERCENT         reduce using rule 130 (operand -> expression .)
    BITAND          reduce using rule 130 (operand -> expression .)
    BITOR           reduce using rule 130 (operand -> expression .)
    EQ              reduce using rule 130 (operand -> expression .)
    NEQ             reduce using rule 130 (operand -> expression .)
    LT              reduce using rule 130 (operand -> expression .)
    GT              reduce using rule 130 (operand -> expression .)
    LE              reduce using rule 130 (operand -> expression .)
    GE              reduce using rule 130 (operand -> expression .)
    AND             reduce using rule 130 (operand -> expression .)
    OR              reduce using rule 130 (operand -> expression .)


state 25

    (111) statement -> return . SEMI

    SEMI            shift and go to state 93


state 26

    (72) control_expr -> control . LPAREN conditional_expr RPAREN scope
    (73) control_expr -> control . scope
    (52) scope -> . LBRACE node_list RBRACE
    (53) scope -> . error RBRACE

    LPAREN          shift and go to state 94
    LBRACE          shift and go to state 87
    error           shift and go to state 88

    scope                          shift and go to state 95

state 27

    (74) control_expr -> for_loop . scope
    (52) scope -> . LBRACE node_list RBRACE
    (53) scope -> . error RBRACE

    LBRACE          shift and go to state 87
    error           shift and go to state 88

    scope                          shift and go to state 96

state 28

    (75) control_expr -> ELSE . node_list
    (56) control -> ELSE .
    (1) node_list -> .
    (2) node_list -> . node_list node

  ! reduce/reduce conflict for error resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for LPAREN resolved using rule 1 (node_list -> .)
    LBRACE          reduce using rule 56 (control -> ELSE .)
    INCLUDE         reduce using rule 1 (node_list -> .)
    DEFINE          reduce using rule 1 (node_list -> .)
    IFNDEF          reduce using rule 1 (node_list -> .)
    ENDIF           reduce using rule 1 (node_list -> .)
    error           reduce using rule 1 (node_list -> .)
    ELSE            reduce using rule 1 (node_list -> .)
    STRUCT          reduce using rule 1 (node_list -> .)
    CHAR            reduce using rule 1 (node_list -> .)
    DOUBLE          reduce using rule 1 (node_list -> .)
    FLOAT           reduce using rule 1 (node_list -> .)
    INT             reduce using rule 1 (node_list -> .)
    VOID            reduce using rule 1 (node_list -> .)
    INT8_T          reduce using rule 1 (node_list -> .)
    INT16_T         reduce using rule 1 (node_list -> .)
    INT32_T         reduce using rule 1 (node_list -> .)
    INT64_T         reduce using rule 1 (node_list -> .)
    UINT8_T         reduce using rule 1 (node_list -> .)
    UINT16_T        reduce using rule 1 (node_list -> .)
    UINT32_T        reduce using rule 1 (node_list -> .)
    UINT64_T        reduce using rule 1 (node_list -> .)
    ID              reduce using rule 1 (node_list -> .)
    SIZEOF          reduce using rule 1 (node_list -> .)
    LPAREN          reduce using rule 1 (node_list -> .)
    NEGATE          reduce using rule 1 (node_list -> .)
    MINUS           reduce using rule 1 (node_list -> .)
    RETURN          reduce using rule 1 (node_list -> .)
    WHILE           reduce using rule 1 (node_list -> .)
    IF              reduce using rule 1 (node_list -> .)
    FOR             reduce using rule 1 (node_list -> .)
    FLOAT_L         reduce using rule 1 (node_list -> .)
    INT_L           reduce using rule 1 (node_list -> .)
    CHAR_L          reduce using rule 1 (node_list -> .)
    STRING_L        reduce using rule 1 (node_list -> .)
    NONDECIMAL_L    reduce using rule 1 (node_list -> .)
    BITAND          reduce using rule 1 (node_list -> .)
    CONST           reduce using rule 1 (node_list -> .)
    EXTERN          reduce using rule 1 (node_list -> .)
    INLINE          reduce using rule 1 (node_list -> .)
    LONG            reduce using rule 1 (node_list -> .)
    SHORT           reduce using rule 1 (node_list -> .)
    SIGNED          reduce using rule 1 (node_list -> .)
    UNSIGNED        reduce using rule 1 (node_list -> .)
    VOLATILE        reduce using rule 1 (node_list -> .)
    $end            reduce using rule 1 (node_list -> .)
    RBRACE          reduce using rule 1 (node_list -> .)

  ! LPAREN          [ reduce using rule 56 (control -> ELSE .) ]
  ! error           [ reduce using rule 56 (control -> ELSE .) ]

    node_list                      shift and go to state 97

state 29

    (104) struct_def -> STRUCT . ID scope SEMI
    (18) struct_type -> STRUCT . name
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name

    ID              shift and go to state 98
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64

    name                           shift and go to state 99
    literal                        shift and go to state 57
    access                         shift and go to state 58

state 30

    (30) dtype -> CHAR .

    ID              reduce using rule 30 (dtype -> CHAR .)
    ASTERISK        reduce using rule 30 (dtype -> CHAR .)
    RPAREN          reduce using rule 30 (dtype -> CHAR .)
    COMMA           reduce using rule 30 (dtype -> CHAR .)
    CHAR            reduce using rule 30 (dtype -> CHAR .)
    DOUBLE          reduce using rule 30 (dtype -> CHAR .)
    FLOAT           reduce using rule 30 (dtype -> CHAR .)
    INT             reduce using rule 30 (dtype -> CHAR .)
    VOID            reduce using rule 30 (dtype -> CHAR .)
    INT8_T          reduce using rule 30 (dtype -> CHAR .)
    INT16_T         reduce using rule 30 (dtype -> CHAR .)
    INT32_T         reduce using rule 30 (dtype -> CHAR .)
    INT64_T         reduce using rule 30 (dtype -> CHAR .)
    UINT8_T         reduce using rule 30 (dtype -> CHAR .)
    UINT16_T        reduce using rule 30 (dtype -> CHAR .)
    UINT32_T        reduce using rule 30 (dtype -> CHAR .)
    UINT64_T        reduce using rule 30 (dtype -> CHAR .)
    LPAREN          reduce using rule 30 (dtype -> CHAR .)
    NEGATE          reduce using rule 30 (dtype -> CHAR .)
    MINUS           reduce using rule 30 (dtype -> CHAR .)
    SIZEOF          reduce using rule 30 (dtype -> CHAR .)
    FLOAT_L         reduce using rule 30 (dtype -> CHAR .)
    INT_L           reduce using rule 30 (dtype -> CHAR .)
    CHAR_L          reduce using rule 30 (dtype -> CHAR .)
    STRING_L        reduce using rule 30 (dtype -> CHAR .)
    NONDECIMAL_L    reduce using rule 30 (dtype -> CHAR .)
    BITAND          reduce using rule 30 (dtype -> CHAR .)
    STRUCT          reduce using rule 30 (dtype -> CHAR .)
    CONST           reduce using rule 30 (dtype -> CHAR .)
    EXTERN          reduce using rule 30 (dtype -> CHAR .)
    INLINE          reduce using rule 30 (dtype -> CHAR .)
    LONG            reduce using rule 30 (dtype -> CHAR .)
    SHORT           reduce using rule 30 (dtype -> CHAR .)
    SIGNED          reduce using rule 30 (dtype -> CHAR .)
    UNSIGNED        reduce using rule 30 (dtype -> CHAR .)
    VOLATILE        reduce using rule 30 (dtype -> CHAR .)


state 31

    (31) dtype -> DOUBLE .

    ID              reduce using rule 31 (dtype -> DOUBLE .)
    ASTERISK        reduce using rule 31 (dtype -> DOUBLE .)
    RPAREN          reduce using rule 31 (dtype -> DOUBLE .)
    COMMA           reduce using rule 31 (dtype -> DOUBLE .)
    CHAR            reduce using rule 31 (dtype -> DOUBLE .)
    DOUBLE          reduce using rule 31 (dtype -> DOUBLE .)
    FLOAT           reduce using rule 31 (dtype -> DOUBLE .)
    INT             reduce using rule 31 (dtype -> DOUBLE .)
    VOID            reduce using rule 31 (dtype -> DOUBLE .)
    INT8_T          reduce using rule 31 (dtype -> DOUBLE .)
    INT16_T         reduce using rule 31 (dtype -> DOUBLE .)
    INT32_T         reduce using rule 31 (dtype -> DOUBLE .)
    INT64_T         reduce using rule 31 (dtype -> DOUBLE .)
    UINT8_T         reduce using rule 31 (dtype -> DOUBLE .)
    UINT16_T        reduce using rule 31 (dtype -> DOUBLE .)
    UINT32_T        reduce using rule 31 (dtype -> DOUBLE .)
    UINT64_T        reduce using rule 31 (dtype -> DOUBLE .)
    LPAREN          reduce using rule 31 (dtype -> DOUBLE .)
    NEGATE          reduce using rule 31 (dtype -> DOUBLE .)
    MINUS           reduce using rule 31 (dtype -> DOUBLE .)
    SIZEOF          reduce using rule 31 (dtype -> DOUBLE .)
    FLOAT_L         reduce using rule 31 (dtype -> DOUBLE .)
    INT_L           reduce using rule 31 (dtype -> DOUBLE .)
    CHAR_L          reduce using rule 31 (dtype -> DOUBLE .)
    STRING_L        reduce using rule 31 (dtype -> DOUBLE .)
    NONDECIMAL_L    reduce using rule 31 (dtype -> DOUBLE .)
    BITAND          reduce using rule 31 (dtype -> DOUBLE .)
    STRUCT          reduce using rule 31 (dtype -> DOUBLE .)
    CONST           reduce using rule 31 (dtype -> DOUBLE .)
    EXTERN          reduce using rule 31 (dtype -> DOUBLE .)
    INLINE          reduce using rule 31 (dtype -> DOUBLE .)
    LONG            reduce using rule 31 (dtype -> DOUBLE .)
    SHORT           reduce using rule 31 (dtype -> DOUBLE .)
    SIGNED          reduce using rule 31 (dtype -> DOUBLE .)
    UNSIGNED        reduce using rule 31 (dtype -> DOUBLE .)
    VOLATILE        reduce using rule 31 (dtype -> DOUBLE .)


state 32

    (32) dtype -> FLOAT .

    ID              reduce using rule 32 (dtype -> FLOAT .)
    ASTERISK        reduce using rule 32 (dtype -> FLOAT .)
    RPAREN          reduce using rule 32 (dtype -> FLOAT .)
    COMMA           reduce using rule 32 (dtype -> FLOAT .)
    CHAR            reduce using rule 32 (dtype -> FLOAT .)
    DOUBLE          reduce using rule 32 (dtype -> FLOAT .)
    FLOAT           reduce using rule 32 (dtype -> FLOAT .)
    INT             reduce using rule 32 (dtype -> FLOAT .)
    VOID            reduce using rule 32 (dtype -> FLOAT .)
    INT8_T          reduce using rule 32 (dtype -> FLOAT .)
    INT16_T         reduce using rule 32 (dtype -> FLOAT .)
    INT32_T         reduce using rule 32 (dtype -> FLOAT .)
    INT64_T         reduce using rule 32 (dtype -> FLOAT .)
    UINT8_T         reduce using rule 32 (dtype -> FLOAT .)
    UINT16_T        reduce using rule 32 (dtype -> FLOAT .)
    UINT32_T        reduce using rule 32 (dtype -> FLOAT .)
    UINT64_T        reduce using rule 32 (dtype -> FLOAT .)
    LPAREN          reduce using rule 32 (dtype -> FLOAT .)
    NEGATE          reduce using rule 32 (dtype -> FLOAT .)
    MINUS           reduce using rule 32 (dtype -> FLOAT .)
    SIZEOF          reduce using rule 32 (dtype -> FLOAT .)
    FLOAT_L         reduce using rule 32 (dtype -> FLOAT .)
    INT_L           reduce using rule 32 (dtype -> FLOAT .)
    CHAR_L          reduce using rule 32 (dtype -> FLOAT .)
    STRING_L        reduce using rule 32 (dtype -> FLOAT .)
    NONDECIMAL_L    reduce using rule 32 (dtype -> FLOAT .)
    BITAND          reduce using rule 32 (dtype -> FLOAT .)
    STRUCT          reduce using rule 32 (dtype -> FLOAT .)
    CONST           reduce using rule 32 (dtype -> FLOAT .)
    EXTERN          reduce using rule 32 (dtype -> FLOAT .)
    INLINE          reduce using rule 32 (dtype -> FLOAT .)
    LONG            reduce using rule 32 (dtype -> FLOAT .)
    SHORT           reduce using rule 32 (dtype -> FLOAT .)
    SIGNED          reduce using rule 32 (dtype -> FLOAT .)
    UNSIGNED        reduce using rule 32 (dtype -> FLOAT .)
    VOLATILE        reduce using rule 32 (dtype -> FLOAT .)


state 33

    (33) dtype -> INT .

    ID              reduce using rule 33 (dtype -> INT .)
    ASTERISK        reduce using rule 33 (dtype -> INT .)
    RPAREN          reduce using rule 33 (dtype -> INT .)
    COMMA           reduce using rule 33 (dtype -> INT .)
    CHAR            reduce using rule 33 (dtype -> INT .)
    DOUBLE          reduce using rule 33 (dtype -> INT .)
    FLOAT           reduce using rule 33 (dtype -> INT .)
    INT             reduce using rule 33 (dtype -> INT .)
    VOID            reduce using rule 33 (dtype -> INT .)
    INT8_T          reduce using rule 33 (dtype -> INT .)
    INT16_T         reduce using rule 33 (dtype -> INT .)
    INT32_T         reduce using rule 33 (dtype -> INT .)
    INT64_T         reduce using rule 33 (dtype -> INT .)
    UINT8_T         reduce using rule 33 (dtype -> INT .)
    UINT16_T        reduce using rule 33 (dtype -> INT .)
    UINT32_T        reduce using rule 33 (dtype -> INT .)
    UINT64_T        reduce using rule 33 (dtype -> INT .)
    LPAREN          reduce using rule 33 (dtype -> INT .)
    NEGATE          reduce using rule 33 (dtype -> INT .)
    MINUS           reduce using rule 33 (dtype -> INT .)
    SIZEOF          reduce using rule 33 (dtype -> INT .)
    FLOAT_L         reduce using rule 33 (dtype -> INT .)
    INT_L           reduce using rule 33 (dtype -> INT .)
    CHAR_L          reduce using rule 33 (dtype -> INT .)
    STRING_L        reduce using rule 33 (dtype -> INT .)
    NONDECIMAL_L    reduce using rule 33 (dtype -> INT .)
    BITAND          reduce using rule 33 (dtype -> INT .)
    STRUCT          reduce using rule 33 (dtype -> INT .)
    CONST           reduce using rule 33 (dtype -> INT .)
    EXTERN          reduce using rule 33 (dtype -> INT .)
    INLINE          reduce using rule 33 (dtype -> INT .)
    LONG            reduce using rule 33 (dtype -> INT .)
    SHORT           reduce using rule 33 (dtype -> INT .)
    SIGNED          reduce using rule 33 (dtype -> INT .)
    UNSIGNED        reduce using rule 33 (dtype -> INT .)
    VOLATILE        reduce using rule 33 (dtype -> INT .)


state 34

    (34) dtype -> VOID .

    ID              reduce using rule 34 (dtype -> VOID .)
    ASTERISK        reduce using rule 34 (dtype -> VOID .)
    RPAREN          reduce using rule 34 (dtype -> VOID .)
    COMMA           reduce using rule 34 (dtype -> VOID .)
    CHAR            reduce using rule 34 (dtype -> VOID .)
    DOUBLE          reduce using rule 34 (dtype -> VOID .)
    FLOAT           reduce using rule 34 (dtype -> VOID .)
    INT             reduce using rule 34 (dtype -> VOID .)
    VOID            reduce using rule 34 (dtype -> VOID .)
    INT8_T          reduce using rule 34 (dtype -> VOID .)
    INT16_T         reduce using rule 34 (dtype -> VOID .)
    INT32_T         reduce using rule 34 (dtype -> VOID .)
    INT64_T         reduce using rule 34 (dtype -> VOID .)
    UINT8_T         reduce using rule 34 (dtype -> VOID .)
    UINT16_T        reduce using rule 34 (dtype -> VOID .)
    UINT32_T        reduce using rule 34 (dtype -> VOID .)
    UINT64_T        reduce using rule 34 (dtype -> VOID .)
    LPAREN          reduce using rule 34 (dtype -> VOID .)
    NEGATE          reduce using rule 34 (dtype -> VOID .)
    MINUS           reduce using rule 34 (dtype -> VOID .)
    SIZEOF          reduce using rule 34 (dtype -> VOID .)
    FLOAT_L         reduce using rule 34 (dtype -> VOID .)
    INT_L           reduce using rule 34 (dtype -> VOID .)
    CHAR_L          reduce using rule 34 (dtype -> VOID .)
    STRING_L        reduce using rule 34 (dtype -> VOID .)
    NONDECIMAL_L    reduce using rule 34 (dtype -> VOID .)
    BITAND          reduce using rule 34 (dtype -> VOID .)
    STRUCT          reduce using rule 34 (dtype -> VOID .)
    CONST           reduce using rule 34 (dtype -> VOID .)
    EXTERN          reduce using rule 34 (dtype -> VOID .)
    INLINE          reduce using rule 34 (dtype -> VOID .)
    LONG            reduce using rule 34 (dtype -> VOID .)
    SHORT           reduce using rule 34 (dtype -> VOID .)
    SIGNED          reduce using rule 34 (dtype -> VOID .)
    UNSIGNED        reduce using rule 34 (dtype -> VOID .)
    VOLATILE        reduce using rule 34 (dtype -> VOID .)


state 35

    (35) dtype -> INT8_T .

    ID              reduce using rule 35 (dtype -> INT8_T .)
    ASTERISK        reduce using rule 35 (dtype -> INT8_T .)
    RPAREN          reduce using rule 35 (dtype -> INT8_T .)
    COMMA           reduce using rule 35 (dtype -> INT8_T .)
    CHAR            reduce using rule 35 (dtype -> INT8_T .)
    DOUBLE          reduce using rule 35 (dtype -> INT8_T .)
    FLOAT           reduce using rule 35 (dtype -> INT8_T .)
    INT             reduce using rule 35 (dtype -> INT8_T .)
    VOID            reduce using rule 35 (dtype -> INT8_T .)
    INT8_T          reduce using rule 35 (dtype -> INT8_T .)
    INT16_T         reduce using rule 35 (dtype -> INT8_T .)
    INT32_T         reduce using rule 35 (dtype -> INT8_T .)
    INT64_T         reduce using rule 35 (dtype -> INT8_T .)
    UINT8_T         reduce using rule 35 (dtype -> INT8_T .)
    UINT16_T        reduce using rule 35 (dtype -> INT8_T .)
    UINT32_T        reduce using rule 35 (dtype -> INT8_T .)
    UINT64_T        reduce using rule 35 (dtype -> INT8_T .)
    LPAREN          reduce using rule 35 (dtype -> INT8_T .)
    NEGATE          reduce using rule 35 (dtype -> INT8_T .)
    MINUS           reduce using rule 35 (dtype -> INT8_T .)
    SIZEOF          reduce using rule 35 (dtype -> INT8_T .)
    FLOAT_L         reduce using rule 35 (dtype -> INT8_T .)
    INT_L           reduce using rule 35 (dtype -> INT8_T .)
    CHAR_L          reduce using rule 35 (dtype -> INT8_T .)
    STRING_L        reduce using rule 35 (dtype -> INT8_T .)
    NONDECIMAL_L    reduce using rule 35 (dtype -> INT8_T .)
    BITAND          reduce using rule 35 (dtype -> INT8_T .)
    STRUCT          reduce using rule 35 (dtype -> INT8_T .)
    CONST           reduce using rule 35 (dtype -> INT8_T .)
    EXTERN          reduce using rule 35 (dtype -> INT8_T .)
    INLINE          reduce using rule 35 (dtype -> INT8_T .)
    LONG            reduce using rule 35 (dtype -> INT8_T .)
    SHORT           reduce using rule 35 (dtype -> INT8_T .)
    SIGNED          reduce using rule 35 (dtype -> INT8_T .)
    UNSIGNED        reduce using rule 35 (dtype -> INT8_T .)
    VOLATILE        reduce using rule 35 (dtype -> INT8_T .)


state 36

    (36) dtype -> INT16_T .

    ID              reduce using rule 36 (dtype -> INT16_T .)
    ASTERISK        reduce using rule 36 (dtype -> INT16_T .)
    RPAREN          reduce using rule 36 (dtype -> INT16_T .)
    COMMA           reduce using rule 36 (dtype -> INT16_T .)
    CHAR            reduce using rule 36 (dtype -> INT16_T .)
    DOUBLE          reduce using rule 36 (dtype -> INT16_T .)
    FLOAT           reduce using rule 36 (dtype -> INT16_T .)
    INT             reduce using rule 36 (dtype -> INT16_T .)
    VOID            reduce using rule 36 (dtype -> INT16_T .)
    INT8_T          reduce using rule 36 (dtype -> INT16_T .)
    INT16_T         reduce using rule 36 (dtype -> INT16_T .)
    INT32_T         reduce using rule 36 (dtype -> INT16_T .)
    INT64_T         reduce using rule 36 (dtype -> INT16_T .)
    UINT8_T         reduce using rule 36 (dtype -> INT16_T .)
    UINT16_T        reduce using rule 36 (dtype -> INT16_T .)
    UINT32_T        reduce using rule 36 (dtype -> INT16_T .)
    UINT64_T        reduce using rule 36 (dtype -> INT16_T .)
    LPAREN          reduce using rule 36 (dtype -> INT16_T .)
    NEGATE          reduce using rule 36 (dtype -> INT16_T .)
    MINUS           reduce using rule 36 (dtype -> INT16_T .)
    SIZEOF          reduce using rule 36 (dtype -> INT16_T .)
    FLOAT_L         reduce using rule 36 (dtype -> INT16_T .)
    INT_L           reduce using rule 36 (dtype -> INT16_T .)
    CHAR_L          reduce using rule 36 (dtype -> INT16_T .)
    STRING_L        reduce using rule 36 (dtype -> INT16_T .)
    NONDECIMAL_L    reduce using rule 36 (dtype -> INT16_T .)
    BITAND          reduce using rule 36 (dtype -> INT16_T .)
    STRUCT          reduce using rule 36 (dtype -> INT16_T .)
    CONST           reduce using rule 36 (dtype -> INT16_T .)
    EXTERN          reduce using rule 36 (dtype -> INT16_T .)
    INLINE          reduce using rule 36 (dtype -> INT16_T .)
    LONG            reduce using rule 36 (dtype -> INT16_T .)
    SHORT           reduce using rule 36 (dtype -> INT16_T .)
    SIGNED          reduce using rule 36 (dtype -> INT16_T .)
    UNSIGNED        reduce using rule 36 (dtype -> INT16_T .)
    VOLATILE        reduce using rule 36 (dtype -> INT16_T .)


state 37

    (37) dtype -> INT32_T .

    ID              reduce using rule 37 (dtype -> INT32_T .)
    ASTERISK        reduce using rule 37 (dtype -> INT32_T .)
    RPAREN          reduce using rule 37 (dtype -> INT32_T .)
    COMMA           reduce using rule 37 (dtype -> INT32_T .)
    CHAR            reduce using rule 37 (dtype -> INT32_T .)
    DOUBLE          reduce using rule 37 (dtype -> INT32_T .)
    FLOAT           reduce using rule 37 (dtype -> INT32_T .)
    INT             reduce using rule 37 (dtype -> INT32_T .)
    VOID            reduce using rule 37 (dtype -> INT32_T .)
    INT8_T          reduce using rule 37 (dtype -> INT32_T .)
    INT16_T         reduce using rule 37 (dtype -> INT32_T .)
    INT32_T         reduce using rule 37 (dtype -> INT32_T .)
    INT64_T         reduce using rule 37 (dtype -> INT32_T .)
    UINT8_T         reduce using rule 37 (dtype -> INT32_T .)
    UINT16_T        reduce using rule 37 (dtype -> INT32_T .)
    UINT32_T        reduce using rule 37 (dtype -> INT32_T .)
    UINT64_T        reduce using rule 37 (dtype -> INT32_T .)
    LPAREN          reduce using rule 37 (dtype -> INT32_T .)
    NEGATE          reduce using rule 37 (dtype -> INT32_T .)
    MINUS           reduce using rule 37 (dtype -> INT32_T .)
    SIZEOF          reduce using rule 37 (dtype -> INT32_T .)
    FLOAT_L         reduce using rule 37 (dtype -> INT32_T .)
    INT_L           reduce using rule 37 (dtype -> INT32_T .)
    CHAR_L          reduce using rule 37 (dtype -> INT32_T .)
    STRING_L        reduce using rule 37 (dtype -> INT32_T .)
    NONDECIMAL_L    reduce using rule 37 (dtype -> INT32_T .)
    BITAND          reduce using rule 37 (dtype -> INT32_T .)
    STRUCT          reduce using rule 37 (dtype -> INT32_T .)
    CONST           reduce using rule 37 (dtype -> INT32_T .)
    EXTERN          reduce using rule 37 (dtype -> INT32_T .)
    INLINE          reduce using rule 37 (dtype -> INT32_T .)
    LONG            reduce using rule 37 (dtype -> INT32_T .)
    SHORT           reduce using rule 37 (dtype -> INT32_T .)
    SIGNED          reduce using rule 37 (dtype -> INT32_T .)
    UNSIGNED        reduce using rule 37 (dtype -> INT32_T .)
    VOLATILE        reduce using rule 37 (dtype -> INT32_T .)


state 38

    (38) dtype -> INT64_T .

    ID              reduce using rule 38 (dtype -> INT64_T .)
    ASTERISK        reduce using rule 38 (dtype -> INT64_T .)
    RPAREN          reduce using rule 38 (dtype -> INT64_T .)
    COMMA           reduce using rule 38 (dtype -> INT64_T .)
    CHAR            reduce using rule 38 (dtype -> INT64_T .)
    DOUBLE          reduce using rule 38 (dtype -> INT64_T .)
    FLOAT           reduce using rule 38 (dtype -> INT64_T .)
    INT             reduce using rule 38 (dtype -> INT64_T .)
    VOID            reduce using rule 38 (dtype -> INT64_T .)
    INT8_T          reduce using rule 38 (dtype -> INT64_T .)
    INT16_T         reduce using rule 38 (dtype -> INT64_T .)
    INT32_T         reduce using rule 38 (dtype -> INT64_T .)
    INT64_T         reduce using rule 38 (dtype -> INT64_T .)
    UINT8_T         reduce using rule 38 (dtype -> INT64_T .)
    UINT16_T        reduce using rule 38 (dtype -> INT64_T .)
    UINT32_T        reduce using rule 38 (dtype -> INT64_T .)
    UINT64_T        reduce using rule 38 (dtype -> INT64_T .)
    LPAREN          reduce using rule 38 (dtype -> INT64_T .)
    NEGATE          reduce using rule 38 (dtype -> INT64_T .)
    MINUS           reduce using rule 38 (dtype -> INT64_T .)
    SIZEOF          reduce using rule 38 (dtype -> INT64_T .)
    FLOAT_L         reduce using rule 38 (dtype -> INT64_T .)
    INT_L           reduce using rule 38 (dtype -> INT64_T .)
    CHAR_L          reduce using rule 38 (dtype -> INT64_T .)
    STRING_L        reduce using rule 38 (dtype -> INT64_T .)
    NONDECIMAL_L    reduce using rule 38 (dtype -> INT64_T .)
    BITAND          reduce using rule 38 (dtype -> INT64_T .)
    STRUCT          reduce using rule 38 (dtype -> INT64_T .)
    CONST           reduce using rule 38 (dtype -> INT64_T .)
    EXTERN          reduce using rule 38 (dtype -> INT64_T .)
    INLINE          reduce using rule 38 (dtype -> INT64_T .)
    LONG            reduce using rule 38 (dtype -> INT64_T .)
    SHORT           reduce using rule 38 (dtype -> INT64_T .)
    SIGNED          reduce using rule 38 (dtype -> INT64_T .)
    UNSIGNED        reduce using rule 38 (dtype -> INT64_T .)
    VOLATILE        reduce using rule 38 (dtype -> INT64_T .)


state 39

    (39) dtype -> UINT8_T .

    ID              reduce using rule 39 (dtype -> UINT8_T .)
    ASTERISK        reduce using rule 39 (dtype -> UINT8_T .)
    RPAREN          reduce using rule 39 (dtype -> UINT8_T .)
    COMMA           reduce using rule 39 (dtype -> UINT8_T .)
    CHAR            reduce using rule 39 (dtype -> UINT8_T .)
    DOUBLE          reduce using rule 39 (dtype -> UINT8_T .)
    FLOAT           reduce using rule 39 (dtype -> UINT8_T .)
    INT             reduce using rule 39 (dtype -> UINT8_T .)
    VOID            reduce using rule 39 (dtype -> UINT8_T .)
    INT8_T          reduce using rule 39 (dtype -> UINT8_T .)
    INT16_T         reduce using rule 39 (dtype -> UINT8_T .)
    INT32_T         reduce using rule 39 (dtype -> UINT8_T .)
    INT64_T         reduce using rule 39 (dtype -> UINT8_T .)
    UINT8_T         reduce using rule 39 (dtype -> UINT8_T .)
    UINT16_T        reduce using rule 39 (dtype -> UINT8_T .)
    UINT32_T        reduce using rule 39 (dtype -> UINT8_T .)
    UINT64_T        reduce using rule 39 (dtype -> UINT8_T .)
    LPAREN          reduce using rule 39 (dtype -> UINT8_T .)
    NEGATE          reduce using rule 39 (dtype -> UINT8_T .)
    MINUS           reduce using rule 39 (dtype -> UINT8_T .)
    SIZEOF          reduce using rule 39 (dtype -> UINT8_T .)
    FLOAT_L         reduce using rule 39 (dtype -> UINT8_T .)
    INT_L           reduce using rule 39 (dtype -> UINT8_T .)
    CHAR_L          reduce using rule 39 (dtype -> UINT8_T .)
    STRING_L        reduce using rule 39 (dtype -> UINT8_T .)
    NONDECIMAL_L    reduce using rule 39 (dtype -> UINT8_T .)
    BITAND          reduce using rule 39 (dtype -> UINT8_T .)
    STRUCT          reduce using rule 39 (dtype -> UINT8_T .)
    CONST           reduce using rule 39 (dtype -> UINT8_T .)
    EXTERN          reduce using rule 39 (dtype -> UINT8_T .)
    INLINE          reduce using rule 39 (dtype -> UINT8_T .)
    LONG            reduce using rule 39 (dtype -> UINT8_T .)
    SHORT           reduce using rule 39 (dtype -> UINT8_T .)
    SIGNED          reduce using rule 39 (dtype -> UINT8_T .)
    UNSIGNED        reduce using rule 39 (dtype -> UINT8_T .)
    VOLATILE        reduce using rule 39 (dtype -> UINT8_T .)


state 40

    (40) dtype -> UINT16_T .

    ID              reduce using rule 40 (dtype -> UINT16_T .)
    ASTERISK        reduce using rule 40 (dtype -> UINT16_T .)
    RPAREN          reduce using rule 40 (dtype -> UINT16_T .)
    COMMA           reduce using rule 40 (dtype -> UINT16_T .)
    CHAR            reduce using rule 40 (dtype -> UINT16_T .)
    DOUBLE          reduce using rule 40 (dtype -> UINT16_T .)
    FLOAT           reduce using rule 40 (dtype -> UINT16_T .)
    INT             reduce using rule 40 (dtype -> UINT16_T .)
    VOID            reduce using rule 40 (dtype -> UINT16_T .)
    INT8_T          reduce using rule 40 (dtype -> UINT16_T .)
    INT16_T         reduce using rule 40 (dtype -> UINT16_T .)
    INT32_T         reduce using rule 40 (dtype -> UINT16_T .)
    INT64_T         reduce using rule 40 (dtype -> UINT16_T .)
    UINT8_T         reduce using rule 40 (dtype -> UINT16_T .)
    UINT16_T        reduce using rule 40 (dtype -> UINT16_T .)
    UINT32_T        reduce using rule 40 (dtype -> UINT16_T .)
    UINT64_T        reduce using rule 40 (dtype -> UINT16_T .)
    LPAREN          reduce using rule 40 (dtype -> UINT16_T .)
    NEGATE          reduce using rule 40 (dtype -> UINT16_T .)
    MINUS           reduce using rule 40 (dtype -> UINT16_T .)
    SIZEOF          reduce using rule 40 (dtype -> UINT16_T .)
    FLOAT_L         reduce using rule 40 (dtype -> UINT16_T .)
    INT_L           reduce using rule 40 (dtype -> UINT16_T .)
    CHAR_L          reduce using rule 40 (dtype -> UINT16_T .)
    STRING_L        reduce using rule 40 (dtype -> UINT16_T .)
    NONDECIMAL_L    reduce using rule 40 (dtype -> UINT16_T .)
    BITAND          reduce using rule 40 (dtype -> UINT16_T .)
    STRUCT          reduce using rule 40 (dtype -> UINT16_T .)
    CONST           reduce using rule 40 (dtype -> UINT16_T .)
    EXTERN          reduce using rule 40 (dtype -> UINT16_T .)
    INLINE          reduce using rule 40 (dtype -> UINT16_T .)
    LONG            reduce using rule 40 (dtype -> UINT16_T .)
    SHORT           reduce using rule 40 (dtype -> UINT16_T .)
    SIGNED          reduce using rule 40 (dtype -> UINT16_T .)
    UNSIGNED        reduce using rule 40 (dtype -> UINT16_T .)
    VOLATILE        reduce using rule 40 (dtype -> UINT16_T .)


state 41

    (41) dtype -> UINT32_T .

    ID              reduce using rule 41 (dtype -> UINT32_T .)
    ASTERISK        reduce using rule 41 (dtype -> UINT32_T .)
    RPAREN          reduce using rule 41 (dtype -> UINT32_T .)
    COMMA           reduce using rule 41 (dtype -> UINT32_T .)
    CHAR            reduce using rule 41 (dtype -> UINT32_T .)
    DOUBLE          reduce using rule 41 (dtype -> UINT32_T .)
    FLOAT           reduce using rule 41 (dtype -> UINT32_T .)
    INT             reduce using rule 41 (dtype -> UINT32_T .)
    VOID            reduce using rule 41 (dtype -> UINT32_T .)
    INT8_T          reduce using rule 41 (dtype -> UINT32_T .)
    INT16_T         reduce using rule 41 (dtype -> UINT32_T .)
    INT32_T         reduce using rule 41 (dtype -> UINT32_T .)
    INT64_T         reduce using rule 41 (dtype -> UINT32_T .)
    UINT8_T         reduce using rule 41 (dtype -> UINT32_T .)
    UINT16_T        reduce using rule 41 (dtype -> UINT32_T .)
    UINT32_T        reduce using rule 41 (dtype -> UINT32_T .)
    UINT64_T        reduce using rule 41 (dtype -> UINT32_T .)
    LPAREN          reduce using rule 41 (dtype -> UINT32_T .)
    NEGATE          reduce using rule 41 (dtype -> UINT32_T .)
    MINUS           reduce using rule 41 (dtype -> UINT32_T .)
    SIZEOF          reduce using rule 41 (dtype -> UINT32_T .)
    FLOAT_L         reduce using rule 41 (dtype -> UINT32_T .)
    INT_L           reduce using rule 41 (dtype -> UINT32_T .)
    CHAR_L          reduce using rule 41 (dtype -> UINT32_T .)
    STRING_L        reduce using rule 41 (dtype -> UINT32_T .)
    NONDECIMAL_L    reduce using rule 41 (dtype -> UINT32_T .)
    BITAND          reduce using rule 41 (dtype -> UINT32_T .)
    STRUCT          reduce using rule 41 (dtype -> UINT32_T .)
    CONST           reduce using rule 41 (dtype -> UINT32_T .)
    EXTERN          reduce using rule 41 (dtype -> UINT32_T .)
    INLINE          reduce using rule 41 (dtype -> UINT32_T .)
    LONG            reduce using rule 41 (dtype -> UINT32_T .)
    SHORT           reduce using rule 41 (dtype -> UINT32_T .)
    SIGNED          reduce using rule 41 (dtype -> UINT32_T .)
    UNSIGNED        reduce using rule 41 (dtype -> UINT32_T .)
    VOLATILE        reduce using rule 41 (dtype -> UINT32_T .)


state 42

    (42) dtype -> UINT64_T .

    ID              reduce using rule 42 (dtype -> UINT64_T .)
    ASTERISK        reduce using rule 42 (dtype -> UINT64_T .)
    RPAREN          reduce using rule 42 (dtype -> UINT64_T .)
    COMMA           reduce using rule 42 (dtype -> UINT64_T .)
    CHAR            reduce using rule 42 (dtype -> UINT64_T .)
    DOUBLE          reduce using rule 42 (dtype -> UINT64_T .)
    FLOAT           reduce using rule 42 (dtype -> UINT64_T .)
    INT             reduce using rule 42 (dtype -> UINT64_T .)
    VOID            reduce using rule 42 (dtype -> UINT64_T .)
    INT8_T          reduce using rule 42 (dtype -> UINT64_T .)
    INT16_T         reduce using rule 42 (dtype -> UINT64_T .)
    INT32_T         reduce using rule 42 (dtype -> UINT64_T .)
    INT64_T         reduce using rule 42 (dtype -> UINT64_T .)
    UINT8_T         reduce using rule 42 (dtype -> UINT64_T .)
    UINT16_T        reduce using rule 42 (dtype -> UINT64_T .)
    UINT32_T        reduce using rule 42 (dtype -> UINT64_T .)
    UINT64_T        reduce using rule 42 (dtype -> UINT64_T .)
    LPAREN          reduce using rule 42 (dtype -> UINT64_T .)
    NEGATE          reduce using rule 42 (dtype -> UINT64_T .)
    MINUS           reduce using rule 42 (dtype -> UINT64_T .)
    SIZEOF          reduce using rule 42 (dtype -> UINT64_T .)
    FLOAT_L         reduce using rule 42 (dtype -> UINT64_T .)
    INT_L           reduce using rule 42 (dtype -> UINT64_T .)
    CHAR_L          reduce using rule 42 (dtype -> UINT64_T .)
    STRING_L        reduce using rule 42 (dtype -> UINT64_T .)
    NONDECIMAL_L    reduce using rule 42 (dtype -> UINT64_T .)
    BITAND          reduce using rule 42 (dtype -> UINT64_T .)
    STRUCT          reduce using rule 42 (dtype -> UINT64_T .)
    CONST           reduce using rule 42 (dtype -> UINT64_T .)
    EXTERN          reduce using rule 42 (dtype -> UINT64_T .)
    INLINE          reduce using rule 42 (dtype -> UINT64_T .)
    LONG            reduce using rule 42 (dtype -> UINT64_T .)
    SHORT           reduce using rule 42 (dtype -> UINT64_T .)
    SIGNED          reduce using rule 42 (dtype -> UINT64_T .)
    UNSIGNED        reduce using rule 42 (dtype -> UINT64_T .)
    VOLATILE        reduce using rule 42 (dtype -> UINT64_T .)


state 43

    (43) dtype -> struct_type .

    ID              reduce using rule 43 (dtype -> struct_type .)
    ASTERISK        reduce using rule 43 (dtype -> struct_type .)
    RPAREN          reduce using rule 43 (dtype -> struct_type .)
    COMMA           reduce using rule 43 (dtype -> struct_type .)
    CHAR            reduce using rule 43 (dtype -> struct_type .)
    DOUBLE          reduce using rule 43 (dtype -> struct_type .)
    FLOAT           reduce using rule 43 (dtype -> struct_type .)
    INT             reduce using rule 43 (dtype -> struct_type .)
    VOID            reduce using rule 43 (dtype -> struct_type .)
    INT8_T          reduce using rule 43 (dtype -> struct_type .)
    INT16_T         reduce using rule 43 (dtype -> struct_type .)
    INT32_T         reduce using rule 43 (dtype -> struct_type .)
    INT64_T         reduce using rule 43 (dtype -> struct_type .)
    UINT8_T         reduce using rule 43 (dtype -> struct_type .)
    UINT16_T        reduce using rule 43 (dtype -> struct_type .)
    UINT32_T        reduce using rule 43 (dtype -> struct_type .)
    UINT64_T        reduce using rule 43 (dtype -> struct_type .)
    LPAREN          reduce using rule 43 (dtype -> struct_type .)
    NEGATE          reduce using rule 43 (dtype -> struct_type .)
    MINUS           reduce using rule 43 (dtype -> struct_type .)
    SIZEOF          reduce using rule 43 (dtype -> struct_type .)
    FLOAT_L         reduce using rule 43 (dtype -> struct_type .)
    INT_L           reduce using rule 43 (dtype -> struct_type .)
    CHAR_L          reduce using rule 43 (dtype -> struct_type .)
    STRING_L        reduce using rule 43 (dtype -> struct_type .)
    NONDECIMAL_L    reduce using rule 43 (dtype -> struct_type .)
    BITAND          reduce using rule 43 (dtype -> struct_type .)
    STRUCT          reduce using rule 43 (dtype -> struct_type .)
    CONST           reduce using rule 43 (dtype -> struct_type .)
    EXTERN          reduce using rule 43 (dtype -> struct_type .)
    INLINE          reduce using rule 43 (dtype -> struct_type .)
    LONG            reduce using rule 43 (dtype -> struct_type .)
    SHORT           reduce using rule 43 (dtype -> struct_type .)
    SIGNED          reduce using rule 43 (dtype -> struct_type .)
    UNSIGNED        reduce using rule 43 (dtype -> struct_type .)
    VOLATILE        reduce using rule 43 (dtype -> struct_type .)


state 44

    (99) func_call -> SIZEOF . LPAREN func_arglist RPAREN

    LPAREN          shift and go to state 100


state 45

    (163) init_var -> init_var_ls . init_var_rs
    (156) init_var_rs -> . name SEMI
    (157) init_var_rs -> . func_call SEMI
    (158) init_var_rs -> . expression SEMI
    (159) init_var_rs -> . typecast_init
    (160) init_var_rs -> . vector_init_rs
    (161) init_var_rs -> . LPAREN name RPAREN
    (162) init_var_rs -> . error SEMI
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (98) func_call -> . ID LPAREN func_arglist RPAREN
    (99) func_call -> . SIZEOF LPAREN func_arglist RPAREN
    (113) expression -> . LPAREN expression RPAREN
    (114) expression -> . LPAREN name RPAREN
    (115) expression -> . NEGATE expression
    (116) expression -> . MINUS expression
    (117) expression -> . NEGATE name
    (118) expression -> . MINUS name
    (133) expression -> . operand binop operand
    (134) expression -> . name INCREMENT
    (155) typecast_init -> . type_cast init_var_rs
    (154) vector_init_rs -> . vector_body SEMI
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name
    (129) operand -> . name
    (130) operand -> . expression
    (131) operand -> . type_cast name
    (132) operand -> . func_call
    (19) type_cast -> . LPAREN dtype RPAREN
    (153) vector_body -> . LBRACE vec_item_list RBRACE

    LPAREN          shift and go to state 107
    error           shift and go to state 108
    ID              shift and go to state 71
    SIZEOF          shift and go to state 44
    NEGATE          shift and go to state 49
    MINUS           shift and go to state 50
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64
    LBRACE          shift and go to state 111

    init_var_rs                    shift and go to state 101
    name                           shift and go to state 102
    func_call                      shift and go to state 103
    expression                     shift and go to state 104
    typecast_init                  shift and go to state 105
    vector_init_rs                 shift and go to state 106
    literal                        shift and go to state 57
    access                         shift and go to state 58
    operand                        shift and go to state 51
    type_cast                      shift and go to state 109
    vector_body                    shift and go to state 110

state 46

    (166) assign_var -> assign_var_ls . assign_var_rs
    (165) assign_var_rs -> . init_var_rs
    (156) init_var_rs -> . name SEMI
    (157) init_var_rs -> . func_call SEMI
    (158) init_var_rs -> . expression SEMI
    (159) init_var_rs -> . typecast_init
    (160) init_var_rs -> . vector_init_rs
    (161) init_var_rs -> . LPAREN name RPAREN
    (162) init_var_rs -> . error SEMI
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (98) func_call -> . ID LPAREN func_arglist RPAREN
    (99) func_call -> . SIZEOF LPAREN func_arglist RPAREN
    (113) expression -> . LPAREN expression RPAREN
    (114) expression -> . LPAREN name RPAREN
    (115) expression -> . NEGATE expression
    (116) expression -> . MINUS expression
    (117) expression -> . NEGATE name
    (118) expression -> . MINUS name
    (133) expression -> . operand binop operand
    (134) expression -> . name INCREMENT
    (155) typecast_init -> . type_cast init_var_rs
    (154) vector_init_rs -> . vector_body SEMI
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name
    (129) operand -> . name
    (130) operand -> . expression
    (131) operand -> . type_cast name
    (132) operand -> . func_call
    (19) type_cast -> . LPAREN dtype RPAREN
    (153) vector_body -> . LBRACE vec_item_list RBRACE

    LPAREN          shift and go to state 107
    error           shift and go to state 108
    ID              shift and go to state 71
    SIZEOF          shift and go to state 44
    NEGATE          shift and go to state 49
    MINUS           shift and go to state 50
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64
    LBRACE          shift and go to state 111

    assign_var_rs                  shift and go to state 112
    init_var_rs                    shift and go to state 113
    name                           shift and go to state 102
    func_call                      shift and go to state 103
    expression                     shift and go to state 104
    typecast_init                  shift and go to state 105
    vector_init_rs                 shift and go to state 106
    literal                        shift and go to state 57
    access                         shift and go to state 58
    operand                        shift and go to state 51
    type_cast                      shift and go to state 109
    vector_body                    shift and go to state 110

state 47

    (140) declare_var -> declare_var_ls . SEMI
    (145) init_var_ls -> declare_var_ls . assign
    (146) init_var_ls -> declare_var_ls . vector_init_list assign
    (16) assign -> . SIMPLE_ASSIGN
    (17) assign -> . COMPLEX_ASSIGN
    (143) vector_init_list -> .
    (144) vector_init_list -> . vector_init_list vector_init

  ! shift/reduce conflict for SIMPLE_ASSIGN resolved as shift
  ! shift/reduce conflict for COMPLEX_ASSIGN resolved as shift
    SEMI            shift and go to state 114
    SIMPLE_ASSIGN   shift and go to state 117
    COMPLEX_ASSIGN  shift and go to state 118
    LBRACK          reduce using rule 143 (vector_init_list -> .)

  ! SIMPLE_ASSIGN   [ reduce using rule 143 (vector_init_list -> .) ]
  ! COMPLEX_ASSIGN  [ reduce using rule 143 (vector_init_list -> .) ]

    assign                         shift and go to state 115
    vector_init_list               shift and go to state 116

state 48

    (134) expression -> name . INCREMENT
    (164) assign_var_ls -> name . assign
    (129) operand -> name .
    (100) access -> name . LBRACK name RBRACK
    (101) access -> name . LBRACK expression RBRACK
    (102) access -> name . MEMBER name
    (16) assign -> . SIMPLE_ASSIGN
    (17) assign -> . COMPLEX_ASSIGN

    INCREMENT       shift and go to state 119
    PLUS            reduce using rule 129 (operand -> name .)
    MINUS           reduce using rule 129 (operand -> name .)
    ASTERISK        reduce using rule 129 (operand -> name .)
    DIVIDE          reduce using rule 129 (operand -> name .)
    LSHIFT          reduce using rule 129 (operand -> name .)
    RSHIFT          reduce using rule 129 (operand -> name .)
    PERCENT         reduce using rule 129 (operand -> name .)
    BITAND          reduce using rule 129 (operand -> name .)
    BITOR           reduce using rule 129 (operand -> name .)
    EQ              reduce using rule 129 (operand -> name .)
    NEQ             reduce using rule 129 (operand -> name .)
    LT              reduce using rule 129 (operand -> name .)
    GT              reduce using rule 129 (operand -> name .)
    LE              reduce using rule 129 (operand -> name .)
    GE              reduce using rule 129 (operand -> name .)
    AND             reduce using rule 129 (operand -> name .)
    OR              reduce using rule 129 (operand -> name .)
    LBRACK          shift and go to state 121
    MEMBER          shift and go to state 122
    SIMPLE_ASSIGN   shift and go to state 117
    COMPLEX_ASSIGN  shift and go to state 118

    assign                         shift and go to state 120

state 49

    (115) expression -> NEGATE . expression
    (117) expression -> NEGATE . name
    (113) expression -> . LPAREN expression RPAREN
    (114) expression -> . LPAREN name RPAREN
    (115) expression -> . NEGATE expression
    (116) expression -> . MINUS expression
    (117) expression -> . NEGATE name
    (118) expression -> . MINUS name
    (133) expression -> . operand binop operand
    (134) expression -> . name INCREMENT
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (129) operand -> . name
    (130) operand -> . expression
    (131) operand -> . type_cast name
    (132) operand -> . func_call
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name
    (19) type_cast -> . LPAREN dtype RPAREN
    (98) func_call -> . ID LPAREN func_arglist RPAREN
    (99) func_call -> . SIZEOF LPAREN func_arglist RPAREN

    LPAREN          shift and go to state 17
    NEGATE          shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 71
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64
    SIZEOF          shift and go to state 44

    expression                     shift and go to state 123
    name                           shift and go to state 124
    operand                        shift and go to state 51
    literal                        shift and go to state 57
    access                         shift and go to state 58
    type_cast                      shift and go to state 56
    func_call                      shift and go to state 72

state 50

    (116) expression -> MINUS . expression
    (118) expression -> MINUS . name
    (113) expression -> . LPAREN expression RPAREN
    (114) expression -> . LPAREN name RPAREN
    (115) expression -> . NEGATE expression
    (116) expression -> . MINUS expression
    (117) expression -> . NEGATE name
    (118) expression -> . MINUS name
    (133) expression -> . operand binop operand
    (134) expression -> . name INCREMENT
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (129) operand -> . name
    (130) operand -> . expression
    (131) operand -> . type_cast name
    (132) operand -> . func_call
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name
    (19) type_cast -> . LPAREN dtype RPAREN
    (98) func_call -> . ID LPAREN func_arglist RPAREN
    (99) func_call -> . SIZEOF LPAREN func_arglist RPAREN

    LPAREN          shift and go to state 17
    NEGATE          shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 71
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64
    SIZEOF          shift and go to state 44

    expression                     shift and go to state 125
    name                           shift and go to state 126
    operand                        shift and go to state 51
    literal                        shift and go to state 57
    access                         shift and go to state 58
    type_cast                      shift and go to state 56
    func_call                      shift and go to state 72

state 51

    (133) expression -> operand . binop operand
    (119) binop -> . PLUS
    (120) binop -> . MINUS
    (121) binop -> . ASTERISK
    (122) binop -> . DIVIDE
    (123) binop -> . LSHIFT
    (124) binop -> . RSHIFT
    (125) binop -> . PERCENT
    (126) binop -> . BITAND
    (127) binop -> . BITOR
    (128) binop -> . conditional
    (57) conditional -> . EQ
    (58) conditional -> . NEQ
    (59) conditional -> . LT
    (60) conditional -> . GT
    (61) conditional -> . LE
    (62) conditional -> . GE
    (63) conditional -> . AND
    (64) conditional -> . OR

    PLUS            shift and go to state 128
    MINUS           shift and go to state 129
    ASTERISK        shift and go to state 130
    DIVIDE          shift and go to state 131
    LSHIFT          shift and go to state 132
    RSHIFT          shift and go to state 133
    PERCENT         shift and go to state 134
    BITAND          shift and go to state 135
    BITOR           shift and go to state 136
    EQ              shift and go to state 138
    NEQ             shift and go to state 139
    LT              shift and go to state 140
    GT              shift and go to state 141
    LE              shift and go to state 142
    GE              shift and go to state 143
    AND             shift and go to state 144
    OR              shift and go to state 145

    binop                          shift and go to state 127
    conditional                    shift and go to state 137

state 52

    (135) return -> RETURN . name
    (136) return -> RETURN . expression
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (113) expression -> . LPAREN expression RPAREN
    (114) expression -> . LPAREN name RPAREN
    (115) expression -> . NEGATE expression
    (116) expression -> . MINUS expression
    (117) expression -> . NEGATE name
    (118) expression -> . MINUS name
    (133) expression -> . operand binop operand
    (134) expression -> . name INCREMENT
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name
    (129) operand -> . name
    (130) operand -> . expression
    (131) operand -> . type_cast name
    (132) operand -> . func_call
    (19) type_cast -> . LPAREN dtype RPAREN
    (98) func_call -> . ID LPAREN func_arglist RPAREN
    (99) func_call -> . SIZEOF LPAREN func_arglist RPAREN

    ID              shift and go to state 71
    LPAREN          shift and go to state 17
    NEGATE          shift and go to state 49
    MINUS           shift and go to state 50
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64
    SIZEOF          shift and go to state 44

    name                           shift and go to state 146
    expression                     shift and go to state 147
    literal                        shift and go to state 57
    access                         shift and go to state 58
    operand                        shift and go to state 51
    type_cast                      shift and go to state 56
    func_call                      shift and go to state 72

state 53

    (54) control -> WHILE .

    LPAREN          reduce using rule 54 (control -> WHILE .)
    LBRACE          reduce using rule 54 (control -> WHILE .)
    error           reduce using rule 54 (control -> WHILE .)


state 54

    (55) control -> IF .

    LPAREN          reduce using rule 55 (control -> IF .)
    LBRACE          reduce using rule 55 (control -> IF .)
    error           reduce using rule 55 (control -> IF .)


state 55

    (71) for_loop -> FOR . LPAREN init_var conditional_expr SEMI ID INCREMENT RPAREN

    LPAREN          shift and go to state 148


state 56

    (131) operand -> type_cast . name
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name

    ID              shift and go to state 150
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64

    name                           shift and go to state 149
    literal                        shift and go to state 57
    access                         shift and go to state 58

state 57

    (46) name -> literal .

    INCREMENT       reduce using rule 46 (name -> literal .)
    LBRACK          reduce using rule 46 (name -> literal .)
    MEMBER          reduce using rule 46 (name -> literal .)
    SIMPLE_ASSIGN   reduce using rule 46 (name -> literal .)
    COMPLEX_ASSIGN  reduce using rule 46 (name -> literal .)
    PLUS            reduce using rule 46 (name -> literal .)
    MINUS           reduce using rule 46 (name -> literal .)
    ASTERISK        reduce using rule 46 (name -> literal .)
    DIVIDE          reduce using rule 46 (name -> literal .)
    LSHIFT          reduce using rule 46 (name -> literal .)
    RSHIFT          reduce using rule 46 (name -> literal .)
    PERCENT         reduce using rule 46 (name -> literal .)
    BITAND          reduce using rule 46 (name -> literal .)
    BITOR           reduce using rule 46 (name -> literal .)
    EQ              reduce using rule 46 (name -> literal .)
    NEQ             reduce using rule 46 (name -> literal .)
    LT              reduce using rule 46 (name -> literal .)
    GT              reduce using rule 46 (name -> literal .)
    LE              reduce using rule 46 (name -> literal .)
    GE              reduce using rule 46 (name -> literal .)
    AND             reduce using rule 46 (name -> literal .)
    OR              reduce using rule 46 (name -> literal .)
    RPAREN          reduce using rule 46 (name -> literal .)
    ID              reduce using rule 46 (name -> literal .)
    SEMI            reduce using rule 46 (name -> literal .)
    RBRACK          reduce using rule 46 (name -> literal .)
    COMMA           reduce using rule 46 (name -> literal .)
    CHAR            reduce using rule 46 (name -> literal .)
    DOUBLE          reduce using rule 46 (name -> literal .)
    FLOAT           reduce using rule 46 (name -> literal .)
    INT             reduce using rule 46 (name -> literal .)
    VOID            reduce using rule 46 (name -> literal .)
    INT8_T          reduce using rule 46 (name -> literal .)
    INT16_T         reduce using rule 46 (name -> literal .)
    INT32_T         reduce using rule 46 (name -> literal .)
    INT64_T         reduce using rule 46 (name -> literal .)
    UINT8_T         reduce using rule 46 (name -> literal .)
    UINT16_T        reduce using rule 46 (name -> literal .)
    UINT32_T        reduce using rule 46 (name -> literal .)
    UINT64_T        reduce using rule 46 (name -> literal .)
    LPAREN          reduce using rule 46 (name -> literal .)
    NEGATE          reduce using rule 46 (name -> literal .)
    SIZEOF          reduce using rule 46 (name -> literal .)
    FLOAT_L         reduce using rule 46 (name -> literal .)
    INT_L           reduce using rule 46 (name -> literal .)
    CHAR_L          reduce using rule 46 (name -> literal .)
    STRING_L        reduce using rule 46 (name -> literal .)
    NONDECIMAL_L    reduce using rule 46 (name -> literal .)
    STRUCT          reduce using rule 46 (name -> literal .)
    CONST           reduce using rule 46 (name -> literal .)
    EXTERN          reduce using rule 46 (name -> literal .)
    INLINE          reduce using rule 46 (name -> literal .)
    LONG            reduce using rule 46 (name -> literal .)
    SHORT           reduce using rule 46 (name -> literal .)
    SIGNED          reduce using rule 46 (name -> literal .)
    UNSIGNED        reduce using rule 46 (name -> literal .)
    VOLATILE        reduce using rule 46 (name -> literal .)
    RBRACE          reduce using rule 46 (name -> literal .)
    LBRACE          reduce using rule 46 (name -> literal .)


state 58

    (47) name -> access .

    INCREMENT       reduce using rule 47 (name -> access .)
    LBRACK          reduce using rule 47 (name -> access .)
    MEMBER          reduce using rule 47 (name -> access .)
    SIMPLE_ASSIGN   reduce using rule 47 (name -> access .)
    COMPLEX_ASSIGN  reduce using rule 47 (name -> access .)
    PLUS            reduce using rule 47 (name -> access .)
    MINUS           reduce using rule 47 (name -> access .)
    ASTERISK        reduce using rule 47 (name -> access .)
    DIVIDE          reduce using rule 47 (name -> access .)
    LSHIFT          reduce using rule 47 (name -> access .)
    RSHIFT          reduce using rule 47 (name -> access .)
    PERCENT         reduce using rule 47 (name -> access .)
    BITAND          reduce using rule 47 (name -> access .)
    BITOR           reduce using rule 47 (name -> access .)
    EQ              reduce using rule 47 (name -> access .)
    NEQ             reduce using rule 47 (name -> access .)
    LT              reduce using rule 47 (name -> access .)
    GT              reduce using rule 47 (name -> access .)
    LE              reduce using rule 47 (name -> access .)
    GE              reduce using rule 47 (name -> access .)
    AND             reduce using rule 47 (name -> access .)
    OR              reduce using rule 47 (name -> access .)
    RPAREN          reduce using rule 47 (name -> access .)
    ID              reduce using rule 47 (name -> access .)
    SEMI            reduce using rule 47 (name -> access .)
    RBRACK          reduce using rule 47 (name -> access .)
    COMMA           reduce using rule 47 (name -> access .)
    CHAR            reduce using rule 47 (name -> access .)
    DOUBLE          reduce using rule 47 (name -> access .)
    FLOAT           reduce using rule 47 (name -> access .)
    INT             reduce using rule 47 (name -> access .)
    VOID            reduce using rule 47 (name -> access .)
    INT8_T          reduce using rule 47 (name -> access .)
    INT16_T         reduce using rule 47 (name -> access .)
    INT32_T         reduce using rule 47 (name -> access .)
    INT64_T         reduce using rule 47 (name -> access .)
    UINT8_T         reduce using rule 47 (name -> access .)
    UINT16_T        reduce using rule 47 (name -> access .)
    UINT32_T        reduce using rule 47 (name -> access .)
    UINT64_T        reduce using rule 47 (name -> access .)
    LPAREN          reduce using rule 47 (name -> access .)
    NEGATE          reduce using rule 47 (name -> access .)
    SIZEOF          reduce using rule 47 (name -> access .)
    FLOAT_L         reduce using rule 47 (name -> access .)
    INT_L           reduce using rule 47 (name -> access .)
    CHAR_L          reduce using rule 47 (name -> access .)
    STRING_L        reduce using rule 47 (name -> access .)
    NONDECIMAL_L    reduce using rule 47 (name -> access .)
    STRUCT          reduce using rule 47 (name -> access .)
    CONST           reduce using rule 47 (name -> access .)
    EXTERN          reduce using rule 47 (name -> access .)
    INLINE          reduce using rule 47 (name -> access .)
    LONG            reduce using rule 47 (name -> access .)
    SHORT           reduce using rule 47 (name -> access .)
    SIGNED          reduce using rule 47 (name -> access .)
    UNSIGNED        reduce using rule 47 (name -> access .)
    VOLATILE        reduce using rule 47 (name -> access .)
    RBRACE          reduce using rule 47 (name -> access .)
    LBRACE          reduce using rule 47 (name -> access .)


state 59

    (11) literal -> FLOAT_L .

    INCREMENT       reduce using rule 11 (literal -> FLOAT_L .)
    LBRACK          reduce using rule 11 (literal -> FLOAT_L .)
    MEMBER          reduce using rule 11 (literal -> FLOAT_L .)
    SIMPLE_ASSIGN   reduce using rule 11 (literal -> FLOAT_L .)
    COMPLEX_ASSIGN  reduce using rule 11 (literal -> FLOAT_L .)
    PLUS            reduce using rule 11 (literal -> FLOAT_L .)
    MINUS           reduce using rule 11 (literal -> FLOAT_L .)
    ASTERISK        reduce using rule 11 (literal -> FLOAT_L .)
    DIVIDE          reduce using rule 11 (literal -> FLOAT_L .)
    LSHIFT          reduce using rule 11 (literal -> FLOAT_L .)
    RSHIFT          reduce using rule 11 (literal -> FLOAT_L .)
    PERCENT         reduce using rule 11 (literal -> FLOAT_L .)
    BITAND          reduce using rule 11 (literal -> FLOAT_L .)
    BITOR           reduce using rule 11 (literal -> FLOAT_L .)
    EQ              reduce using rule 11 (literal -> FLOAT_L .)
    NEQ             reduce using rule 11 (literal -> FLOAT_L .)
    LT              reduce using rule 11 (literal -> FLOAT_L .)
    GT              reduce using rule 11 (literal -> FLOAT_L .)
    LE              reduce using rule 11 (literal -> FLOAT_L .)
    GE              reduce using rule 11 (literal -> FLOAT_L .)
    AND             reduce using rule 11 (literal -> FLOAT_L .)
    OR              reduce using rule 11 (literal -> FLOAT_L .)
    RPAREN          reduce using rule 11 (literal -> FLOAT_L .)
    ID              reduce using rule 11 (literal -> FLOAT_L .)
    SEMI            reduce using rule 11 (literal -> FLOAT_L .)
    RBRACK          reduce using rule 11 (literal -> FLOAT_L .)
    COMMA           reduce using rule 11 (literal -> FLOAT_L .)
    CHAR            reduce using rule 11 (literal -> FLOAT_L .)
    DOUBLE          reduce using rule 11 (literal -> FLOAT_L .)
    FLOAT           reduce using rule 11 (literal -> FLOAT_L .)
    INT             reduce using rule 11 (literal -> FLOAT_L .)
    VOID            reduce using rule 11 (literal -> FLOAT_L .)
    INT8_T          reduce using rule 11 (literal -> FLOAT_L .)
    INT16_T         reduce using rule 11 (literal -> FLOAT_L .)
    INT32_T         reduce using rule 11 (literal -> FLOAT_L .)
    INT64_T         reduce using rule 11 (literal -> FLOAT_L .)
    UINT8_T         reduce using rule 11 (literal -> FLOAT_L .)
    UINT16_T        reduce using rule 11 (literal -> FLOAT_L .)
    UINT32_T        reduce using rule 11 (literal -> FLOAT_L .)
    UINT64_T        reduce using rule 11 (literal -> FLOAT_L .)
    LPAREN          reduce using rule 11 (literal -> FLOAT_L .)
    NEGATE          reduce using rule 11 (literal -> FLOAT_L .)
    SIZEOF          reduce using rule 11 (literal -> FLOAT_L .)
    FLOAT_L         reduce using rule 11 (literal -> FLOAT_L .)
    INT_L           reduce using rule 11 (literal -> FLOAT_L .)
    CHAR_L          reduce using rule 11 (literal -> FLOAT_L .)
    STRING_L        reduce using rule 11 (literal -> FLOAT_L .)
    NONDECIMAL_L    reduce using rule 11 (literal -> FLOAT_L .)
    STRUCT          reduce using rule 11 (literal -> FLOAT_L .)
    CONST           reduce using rule 11 (literal -> FLOAT_L .)
    EXTERN          reduce using rule 11 (literal -> FLOAT_L .)
    INLINE          reduce using rule 11 (literal -> FLOAT_L .)
    LONG            reduce using rule 11 (literal -> FLOAT_L .)
    SHORT           reduce using rule 11 (literal -> FLOAT_L .)
    SIGNED          reduce using rule 11 (literal -> FLOAT_L .)
    UNSIGNED        reduce using rule 11 (literal -> FLOAT_L .)
    VOLATILE        reduce using rule 11 (literal -> FLOAT_L .)
    RBRACE          reduce using rule 11 (literal -> FLOAT_L .)
    LBRACE          reduce using rule 11 (literal -> FLOAT_L .)


state 60

    (12) literal -> INT_L .

    INCREMENT       reduce using rule 12 (literal -> INT_L .)
    LBRACK          reduce using rule 12 (literal -> INT_L .)
    MEMBER          reduce using rule 12 (literal -> INT_L .)
    SIMPLE_ASSIGN   reduce using rule 12 (literal -> INT_L .)
    COMPLEX_ASSIGN  reduce using rule 12 (literal -> INT_L .)
    PLUS            reduce using rule 12 (literal -> INT_L .)
    MINUS           reduce using rule 12 (literal -> INT_L .)
    ASTERISK        reduce using rule 12 (literal -> INT_L .)
    DIVIDE          reduce using rule 12 (literal -> INT_L .)
    LSHIFT          reduce using rule 12 (literal -> INT_L .)
    RSHIFT          reduce using rule 12 (literal -> INT_L .)
    PERCENT         reduce using rule 12 (literal -> INT_L .)
    BITAND          reduce using rule 12 (literal -> INT_L .)
    BITOR           reduce using rule 12 (literal -> INT_L .)
    EQ              reduce using rule 12 (literal -> INT_L .)
    NEQ             reduce using rule 12 (literal -> INT_L .)
    LT              reduce using rule 12 (literal -> INT_L .)
    GT              reduce using rule 12 (literal -> INT_L .)
    LE              reduce using rule 12 (literal -> INT_L .)
    GE              reduce using rule 12 (literal -> INT_L .)
    AND             reduce using rule 12 (literal -> INT_L .)
    OR              reduce using rule 12 (literal -> INT_L .)
    RPAREN          reduce using rule 12 (literal -> INT_L .)
    ID              reduce using rule 12 (literal -> INT_L .)
    SEMI            reduce using rule 12 (literal -> INT_L .)
    RBRACK          reduce using rule 12 (literal -> INT_L .)
    COMMA           reduce using rule 12 (literal -> INT_L .)
    CHAR            reduce using rule 12 (literal -> INT_L .)
    DOUBLE          reduce using rule 12 (literal -> INT_L .)
    FLOAT           reduce using rule 12 (literal -> INT_L .)
    INT             reduce using rule 12 (literal -> INT_L .)
    VOID            reduce using rule 12 (literal -> INT_L .)
    INT8_T          reduce using rule 12 (literal -> INT_L .)
    INT16_T         reduce using rule 12 (literal -> INT_L .)
    INT32_T         reduce using rule 12 (literal -> INT_L .)
    INT64_T         reduce using rule 12 (literal -> INT_L .)
    UINT8_T         reduce using rule 12 (literal -> INT_L .)
    UINT16_T        reduce using rule 12 (literal -> INT_L .)
    UINT32_T        reduce using rule 12 (literal -> INT_L .)
    UINT64_T        reduce using rule 12 (literal -> INT_L .)
    LPAREN          reduce using rule 12 (literal -> INT_L .)
    NEGATE          reduce using rule 12 (literal -> INT_L .)
    SIZEOF          reduce using rule 12 (literal -> INT_L .)
    FLOAT_L         reduce using rule 12 (literal -> INT_L .)
    INT_L           reduce using rule 12 (literal -> INT_L .)
    CHAR_L          reduce using rule 12 (literal -> INT_L .)
    STRING_L        reduce using rule 12 (literal -> INT_L .)
    NONDECIMAL_L    reduce using rule 12 (literal -> INT_L .)
    STRUCT          reduce using rule 12 (literal -> INT_L .)
    CONST           reduce using rule 12 (literal -> INT_L .)
    EXTERN          reduce using rule 12 (literal -> INT_L .)
    INLINE          reduce using rule 12 (literal -> INT_L .)
    LONG            reduce using rule 12 (literal -> INT_L .)
    SHORT           reduce using rule 12 (literal -> INT_L .)
    SIGNED          reduce using rule 12 (literal -> INT_L .)
    UNSIGNED        reduce using rule 12 (literal -> INT_L .)
    VOLATILE        reduce using rule 12 (literal -> INT_L .)
    RBRACE          reduce using rule 12 (literal -> INT_L .)
    LBRACE          reduce using rule 12 (literal -> INT_L .)


state 61

    (13) literal -> CHAR_L .

    INCREMENT       reduce using rule 13 (literal -> CHAR_L .)
    LBRACK          reduce using rule 13 (literal -> CHAR_L .)
    MEMBER          reduce using rule 13 (literal -> CHAR_L .)
    SIMPLE_ASSIGN   reduce using rule 13 (literal -> CHAR_L .)
    COMPLEX_ASSIGN  reduce using rule 13 (literal -> CHAR_L .)
    PLUS            reduce using rule 13 (literal -> CHAR_L .)
    MINUS           reduce using rule 13 (literal -> CHAR_L .)
    ASTERISK        reduce using rule 13 (literal -> CHAR_L .)
    DIVIDE          reduce using rule 13 (literal -> CHAR_L .)
    LSHIFT          reduce using rule 13 (literal -> CHAR_L .)
    RSHIFT          reduce using rule 13 (literal -> CHAR_L .)
    PERCENT         reduce using rule 13 (literal -> CHAR_L .)
    BITAND          reduce using rule 13 (literal -> CHAR_L .)
    BITOR           reduce using rule 13 (literal -> CHAR_L .)
    EQ              reduce using rule 13 (literal -> CHAR_L .)
    NEQ             reduce using rule 13 (literal -> CHAR_L .)
    LT              reduce using rule 13 (literal -> CHAR_L .)
    GT              reduce using rule 13 (literal -> CHAR_L .)
    LE              reduce using rule 13 (literal -> CHAR_L .)
    GE              reduce using rule 13 (literal -> CHAR_L .)
    AND             reduce using rule 13 (literal -> CHAR_L .)
    OR              reduce using rule 13 (literal -> CHAR_L .)
    RPAREN          reduce using rule 13 (literal -> CHAR_L .)
    ID              reduce using rule 13 (literal -> CHAR_L .)
    SEMI            reduce using rule 13 (literal -> CHAR_L .)
    RBRACK          reduce using rule 13 (literal -> CHAR_L .)
    COMMA           reduce using rule 13 (literal -> CHAR_L .)
    CHAR            reduce using rule 13 (literal -> CHAR_L .)
    DOUBLE          reduce using rule 13 (literal -> CHAR_L .)
    FLOAT           reduce using rule 13 (literal -> CHAR_L .)
    INT             reduce using rule 13 (literal -> CHAR_L .)
    VOID            reduce using rule 13 (literal -> CHAR_L .)
    INT8_T          reduce using rule 13 (literal -> CHAR_L .)
    INT16_T         reduce using rule 13 (literal -> CHAR_L .)
    INT32_T         reduce using rule 13 (literal -> CHAR_L .)
    INT64_T         reduce using rule 13 (literal -> CHAR_L .)
    UINT8_T         reduce using rule 13 (literal -> CHAR_L .)
    UINT16_T        reduce using rule 13 (literal -> CHAR_L .)
    UINT32_T        reduce using rule 13 (literal -> CHAR_L .)
    UINT64_T        reduce using rule 13 (literal -> CHAR_L .)
    LPAREN          reduce using rule 13 (literal -> CHAR_L .)
    NEGATE          reduce using rule 13 (literal -> CHAR_L .)
    SIZEOF          reduce using rule 13 (literal -> CHAR_L .)
    FLOAT_L         reduce using rule 13 (literal -> CHAR_L .)
    INT_L           reduce using rule 13 (literal -> CHAR_L .)
    CHAR_L          reduce using rule 13 (literal -> CHAR_L .)
    STRING_L        reduce using rule 13 (literal -> CHAR_L .)
    NONDECIMAL_L    reduce using rule 13 (literal -> CHAR_L .)
    STRUCT          reduce using rule 13 (literal -> CHAR_L .)
    CONST           reduce using rule 13 (literal -> CHAR_L .)
    EXTERN          reduce using rule 13 (literal -> CHAR_L .)
    INLINE          reduce using rule 13 (literal -> CHAR_L .)
    LONG            reduce using rule 13 (literal -> CHAR_L .)
    SHORT           reduce using rule 13 (literal -> CHAR_L .)
    SIGNED          reduce using rule 13 (literal -> CHAR_L .)
    UNSIGNED        reduce using rule 13 (literal -> CHAR_L .)
    VOLATILE        reduce using rule 13 (literal -> CHAR_L .)
    RBRACE          reduce using rule 13 (literal -> CHAR_L .)
    LBRACE          reduce using rule 13 (literal -> CHAR_L .)


state 62

    (14) literal -> STRING_L .

    INCREMENT       reduce using rule 14 (literal -> STRING_L .)
    LBRACK          reduce using rule 14 (literal -> STRING_L .)
    MEMBER          reduce using rule 14 (literal -> STRING_L .)
    SIMPLE_ASSIGN   reduce using rule 14 (literal -> STRING_L .)
    COMPLEX_ASSIGN  reduce using rule 14 (literal -> STRING_L .)
    PLUS            reduce using rule 14 (literal -> STRING_L .)
    MINUS           reduce using rule 14 (literal -> STRING_L .)
    ASTERISK        reduce using rule 14 (literal -> STRING_L .)
    DIVIDE          reduce using rule 14 (literal -> STRING_L .)
    LSHIFT          reduce using rule 14 (literal -> STRING_L .)
    RSHIFT          reduce using rule 14 (literal -> STRING_L .)
    PERCENT         reduce using rule 14 (literal -> STRING_L .)
    BITAND          reduce using rule 14 (literal -> STRING_L .)
    BITOR           reduce using rule 14 (literal -> STRING_L .)
    EQ              reduce using rule 14 (literal -> STRING_L .)
    NEQ             reduce using rule 14 (literal -> STRING_L .)
    LT              reduce using rule 14 (literal -> STRING_L .)
    GT              reduce using rule 14 (literal -> STRING_L .)
    LE              reduce using rule 14 (literal -> STRING_L .)
    GE              reduce using rule 14 (literal -> STRING_L .)
    AND             reduce using rule 14 (literal -> STRING_L .)
    OR              reduce using rule 14 (literal -> STRING_L .)
    RPAREN          reduce using rule 14 (literal -> STRING_L .)
    ID              reduce using rule 14 (literal -> STRING_L .)
    SEMI            reduce using rule 14 (literal -> STRING_L .)
    RBRACK          reduce using rule 14 (literal -> STRING_L .)
    COMMA           reduce using rule 14 (literal -> STRING_L .)
    CHAR            reduce using rule 14 (literal -> STRING_L .)
    DOUBLE          reduce using rule 14 (literal -> STRING_L .)
    FLOAT           reduce using rule 14 (literal -> STRING_L .)
    INT             reduce using rule 14 (literal -> STRING_L .)
    VOID            reduce using rule 14 (literal -> STRING_L .)
    INT8_T          reduce using rule 14 (literal -> STRING_L .)
    INT16_T         reduce using rule 14 (literal -> STRING_L .)
    INT32_T         reduce using rule 14 (literal -> STRING_L .)
    INT64_T         reduce using rule 14 (literal -> STRING_L .)
    UINT8_T         reduce using rule 14 (literal -> STRING_L .)
    UINT16_T        reduce using rule 14 (literal -> STRING_L .)
    UINT32_T        reduce using rule 14 (literal -> STRING_L .)
    UINT64_T        reduce using rule 14 (literal -> STRING_L .)
    LPAREN          reduce using rule 14 (literal -> STRING_L .)
    NEGATE          reduce using rule 14 (literal -> STRING_L .)
    SIZEOF          reduce using rule 14 (literal -> STRING_L .)
    FLOAT_L         reduce using rule 14 (literal -> STRING_L .)
    INT_L           reduce using rule 14 (literal -> STRING_L .)
    CHAR_L          reduce using rule 14 (literal -> STRING_L .)
    STRING_L        reduce using rule 14 (literal -> STRING_L .)
    NONDECIMAL_L    reduce using rule 14 (literal -> STRING_L .)
    STRUCT          reduce using rule 14 (literal -> STRING_L .)
    CONST           reduce using rule 14 (literal -> STRING_L .)
    EXTERN          reduce using rule 14 (literal -> STRING_L .)
    INLINE          reduce using rule 14 (literal -> STRING_L .)
    LONG            reduce using rule 14 (literal -> STRING_L .)
    SHORT           reduce using rule 14 (literal -> STRING_L .)
    SIGNED          reduce using rule 14 (literal -> STRING_L .)
    UNSIGNED        reduce using rule 14 (literal -> STRING_L .)
    VOLATILE        reduce using rule 14 (literal -> STRING_L .)
    RBRACE          reduce using rule 14 (literal -> STRING_L .)
    LBRACE          reduce using rule 14 (literal -> STRING_L .)


state 63

    (15) literal -> NONDECIMAL_L .

    INCREMENT       reduce using rule 15 (literal -> NONDECIMAL_L .)
    LBRACK          reduce using rule 15 (literal -> NONDECIMAL_L .)
    MEMBER          reduce using rule 15 (literal -> NONDECIMAL_L .)
    SIMPLE_ASSIGN   reduce using rule 15 (literal -> NONDECIMAL_L .)
    COMPLEX_ASSIGN  reduce using rule 15 (literal -> NONDECIMAL_L .)
    PLUS            reduce using rule 15 (literal -> NONDECIMAL_L .)
    MINUS           reduce using rule 15 (literal -> NONDECIMAL_L .)
    ASTERISK        reduce using rule 15 (literal -> NONDECIMAL_L .)
    DIVIDE          reduce using rule 15 (literal -> NONDECIMAL_L .)
    LSHIFT          reduce using rule 15 (literal -> NONDECIMAL_L .)
    RSHIFT          reduce using rule 15 (literal -> NONDECIMAL_L .)
    PERCENT         reduce using rule 15 (literal -> NONDECIMAL_L .)
    BITAND          reduce using rule 15 (literal -> NONDECIMAL_L .)
    BITOR           reduce using rule 15 (literal -> NONDECIMAL_L .)
    EQ              reduce using rule 15 (literal -> NONDECIMAL_L .)
    NEQ             reduce using rule 15 (literal -> NONDECIMAL_L .)
    LT              reduce using rule 15 (literal -> NONDECIMAL_L .)
    GT              reduce using rule 15 (literal -> NONDECIMAL_L .)
    LE              reduce using rule 15 (literal -> NONDECIMAL_L .)
    GE              reduce using rule 15 (literal -> NONDECIMAL_L .)
    AND             reduce using rule 15 (literal -> NONDECIMAL_L .)
    OR              reduce using rule 15 (literal -> NONDECIMAL_L .)
    RPAREN          reduce using rule 15 (literal -> NONDECIMAL_L .)
    ID              reduce using rule 15 (literal -> NONDECIMAL_L .)
    SEMI            reduce using rule 15 (literal -> NONDECIMAL_L .)
    RBRACK          reduce using rule 15 (literal -> NONDECIMAL_L .)
    COMMA           reduce using rule 15 (literal -> NONDECIMAL_L .)
    CHAR            reduce using rule 15 (literal -> NONDECIMAL_L .)
    DOUBLE          reduce using rule 15 (literal -> NONDECIMAL_L .)
    FLOAT           reduce using rule 15 (literal -> NONDECIMAL_L .)
    INT             reduce using rule 15 (literal -> NONDECIMAL_L .)
    VOID            reduce using rule 15 (literal -> NONDECIMAL_L .)
    INT8_T          reduce using rule 15 (literal -> NONDECIMAL_L .)
    INT16_T         reduce using rule 15 (literal -> NONDECIMAL_L .)
    INT32_T         reduce using rule 15 (literal -> NONDECIMAL_L .)
    INT64_T         reduce using rule 15 (literal -> NONDECIMAL_L .)
    UINT8_T         reduce using rule 15 (literal -> NONDECIMAL_L .)
    UINT16_T        reduce using rule 15 (literal -> NONDECIMAL_L .)
    UINT32_T        reduce using rule 15 (literal -> NONDECIMAL_L .)
    UINT64_T        reduce using rule 15 (literal -> NONDECIMAL_L .)
    LPAREN          reduce using rule 15 (literal -> NONDECIMAL_L .)
    NEGATE          reduce using rule 15 (literal -> NONDECIMAL_L .)
    SIZEOF          reduce using rule 15 (literal -> NONDECIMAL_L .)
    FLOAT_L         reduce using rule 15 (literal -> NONDECIMAL_L .)
    INT_L           reduce using rule 15 (literal -> NONDECIMAL_L .)
    CHAR_L          reduce using rule 15 (literal -> NONDECIMAL_L .)
    STRING_L        reduce using rule 15 (literal -> NONDECIMAL_L .)
    NONDECIMAL_L    reduce using rule 15 (literal -> NONDECIMAL_L .)
    STRUCT          reduce using rule 15 (literal -> NONDECIMAL_L .)
    CONST           reduce using rule 15 (literal -> NONDECIMAL_L .)
    EXTERN          reduce using rule 15 (literal -> NONDECIMAL_L .)
    INLINE          reduce using rule 15 (literal -> NONDECIMAL_L .)
    LONG            reduce using rule 15 (literal -> NONDECIMAL_L .)
    SHORT           reduce using rule 15 (literal -> NONDECIMAL_L .)
    SIGNED          reduce using rule 15 (literal -> NONDECIMAL_L .)
    UNSIGNED        reduce using rule 15 (literal -> NONDECIMAL_L .)
    VOLATILE        reduce using rule 15 (literal -> NONDECIMAL_L .)
    RBRACE          reduce using rule 15 (literal -> NONDECIMAL_L .)
    LBRACE          reduce using rule 15 (literal -> NONDECIMAL_L .)


state 64

    (103) access -> BITAND . name
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name

    ID              shift and go to state 150
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64

    name                           shift and go to state 151
    literal                        shift and go to state 57
    access                         shift and go to state 58

state 65

    (83) func_def -> dtype ID . LPAREN func_def_arglist RPAREN scope
    (87) func_decl -> dtype ID . LPAREN func_def_arglist RPAREN SEMI
    (137) declare_var_ls -> dtype ID .

    LPAREN          shift and go to state 152
    SEMI            reduce using rule 137 (declare_var_ls -> dtype ID .)
    SIMPLE_ASSIGN   reduce using rule 137 (declare_var_ls -> dtype ID .)
    COMPLEX_ASSIGN  reduce using rule 137 (declare_var_ls -> dtype ID .)
    LBRACK          reduce using rule 137 (declare_var_ls -> dtype ID .)


state 66

    (44) dtype -> dtype ASTERISK .

    ID              reduce using rule 44 (dtype -> dtype ASTERISK .)
    ASTERISK        reduce using rule 44 (dtype -> dtype ASTERISK .)
    RPAREN          reduce using rule 44 (dtype -> dtype ASTERISK .)
    COMMA           reduce using rule 44 (dtype -> dtype ASTERISK .)
    CHAR            reduce using rule 44 (dtype -> dtype ASTERISK .)
    DOUBLE          reduce using rule 44 (dtype -> dtype ASTERISK .)
    FLOAT           reduce using rule 44 (dtype -> dtype ASTERISK .)
    INT             reduce using rule 44 (dtype -> dtype ASTERISK .)
    VOID            reduce using rule 44 (dtype -> dtype ASTERISK .)
    INT8_T          reduce using rule 44 (dtype -> dtype ASTERISK .)
    INT16_T         reduce using rule 44 (dtype -> dtype ASTERISK .)
    INT32_T         reduce using rule 44 (dtype -> dtype ASTERISK .)
    INT64_T         reduce using rule 44 (dtype -> dtype ASTERISK .)
    UINT8_T         reduce using rule 44 (dtype -> dtype ASTERISK .)
    UINT16_T        reduce using rule 44 (dtype -> dtype ASTERISK .)
    UINT32_T        reduce using rule 44 (dtype -> dtype ASTERISK .)
    UINT64_T        reduce using rule 44 (dtype -> dtype ASTERISK .)
    LPAREN          reduce using rule 44 (dtype -> dtype ASTERISK .)
    NEGATE          reduce using rule 44 (dtype -> dtype ASTERISK .)
    MINUS           reduce using rule 44 (dtype -> dtype ASTERISK .)
    SIZEOF          reduce using rule 44 (dtype -> dtype ASTERISK .)
    FLOAT_L         reduce using rule 44 (dtype -> dtype ASTERISK .)
    INT_L           reduce using rule 44 (dtype -> dtype ASTERISK .)
    CHAR_L          reduce using rule 44 (dtype -> dtype ASTERISK .)
    STRING_L        reduce using rule 44 (dtype -> dtype ASTERISK .)
    NONDECIMAL_L    reduce using rule 44 (dtype -> dtype ASTERISK .)
    BITAND          reduce using rule 44 (dtype -> dtype ASTERISK .)
    STRUCT          reduce using rule 44 (dtype -> dtype ASTERISK .)
    CONST           reduce using rule 44 (dtype -> dtype ASTERISK .)
    EXTERN          reduce using rule 44 (dtype -> dtype ASTERISK .)
    INLINE          reduce using rule 44 (dtype -> dtype ASTERISK .)
    LONG            reduce using rule 44 (dtype -> dtype ASTERISK .)
    SHORT           reduce using rule 44 (dtype -> dtype ASTERISK .)
    SIGNED          reduce using rule 44 (dtype -> dtype ASTERISK .)
    UNSIGNED        reduce using rule 44 (dtype -> dtype ASTERISK .)
    VOLATILE        reduce using rule 44 (dtype -> dtype ASTERISK .)


state 67

    (98) func_call -> ID LPAREN . func_arglist RPAREN
    (95) func_arglist -> .
    (96) func_arglist -> . func_arglist func_arg
    (97) func_arglist -> . func_arglist func_arg COMMA

    RPAREN          reduce using rule 95 (func_arglist -> .)
    ID              reduce using rule 95 (func_arglist -> .)
    CHAR            reduce using rule 95 (func_arglist -> .)
    DOUBLE          reduce using rule 95 (func_arglist -> .)
    FLOAT           reduce using rule 95 (func_arglist -> .)
    INT             reduce using rule 95 (func_arglist -> .)
    VOID            reduce using rule 95 (func_arglist -> .)
    INT8_T          reduce using rule 95 (func_arglist -> .)
    INT16_T         reduce using rule 95 (func_arglist -> .)
    INT32_T         reduce using rule 95 (func_arglist -> .)
    INT64_T         reduce using rule 95 (func_arglist -> .)
    UINT8_T         reduce using rule 95 (func_arglist -> .)
    UINT16_T        reduce using rule 95 (func_arglist -> .)
    UINT32_T        reduce using rule 95 (func_arglist -> .)
    UINT64_T        reduce using rule 95 (func_arglist -> .)
    LPAREN          reduce using rule 95 (func_arglist -> .)
    NEGATE          reduce using rule 95 (func_arglist -> .)
    MINUS           reduce using rule 95 (func_arglist -> .)
    SIZEOF          reduce using rule 95 (func_arglist -> .)
    FLOAT_L         reduce using rule 95 (func_arglist -> .)
    INT_L           reduce using rule 95 (func_arglist -> .)
    CHAR_L          reduce using rule 95 (func_arglist -> .)
    STRING_L        reduce using rule 95 (func_arglist -> .)
    NONDECIMAL_L    reduce using rule 95 (func_arglist -> .)
    BITAND          reduce using rule 95 (func_arglist -> .)
    STRUCT          reduce using rule 95 (func_arglist -> .)

    func_arglist                   shift and go to state 153

state 68

    (113) expression -> LPAREN expression . RPAREN
    (130) operand -> expression .

    RPAREN          shift and go to state 154
    PLUS            reduce using rule 130 (operand -> expression .)
    MINUS           reduce using rule 130 (operand -> expression .)
    ASTERISK        reduce using rule 130 (operand -> expression .)
    DIVIDE          reduce using rule 130 (operand -> expression .)
    LSHIFT          reduce using rule 130 (operand -> expression .)
    RSHIFT          reduce using rule 130 (operand -> expression .)
    PERCENT         reduce using rule 130 (operand -> expression .)
    BITAND          reduce using rule 130 (operand -> expression .)
    BITOR           reduce using rule 130 (operand -> expression .)
    EQ              reduce using rule 130 (operand -> expression .)
    NEQ             reduce using rule 130 (operand -> expression .)
    LT              reduce using rule 130 (operand -> expression .)
    GT              reduce using rule 130 (operand -> expression .)
    LE              reduce using rule 130 (operand -> expression .)
    GE              reduce using rule 130 (operand -> expression .)
    AND             reduce using rule 130 (operand -> expression .)
    OR              reduce using rule 130 (operand -> expression .)


state 69

    (114) expression -> LPAREN name . RPAREN
    (134) expression -> name . INCREMENT
    (129) operand -> name .
    (100) access -> name . LBRACK name RBRACK
    (101) access -> name . LBRACK expression RBRACK
    (102) access -> name . MEMBER name

    RPAREN          shift and go to state 155
    INCREMENT       shift and go to state 119
    PLUS            reduce using rule 129 (operand -> name .)
    MINUS           reduce using rule 129 (operand -> name .)
    ASTERISK        reduce using rule 129 (operand -> name .)
    DIVIDE          reduce using rule 129 (operand -> name .)
    LSHIFT          reduce using rule 129 (operand -> name .)
    RSHIFT          reduce using rule 129 (operand -> name .)
    PERCENT         reduce using rule 129 (operand -> name .)
    BITAND          reduce using rule 129 (operand -> name .)
    BITOR           reduce using rule 129 (operand -> name .)
    EQ              reduce using rule 129 (operand -> name .)
    NEQ             reduce using rule 129 (operand -> name .)
    LT              reduce using rule 129 (operand -> name .)
    GT              reduce using rule 129 (operand -> name .)
    LE              reduce using rule 129 (operand -> name .)
    GE              reduce using rule 129 (operand -> name .)
    AND             reduce using rule 129 (operand -> name .)
    OR              reduce using rule 129 (operand -> name .)
    LBRACK          shift and go to state 121
    MEMBER          shift and go to state 122


state 70

    (19) type_cast -> LPAREN dtype . RPAREN
    (44) dtype -> dtype . ASTERISK

    RPAREN          shift and go to state 156
    ASTERISK        shift and go to state 66


state 71

    (45) name -> ID .
    (98) func_call -> ID . LPAREN func_arglist RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    RPAREN          reduce using rule 45 (name -> ID .)
    INCREMENT       reduce using rule 45 (name -> ID .)
    LBRACK          reduce using rule 45 (name -> ID .)
    MEMBER          reduce using rule 45 (name -> ID .)
    PLUS            reduce using rule 45 (name -> ID .)
    MINUS           reduce using rule 45 (name -> ID .)
    ASTERISK        reduce using rule 45 (name -> ID .)
    DIVIDE          reduce using rule 45 (name -> ID .)
    LSHIFT          reduce using rule 45 (name -> ID .)
    RSHIFT          reduce using rule 45 (name -> ID .)
    PERCENT         reduce using rule 45 (name -> ID .)
    BITAND          reduce using rule 45 (name -> ID .)
    BITOR           reduce using rule 45 (name -> ID .)
    EQ              reduce using rule 45 (name -> ID .)
    NEQ             reduce using rule 45 (name -> ID .)
    LT              reduce using rule 45 (name -> ID .)
    GT              reduce using rule 45 (name -> ID .)
    LE              reduce using rule 45 (name -> ID .)
    GE              reduce using rule 45 (name -> ID .)
    AND             reduce using rule 45 (name -> ID .)
    OR              reduce using rule 45 (name -> ID .)
    SEMI            reduce using rule 45 (name -> ID .)
    RBRACK          reduce using rule 45 (name -> ID .)
    COMMA           reduce using rule 45 (name -> ID .)
    ID              reduce using rule 45 (name -> ID .)
    CHAR            reduce using rule 45 (name -> ID .)
    DOUBLE          reduce using rule 45 (name -> ID .)
    FLOAT           reduce using rule 45 (name -> ID .)
    INT             reduce using rule 45 (name -> ID .)
    VOID            reduce using rule 45 (name -> ID .)
    INT8_T          reduce using rule 45 (name -> ID .)
    INT16_T         reduce using rule 45 (name -> ID .)
    INT32_T         reduce using rule 45 (name -> ID .)
    INT64_T         reduce using rule 45 (name -> ID .)
    UINT8_T         reduce using rule 45 (name -> ID .)
    UINT16_T        reduce using rule 45 (name -> ID .)
    UINT32_T        reduce using rule 45 (name -> ID .)
    UINT64_T        reduce using rule 45 (name -> ID .)
    NEGATE          reduce using rule 45 (name -> ID .)
    SIZEOF          reduce using rule 45 (name -> ID .)
    FLOAT_L         reduce using rule 45 (name -> ID .)
    INT_L           reduce using rule 45 (name -> ID .)
    CHAR_L          reduce using rule 45 (name -> ID .)
    STRING_L        reduce using rule 45 (name -> ID .)
    NONDECIMAL_L    reduce using rule 45 (name -> ID .)
    STRUCT          reduce using rule 45 (name -> ID .)
    RBRACE          reduce using rule 45 (name -> ID .)
    LBRACE          reduce using rule 45 (name -> ID .)
    LPAREN          shift and go to state 67

  ! LPAREN          [ reduce using rule 45 (name -> ID .) ]


state 72

    (132) operand -> func_call .

    PLUS            reduce using rule 132 (operand -> func_call .)
    MINUS           reduce using rule 132 (operand -> func_call .)
    ASTERISK        reduce using rule 132 (operand -> func_call .)
    DIVIDE          reduce using rule 132 (operand -> func_call .)
    LSHIFT          reduce using rule 132 (operand -> func_call .)
    RSHIFT          reduce using rule 132 (operand -> func_call .)
    PERCENT         reduce using rule 132 (operand -> func_call .)
    BITAND          reduce using rule 132 (operand -> func_call .)
    BITOR           reduce using rule 132 (operand -> func_call .)
    EQ              reduce using rule 132 (operand -> func_call .)
    NEQ             reduce using rule 132 (operand -> func_call .)
    LT              reduce using rule 132 (operand -> func_call .)
    GT              reduce using rule 132 (operand -> func_call .)
    LE              reduce using rule 132 (operand -> func_call .)
    GE              reduce using rule 132 (operand -> func_call .)
    AND             reduce using rule 132 (operand -> func_call .)
    OR              reduce using rule 132 (operand -> func_call .)
    SEMI            reduce using rule 132 (operand -> func_call .)
    RPAREN          reduce using rule 132 (operand -> func_call .)
    RBRACK          reduce using rule 132 (operand -> func_call .)
    COMMA           reduce using rule 132 (operand -> func_call .)
    ID              reduce using rule 132 (operand -> func_call .)
    CHAR            reduce using rule 132 (operand -> func_call .)
    DOUBLE          reduce using rule 132 (operand -> func_call .)
    FLOAT           reduce using rule 132 (operand -> func_call .)
    INT             reduce using rule 132 (operand -> func_call .)
    VOID            reduce using rule 132 (operand -> func_call .)
    INT8_T          reduce using rule 132 (operand -> func_call .)
    INT16_T         reduce using rule 132 (operand -> func_call .)
    INT32_T         reduce using rule 132 (operand -> func_call .)
    INT64_T         reduce using rule 132 (operand -> func_call .)
    UINT8_T         reduce using rule 132 (operand -> func_call .)
    UINT16_T        reduce using rule 132 (operand -> func_call .)
    UINT32_T        reduce using rule 132 (operand -> func_call .)
    UINT64_T        reduce using rule 132 (operand -> func_call .)
    LPAREN          reduce using rule 132 (operand -> func_call .)
    NEGATE          reduce using rule 132 (operand -> func_call .)
    SIZEOF          reduce using rule 132 (operand -> func_call .)
    FLOAT_L         reduce using rule 132 (operand -> func_call .)
    INT_L           reduce using rule 132 (operand -> func_call .)
    CHAR_L          reduce using rule 132 (operand -> func_call .)
    STRING_L        reduce using rule 132 (operand -> func_call .)
    NONDECIMAL_L    reduce using rule 132 (operand -> func_call .)
    STRUCT          reduce using rule 132 (operand -> func_call .)


state 73

    (18) struct_type -> STRUCT . name
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name

    ID              shift and go to state 150
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64

    name                           shift and go to state 99
    literal                        shift and go to state 57
    access                         shift and go to state 58

state 74

    (84) func_def -> modifier_list dtype . ID LPAREN func_def_arglist RPAREN scope
    (139) declare_var_ls -> modifier_list dtype . ID
    (44) dtype -> dtype . ASTERISK

    ID              shift and go to state 157
    ASTERISK        shift and go to state 66


state 75

    (138) declare_var_ls -> modifier_list ID .

    SEMI            reduce using rule 138 (declare_var_ls -> modifier_list ID .)
    SIMPLE_ASSIGN   reduce using rule 138 (declare_var_ls -> modifier_list ID .)
    COMPLEX_ASSIGN  reduce using rule 138 (declare_var_ls -> modifier_list ID .)
    LBRACK          reduce using rule 138 (declare_var_ls -> modifier_list ID .)


state 76

    (29) modifier_list -> modifier_list modifier .

    ID              reduce using rule 29 (modifier_list -> modifier_list modifier .)
    CHAR            reduce using rule 29 (modifier_list -> modifier_list modifier .)
    DOUBLE          reduce using rule 29 (modifier_list -> modifier_list modifier .)
    FLOAT           reduce using rule 29 (modifier_list -> modifier_list modifier .)
    INT             reduce using rule 29 (modifier_list -> modifier_list modifier .)
    VOID            reduce using rule 29 (modifier_list -> modifier_list modifier .)
    INT8_T          reduce using rule 29 (modifier_list -> modifier_list modifier .)
    INT16_T         reduce using rule 29 (modifier_list -> modifier_list modifier .)
    INT32_T         reduce using rule 29 (modifier_list -> modifier_list modifier .)
    INT64_T         reduce using rule 29 (modifier_list -> modifier_list modifier .)
    UINT8_T         reduce using rule 29 (modifier_list -> modifier_list modifier .)
    UINT16_T        reduce using rule 29 (modifier_list -> modifier_list modifier .)
    UINT32_T        reduce using rule 29 (modifier_list -> modifier_list modifier .)
    UINT64_T        reduce using rule 29 (modifier_list -> modifier_list modifier .)
    CONST           reduce using rule 29 (modifier_list -> modifier_list modifier .)
    EXTERN          reduce using rule 29 (modifier_list -> modifier_list modifier .)
    INLINE          reduce using rule 29 (modifier_list -> modifier_list modifier .)
    LONG            reduce using rule 29 (modifier_list -> modifier_list modifier .)
    SHORT           reduce using rule 29 (modifier_list -> modifier_list modifier .)
    SIGNED          reduce using rule 29 (modifier_list -> modifier_list modifier .)
    UNSIGNED        reduce using rule 29 (modifier_list -> modifier_list modifier .)
    VOLATILE        reduce using rule 29 (modifier_list -> modifier_list modifier .)
    STRUCT          reduce using rule 29 (modifier_list -> modifier_list modifier .)


state 77

    (20) modifier -> CONST .

    ID              reduce using rule 20 (modifier -> CONST .)
    CHAR            reduce using rule 20 (modifier -> CONST .)
    DOUBLE          reduce using rule 20 (modifier -> CONST .)
    FLOAT           reduce using rule 20 (modifier -> CONST .)
    INT             reduce using rule 20 (modifier -> CONST .)
    VOID            reduce using rule 20 (modifier -> CONST .)
    INT8_T          reduce using rule 20 (modifier -> CONST .)
    INT16_T         reduce using rule 20 (modifier -> CONST .)
    INT32_T         reduce using rule 20 (modifier -> CONST .)
    INT64_T         reduce using rule 20 (modifier -> CONST .)
    UINT8_T         reduce using rule 20 (modifier -> CONST .)
    UINT16_T        reduce using rule 20 (modifier -> CONST .)
    UINT32_T        reduce using rule 20 (modifier -> CONST .)
    UINT64_T        reduce using rule 20 (modifier -> CONST .)
    CONST           reduce using rule 20 (modifier -> CONST .)
    EXTERN          reduce using rule 20 (modifier -> CONST .)
    INLINE          reduce using rule 20 (modifier -> CONST .)
    LONG            reduce using rule 20 (modifier -> CONST .)
    SHORT           reduce using rule 20 (modifier -> CONST .)
    SIGNED          reduce using rule 20 (modifier -> CONST .)
    UNSIGNED        reduce using rule 20 (modifier -> CONST .)
    VOLATILE        reduce using rule 20 (modifier -> CONST .)
    STRUCT          reduce using rule 20 (modifier -> CONST .)


state 78

    (21) modifier -> EXTERN .

    ID              reduce using rule 21 (modifier -> EXTERN .)
    CHAR            reduce using rule 21 (modifier -> EXTERN .)
    DOUBLE          reduce using rule 21 (modifier -> EXTERN .)
    FLOAT           reduce using rule 21 (modifier -> EXTERN .)
    INT             reduce using rule 21 (modifier -> EXTERN .)
    VOID            reduce using rule 21 (modifier -> EXTERN .)
    INT8_T          reduce using rule 21 (modifier -> EXTERN .)
    INT16_T         reduce using rule 21 (modifier -> EXTERN .)
    INT32_T         reduce using rule 21 (modifier -> EXTERN .)
    INT64_T         reduce using rule 21 (modifier -> EXTERN .)
    UINT8_T         reduce using rule 21 (modifier -> EXTERN .)
    UINT16_T        reduce using rule 21 (modifier -> EXTERN .)
    UINT32_T        reduce using rule 21 (modifier -> EXTERN .)
    UINT64_T        reduce using rule 21 (modifier -> EXTERN .)
    CONST           reduce using rule 21 (modifier -> EXTERN .)
    EXTERN          reduce using rule 21 (modifier -> EXTERN .)
    INLINE          reduce using rule 21 (modifier -> EXTERN .)
    LONG            reduce using rule 21 (modifier -> EXTERN .)
    SHORT           reduce using rule 21 (modifier -> EXTERN .)
    SIGNED          reduce using rule 21 (modifier -> EXTERN .)
    UNSIGNED        reduce using rule 21 (modifier -> EXTERN .)
    VOLATILE        reduce using rule 21 (modifier -> EXTERN .)
    STRUCT          reduce using rule 21 (modifier -> EXTERN .)


state 79

    (22) modifier -> INLINE .

    ID              reduce using rule 22 (modifier -> INLINE .)
    CHAR            reduce using rule 22 (modifier -> INLINE .)
    DOUBLE          reduce using rule 22 (modifier -> INLINE .)
    FLOAT           reduce using rule 22 (modifier -> INLINE .)
    INT             reduce using rule 22 (modifier -> INLINE .)
    VOID            reduce using rule 22 (modifier -> INLINE .)
    INT8_T          reduce using rule 22 (modifier -> INLINE .)
    INT16_T         reduce using rule 22 (modifier -> INLINE .)
    INT32_T         reduce using rule 22 (modifier -> INLINE .)
    INT64_T         reduce using rule 22 (modifier -> INLINE .)
    UINT8_T         reduce using rule 22 (modifier -> INLINE .)
    UINT16_T        reduce using rule 22 (modifier -> INLINE .)
    UINT32_T        reduce using rule 22 (modifier -> INLINE .)
    UINT64_T        reduce using rule 22 (modifier -> INLINE .)
    CONST           reduce using rule 22 (modifier -> INLINE .)
    EXTERN          reduce using rule 22 (modifier -> INLINE .)
    INLINE          reduce using rule 22 (modifier -> INLINE .)
    LONG            reduce using rule 22 (modifier -> INLINE .)
    SHORT           reduce using rule 22 (modifier -> INLINE .)
    SIGNED          reduce using rule 22 (modifier -> INLINE .)
    UNSIGNED        reduce using rule 22 (modifier -> INLINE .)
    VOLATILE        reduce using rule 22 (modifier -> INLINE .)
    STRUCT          reduce using rule 22 (modifier -> INLINE .)


state 80

    (23) modifier -> LONG .

    ID              reduce using rule 23 (modifier -> LONG .)
    CHAR            reduce using rule 23 (modifier -> LONG .)
    DOUBLE          reduce using rule 23 (modifier -> LONG .)
    FLOAT           reduce using rule 23 (modifier -> LONG .)
    INT             reduce using rule 23 (modifier -> LONG .)
    VOID            reduce using rule 23 (modifier -> LONG .)
    INT8_T          reduce using rule 23 (modifier -> LONG .)
    INT16_T         reduce using rule 23 (modifier -> LONG .)
    INT32_T         reduce using rule 23 (modifier -> LONG .)
    INT64_T         reduce using rule 23 (modifier -> LONG .)
    UINT8_T         reduce using rule 23 (modifier -> LONG .)
    UINT16_T        reduce using rule 23 (modifier -> LONG .)
    UINT32_T        reduce using rule 23 (modifier -> LONG .)
    UINT64_T        reduce using rule 23 (modifier -> LONG .)
    CONST           reduce using rule 23 (modifier -> LONG .)
    EXTERN          reduce using rule 23 (modifier -> LONG .)
    INLINE          reduce using rule 23 (modifier -> LONG .)
    LONG            reduce using rule 23 (modifier -> LONG .)
    SHORT           reduce using rule 23 (modifier -> LONG .)
    SIGNED          reduce using rule 23 (modifier -> LONG .)
    UNSIGNED        reduce using rule 23 (modifier -> LONG .)
    VOLATILE        reduce using rule 23 (modifier -> LONG .)
    STRUCT          reduce using rule 23 (modifier -> LONG .)


state 81

    (24) modifier -> SHORT .

    ID              reduce using rule 24 (modifier -> SHORT .)
    CHAR            reduce using rule 24 (modifier -> SHORT .)
    DOUBLE          reduce using rule 24 (modifier -> SHORT .)
    FLOAT           reduce using rule 24 (modifier -> SHORT .)
    INT             reduce using rule 24 (modifier -> SHORT .)
    VOID            reduce using rule 24 (modifier -> SHORT .)
    INT8_T          reduce using rule 24 (modifier -> SHORT .)
    INT16_T         reduce using rule 24 (modifier -> SHORT .)
    INT32_T         reduce using rule 24 (modifier -> SHORT .)
    INT64_T         reduce using rule 24 (modifier -> SHORT .)
    UINT8_T         reduce using rule 24 (modifier -> SHORT .)
    UINT16_T        reduce using rule 24 (modifier -> SHORT .)
    UINT32_T        reduce using rule 24 (modifier -> SHORT .)
    UINT64_T        reduce using rule 24 (modifier -> SHORT .)
    CONST           reduce using rule 24 (modifier -> SHORT .)
    EXTERN          reduce using rule 24 (modifier -> SHORT .)
    INLINE          reduce using rule 24 (modifier -> SHORT .)
    LONG            reduce using rule 24 (modifier -> SHORT .)
    SHORT           reduce using rule 24 (modifier -> SHORT .)
    SIGNED          reduce using rule 24 (modifier -> SHORT .)
    UNSIGNED        reduce using rule 24 (modifier -> SHORT .)
    VOLATILE        reduce using rule 24 (modifier -> SHORT .)
    STRUCT          reduce using rule 24 (modifier -> SHORT .)


state 82

    (25) modifier -> SIGNED .

    ID              reduce using rule 25 (modifier -> SIGNED .)
    CHAR            reduce using rule 25 (modifier -> SIGNED .)
    DOUBLE          reduce using rule 25 (modifier -> SIGNED .)
    FLOAT           reduce using rule 25 (modifier -> SIGNED .)
    INT             reduce using rule 25 (modifier -> SIGNED .)
    VOID            reduce using rule 25 (modifier -> SIGNED .)
    INT8_T          reduce using rule 25 (modifier -> SIGNED .)
    INT16_T         reduce using rule 25 (modifier -> SIGNED .)
    INT32_T         reduce using rule 25 (modifier -> SIGNED .)
    INT64_T         reduce using rule 25 (modifier -> SIGNED .)
    UINT8_T         reduce using rule 25 (modifier -> SIGNED .)
    UINT16_T        reduce using rule 25 (modifier -> SIGNED .)
    UINT32_T        reduce using rule 25 (modifier -> SIGNED .)
    UINT64_T        reduce using rule 25 (modifier -> SIGNED .)
    CONST           reduce using rule 25 (modifier -> SIGNED .)
    EXTERN          reduce using rule 25 (modifier -> SIGNED .)
    INLINE          reduce using rule 25 (modifier -> SIGNED .)
    LONG            reduce using rule 25 (modifier -> SIGNED .)
    SHORT           reduce using rule 25 (modifier -> SIGNED .)
    SIGNED          reduce using rule 25 (modifier -> SIGNED .)
    UNSIGNED        reduce using rule 25 (modifier -> SIGNED .)
    VOLATILE        reduce using rule 25 (modifier -> SIGNED .)
    STRUCT          reduce using rule 25 (modifier -> SIGNED .)


state 83

    (26) modifier -> UNSIGNED .

    ID              reduce using rule 26 (modifier -> UNSIGNED .)
    CHAR            reduce using rule 26 (modifier -> UNSIGNED .)
    DOUBLE          reduce using rule 26 (modifier -> UNSIGNED .)
    FLOAT           reduce using rule 26 (modifier -> UNSIGNED .)
    INT             reduce using rule 26 (modifier -> UNSIGNED .)
    VOID            reduce using rule 26 (modifier -> UNSIGNED .)
    INT8_T          reduce using rule 26 (modifier -> UNSIGNED .)
    INT16_T         reduce using rule 26 (modifier -> UNSIGNED .)
    INT32_T         reduce using rule 26 (modifier -> UNSIGNED .)
    INT64_T         reduce using rule 26 (modifier -> UNSIGNED .)
    UINT8_T         reduce using rule 26 (modifier -> UNSIGNED .)
    UINT16_T        reduce using rule 26 (modifier -> UNSIGNED .)
    UINT32_T        reduce using rule 26 (modifier -> UNSIGNED .)
    UINT64_T        reduce using rule 26 (modifier -> UNSIGNED .)
    CONST           reduce using rule 26 (modifier -> UNSIGNED .)
    EXTERN          reduce using rule 26 (modifier -> UNSIGNED .)
    INLINE          reduce using rule 26 (modifier -> UNSIGNED .)
    LONG            reduce using rule 26 (modifier -> UNSIGNED .)
    SHORT           reduce using rule 26 (modifier -> UNSIGNED .)
    SIGNED          reduce using rule 26 (modifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 26 (modifier -> UNSIGNED .)
    VOLATILE        reduce using rule 26 (modifier -> UNSIGNED .)
    STRUCT          reduce using rule 26 (modifier -> UNSIGNED .)


state 84

    (27) modifier -> VOLATILE .

    ID              reduce using rule 27 (modifier -> VOLATILE .)
    CHAR            reduce using rule 27 (modifier -> VOLATILE .)
    DOUBLE          reduce using rule 27 (modifier -> VOLATILE .)
    FLOAT           reduce using rule 27 (modifier -> VOLATILE .)
    INT             reduce using rule 27 (modifier -> VOLATILE .)
    VOID            reduce using rule 27 (modifier -> VOLATILE .)
    INT8_T          reduce using rule 27 (modifier -> VOLATILE .)
    INT16_T         reduce using rule 27 (modifier -> VOLATILE .)
    INT32_T         reduce using rule 27 (modifier -> VOLATILE .)
    INT64_T         reduce using rule 27 (modifier -> VOLATILE .)
    UINT8_T         reduce using rule 27 (modifier -> VOLATILE .)
    UINT16_T        reduce using rule 27 (modifier -> VOLATILE .)
    UINT32_T        reduce using rule 27 (modifier -> VOLATILE .)
    UINT64_T        reduce using rule 27 (modifier -> VOLATILE .)
    CONST           reduce using rule 27 (modifier -> VOLATILE .)
    EXTERN          reduce using rule 27 (modifier -> VOLATILE .)
    INLINE          reduce using rule 27 (modifier -> VOLATILE .)
    LONG            reduce using rule 27 (modifier -> VOLATILE .)
    SHORT           reduce using rule 27 (modifier -> VOLATILE .)
    SIGNED          reduce using rule 27 (modifier -> VOLATILE .)
    UNSIGNED        reduce using rule 27 (modifier -> VOLATILE .)
    VOLATILE        reduce using rule 27 (modifier -> VOLATILE .)
    STRUCT          reduce using rule 27 (modifier -> VOLATILE .)


state 85

    (85) func_def -> func_call scope .

    INCLUDE         reduce using rule 85 (func_def -> func_call scope .)
    DEFINE          reduce using rule 85 (func_def -> func_call scope .)
    IFNDEF          reduce using rule 85 (func_def -> func_call scope .)
    ENDIF           reduce using rule 85 (func_def -> func_call scope .)
    error           reduce using rule 85 (func_def -> func_call scope .)
    ELSE            reduce using rule 85 (func_def -> func_call scope .)
    STRUCT          reduce using rule 85 (func_def -> func_call scope .)
    CHAR            reduce using rule 85 (func_def -> func_call scope .)
    DOUBLE          reduce using rule 85 (func_def -> func_call scope .)
    FLOAT           reduce using rule 85 (func_def -> func_call scope .)
    INT             reduce using rule 85 (func_def -> func_call scope .)
    VOID            reduce using rule 85 (func_def -> func_call scope .)
    INT8_T          reduce using rule 85 (func_def -> func_call scope .)
    INT16_T         reduce using rule 85 (func_def -> func_call scope .)
    INT32_T         reduce using rule 85 (func_def -> func_call scope .)
    INT64_T         reduce using rule 85 (func_def -> func_call scope .)
    UINT8_T         reduce using rule 85 (func_def -> func_call scope .)
    UINT16_T        reduce using rule 85 (func_def -> func_call scope .)
    UINT32_T        reduce using rule 85 (func_def -> func_call scope .)
    UINT64_T        reduce using rule 85 (func_def -> func_call scope .)
    ID              reduce using rule 85 (func_def -> func_call scope .)
    SIZEOF          reduce using rule 85 (func_def -> func_call scope .)
    LPAREN          reduce using rule 85 (func_def -> func_call scope .)
    NEGATE          reduce using rule 85 (func_def -> func_call scope .)
    MINUS           reduce using rule 85 (func_def -> func_call scope .)
    RETURN          reduce using rule 85 (func_def -> func_call scope .)
    WHILE           reduce using rule 85 (func_def -> func_call scope .)
    IF              reduce using rule 85 (func_def -> func_call scope .)
    FOR             reduce using rule 85 (func_def -> func_call scope .)
    FLOAT_L         reduce using rule 85 (func_def -> func_call scope .)
    INT_L           reduce using rule 85 (func_def -> func_call scope .)
    CHAR_L          reduce using rule 85 (func_def -> func_call scope .)
    STRING_L        reduce using rule 85 (func_def -> func_call scope .)
    NONDECIMAL_L    reduce using rule 85 (func_def -> func_call scope .)
    BITAND          reduce using rule 85 (func_def -> func_call scope .)
    $end            reduce using rule 85 (func_def -> func_call scope .)
    CONST           reduce using rule 85 (func_def -> func_call scope .)
    EXTERN          reduce using rule 85 (func_def -> func_call scope .)
    INLINE          reduce using rule 85 (func_def -> func_call scope .)
    LONG            reduce using rule 85 (func_def -> func_call scope .)
    SHORT           reduce using rule 85 (func_def -> func_call scope .)
    SIGNED          reduce using rule 85 (func_def -> func_call scope .)
    UNSIGNED        reduce using rule 85 (func_def -> func_call scope .)
    VOLATILE        reduce using rule 85 (func_def -> func_call scope .)
    RBRACE          reduce using rule 85 (func_def -> func_call scope .)


state 86

    (110) statement -> func_call SEMI .

    INCLUDE         reduce using rule 110 (statement -> func_call SEMI .)
    DEFINE          reduce using rule 110 (statement -> func_call SEMI .)
    IFNDEF          reduce using rule 110 (statement -> func_call SEMI .)
    ENDIF           reduce using rule 110 (statement -> func_call SEMI .)
    error           reduce using rule 110 (statement -> func_call SEMI .)
    ELSE            reduce using rule 110 (statement -> func_call SEMI .)
    STRUCT          reduce using rule 110 (statement -> func_call SEMI .)
    CHAR            reduce using rule 110 (statement -> func_call SEMI .)
    DOUBLE          reduce using rule 110 (statement -> func_call SEMI .)
    FLOAT           reduce using rule 110 (statement -> func_call SEMI .)
    INT             reduce using rule 110 (statement -> func_call SEMI .)
    VOID            reduce using rule 110 (statement -> func_call SEMI .)
    INT8_T          reduce using rule 110 (statement -> func_call SEMI .)
    INT16_T         reduce using rule 110 (statement -> func_call SEMI .)
    INT32_T         reduce using rule 110 (statement -> func_call SEMI .)
    INT64_T         reduce using rule 110 (statement -> func_call SEMI .)
    UINT8_T         reduce using rule 110 (statement -> func_call SEMI .)
    UINT16_T        reduce using rule 110 (statement -> func_call SEMI .)
    UINT32_T        reduce using rule 110 (statement -> func_call SEMI .)
    UINT64_T        reduce using rule 110 (statement -> func_call SEMI .)
    ID              reduce using rule 110 (statement -> func_call SEMI .)
    SIZEOF          reduce using rule 110 (statement -> func_call SEMI .)
    LPAREN          reduce using rule 110 (statement -> func_call SEMI .)
    NEGATE          reduce using rule 110 (statement -> func_call SEMI .)
    MINUS           reduce using rule 110 (statement -> func_call SEMI .)
    RETURN          reduce using rule 110 (statement -> func_call SEMI .)
    WHILE           reduce using rule 110 (statement -> func_call SEMI .)
    IF              reduce using rule 110 (statement -> func_call SEMI .)
    FOR             reduce using rule 110 (statement -> func_call SEMI .)
    FLOAT_L         reduce using rule 110 (statement -> func_call SEMI .)
    INT_L           reduce using rule 110 (statement -> func_call SEMI .)
    CHAR_L          reduce using rule 110 (statement -> func_call SEMI .)
    STRING_L        reduce using rule 110 (statement -> func_call SEMI .)
    NONDECIMAL_L    reduce using rule 110 (statement -> func_call SEMI .)
    BITAND          reduce using rule 110 (statement -> func_call SEMI .)
    $end            reduce using rule 110 (statement -> func_call SEMI .)
    CONST           reduce using rule 110 (statement -> func_call SEMI .)
    EXTERN          reduce using rule 110 (statement -> func_call SEMI .)
    INLINE          reduce using rule 110 (statement -> func_call SEMI .)
    LONG            reduce using rule 110 (statement -> func_call SEMI .)
    SHORT           reduce using rule 110 (statement -> func_call SEMI .)
    SIGNED          reduce using rule 110 (statement -> func_call SEMI .)
    UNSIGNED        reduce using rule 110 (statement -> func_call SEMI .)
    VOLATILE        reduce using rule 110 (statement -> func_call SEMI .)
    RBRACE          reduce using rule 110 (statement -> func_call SEMI .)


state 87

    (52) scope -> LBRACE . node_list RBRACE
    (1) node_list -> .
    (2) node_list -> . node_list node

    RBRACE          reduce using rule 1 (node_list -> .)
    INCLUDE         reduce using rule 1 (node_list -> .)
    DEFINE          reduce using rule 1 (node_list -> .)
    IFNDEF          reduce using rule 1 (node_list -> .)
    ENDIF           reduce using rule 1 (node_list -> .)
    error           reduce using rule 1 (node_list -> .)
    ELSE            reduce using rule 1 (node_list -> .)
    STRUCT          reduce using rule 1 (node_list -> .)
    CHAR            reduce using rule 1 (node_list -> .)
    DOUBLE          reduce using rule 1 (node_list -> .)
    FLOAT           reduce using rule 1 (node_list -> .)
    INT             reduce using rule 1 (node_list -> .)
    VOID            reduce using rule 1 (node_list -> .)
    INT8_T          reduce using rule 1 (node_list -> .)
    INT16_T         reduce using rule 1 (node_list -> .)
    INT32_T         reduce using rule 1 (node_list -> .)
    INT64_T         reduce using rule 1 (node_list -> .)
    UINT8_T         reduce using rule 1 (node_list -> .)
    UINT16_T        reduce using rule 1 (node_list -> .)
    UINT32_T        reduce using rule 1 (node_list -> .)
    UINT64_T        reduce using rule 1 (node_list -> .)
    ID              reduce using rule 1 (node_list -> .)
    SIZEOF          reduce using rule 1 (node_list -> .)
    LPAREN          reduce using rule 1 (node_list -> .)
    NEGATE          reduce using rule 1 (node_list -> .)
    MINUS           reduce using rule 1 (node_list -> .)
    RETURN          reduce using rule 1 (node_list -> .)
    WHILE           reduce using rule 1 (node_list -> .)
    IF              reduce using rule 1 (node_list -> .)
    FOR             reduce using rule 1 (node_list -> .)
    FLOAT_L         reduce using rule 1 (node_list -> .)
    INT_L           reduce using rule 1 (node_list -> .)
    CHAR_L          reduce using rule 1 (node_list -> .)
    STRING_L        reduce using rule 1 (node_list -> .)
    NONDECIMAL_L    reduce using rule 1 (node_list -> .)
    BITAND          reduce using rule 1 (node_list -> .)
    CONST           reduce using rule 1 (node_list -> .)
    EXTERN          reduce using rule 1 (node_list -> .)
    INLINE          reduce using rule 1 (node_list -> .)
    LONG            reduce using rule 1 (node_list -> .)
    SHORT           reduce using rule 1 (node_list -> .)
    SIGNED          reduce using rule 1 (node_list -> .)
    UNSIGNED        reduce using rule 1 (node_list -> .)
    VOLATILE        reduce using rule 1 (node_list -> .)

    node_list                      shift and go to state 158

state 88

    (53) scope -> error . RBRACE

    RBRACE          shift and go to state 159


state 89

    (86) func_def -> error scope .

    INCLUDE         reduce using rule 86 (func_def -> error scope .)
    DEFINE          reduce using rule 86 (func_def -> error scope .)
    IFNDEF          reduce using rule 86 (func_def -> error scope .)
    ENDIF           reduce using rule 86 (func_def -> error scope .)
    error           reduce using rule 86 (func_def -> error scope .)
    ELSE            reduce using rule 86 (func_def -> error scope .)
    STRUCT          reduce using rule 86 (func_def -> error scope .)
    CHAR            reduce using rule 86 (func_def -> error scope .)
    DOUBLE          reduce using rule 86 (func_def -> error scope .)
    FLOAT           reduce using rule 86 (func_def -> error scope .)
    INT             reduce using rule 86 (func_def -> error scope .)
    VOID            reduce using rule 86 (func_def -> error scope .)
    INT8_T          reduce using rule 86 (func_def -> error scope .)
    INT16_T         reduce using rule 86 (func_def -> error scope .)
    INT32_T         reduce using rule 86 (func_def -> error scope .)
    INT64_T         reduce using rule 86 (func_def -> error scope .)
    UINT8_T         reduce using rule 86 (func_def -> error scope .)
    UINT16_T        reduce using rule 86 (func_def -> error scope .)
    UINT32_T        reduce using rule 86 (func_def -> error scope .)
    UINT64_T        reduce using rule 86 (func_def -> error scope .)
    ID              reduce using rule 86 (func_def -> error scope .)
    SIZEOF          reduce using rule 86 (func_def -> error scope .)
    LPAREN          reduce using rule 86 (func_def -> error scope .)
    NEGATE          reduce using rule 86 (func_def -> error scope .)
    MINUS           reduce using rule 86 (func_def -> error scope .)
    RETURN          reduce using rule 86 (func_def -> error scope .)
    WHILE           reduce using rule 86 (func_def -> error scope .)
    IF              reduce using rule 86 (func_def -> error scope .)
    FOR             reduce using rule 86 (func_def -> error scope .)
    FLOAT_L         reduce using rule 86 (func_def -> error scope .)
    INT_L           reduce using rule 86 (func_def -> error scope .)
    CHAR_L          reduce using rule 86 (func_def -> error scope .)
    STRING_L        reduce using rule 86 (func_def -> error scope .)
    NONDECIMAL_L    reduce using rule 86 (func_def -> error scope .)
    BITAND          reduce using rule 86 (func_def -> error scope .)
    $end            reduce using rule 86 (func_def -> error scope .)
    CONST           reduce using rule 86 (func_def -> error scope .)
    EXTERN          reduce using rule 86 (func_def -> error scope .)
    INLINE          reduce using rule 86 (func_def -> error scope .)
    LONG            reduce using rule 86 (func_def -> error scope .)
    SHORT           reduce using rule 86 (func_def -> error scope .)
    SIGNED          reduce using rule 86 (func_def -> error scope .)
    UNSIGNED        reduce using rule 86 (func_def -> error scope .)
    VOLATILE        reduce using rule 86 (func_def -> error scope .)
    RBRACE          reduce using rule 86 (func_def -> error scope .)


state 90

    (112) statement -> error SEMI .

    INCLUDE         reduce using rule 112 (statement -> error SEMI .)
    DEFINE          reduce using rule 112 (statement -> error SEMI .)
    IFNDEF          reduce using rule 112 (statement -> error SEMI .)
    ENDIF           reduce using rule 112 (statement -> error SEMI .)
    error           reduce using rule 112 (statement -> error SEMI .)
    ELSE            reduce using rule 112 (statement -> error SEMI .)
    STRUCT          reduce using rule 112 (statement -> error SEMI .)
    CHAR            reduce using rule 112 (statement -> error SEMI .)
    DOUBLE          reduce using rule 112 (statement -> error SEMI .)
    FLOAT           reduce using rule 112 (statement -> error SEMI .)
    INT             reduce using rule 112 (statement -> error SEMI .)
    VOID            reduce using rule 112 (statement -> error SEMI .)
    INT8_T          reduce using rule 112 (statement -> error SEMI .)
    INT16_T         reduce using rule 112 (statement -> error SEMI .)
    INT32_T         reduce using rule 112 (statement -> error SEMI .)
    INT64_T         reduce using rule 112 (statement -> error SEMI .)
    UINT8_T         reduce using rule 112 (statement -> error SEMI .)
    UINT16_T        reduce using rule 112 (statement -> error SEMI .)
    UINT32_T        reduce using rule 112 (statement -> error SEMI .)
    UINT64_T        reduce using rule 112 (statement -> error SEMI .)
    ID              reduce using rule 112 (statement -> error SEMI .)
    SIZEOF          reduce using rule 112 (statement -> error SEMI .)
    LPAREN          reduce using rule 112 (statement -> error SEMI .)
    NEGATE          reduce using rule 112 (statement -> error SEMI .)
    MINUS           reduce using rule 112 (statement -> error SEMI .)
    RETURN          reduce using rule 112 (statement -> error SEMI .)
    WHILE           reduce using rule 112 (statement -> error SEMI .)
    IF              reduce using rule 112 (statement -> error SEMI .)
    FOR             reduce using rule 112 (statement -> error SEMI .)
    FLOAT_L         reduce using rule 112 (statement -> error SEMI .)
    INT_L           reduce using rule 112 (statement -> error SEMI .)
    CHAR_L          reduce using rule 112 (statement -> error SEMI .)
    STRING_L        reduce using rule 112 (statement -> error SEMI .)
    NONDECIMAL_L    reduce using rule 112 (statement -> error SEMI .)
    BITAND          reduce using rule 112 (statement -> error SEMI .)
    $end            reduce using rule 112 (statement -> error SEMI .)
    CONST           reduce using rule 112 (statement -> error SEMI .)
    EXTERN          reduce using rule 112 (statement -> error SEMI .)
    INLINE          reduce using rule 112 (statement -> error SEMI .)
    LONG            reduce using rule 112 (statement -> error SEMI .)
    SHORT           reduce using rule 112 (statement -> error SEMI .)
    SIGNED          reduce using rule 112 (statement -> error SEMI .)
    UNSIGNED        reduce using rule 112 (statement -> error SEMI .)
    VOLATILE        reduce using rule 112 (statement -> error SEMI .)
    RBRACE          reduce using rule 112 (statement -> error SEMI .)


state 91

    (76) control_expr -> error LBRACE .
    (52) scope -> LBRACE . node_list RBRACE
    (1) node_list -> .
    (2) node_list -> . node_list node

  ! reduce/reduce conflict for RBRACE resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for INCLUDE resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for DEFINE resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for IFNDEF resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for ENDIF resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for error resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for STRUCT resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for CHAR resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for FLOAT resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for INT resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for VOID resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for INT8_T resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for INT16_T resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for INT32_T resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for INT64_T resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for UINT8_T resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for UINT16_T resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for UINT32_T resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for UINT64_T resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for ID resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for SIZEOF resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for LPAREN resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for NEGATE resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for IF resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for FOR resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for FLOAT_L resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for INT_L resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for CHAR_L resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for STRING_L resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for NONDECIMAL_L resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for BITAND resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for CONST resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for EXTERN resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for INLINE resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for LONG resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for SHORT resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for SIGNED resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 1 (node_list -> .)
  ! reduce/reduce conflict for VOLATILE resolved using rule 1 (node_list -> .)
    $end            reduce using rule 76 (control_expr -> error LBRACE .)
    RBRACE          reduce using rule 1 (node_list -> .)
    INCLUDE         reduce using rule 1 (node_list -> .)
    DEFINE          reduce using rule 1 (node_list -> .)
    IFNDEF          reduce using rule 1 (node_list -> .)
    ENDIF           reduce using rule 1 (node_list -> .)
    error           reduce using rule 1 (node_list -> .)
    ELSE            reduce using rule 1 (node_list -> .)
    STRUCT          reduce using rule 1 (node_list -> .)
    CHAR            reduce using rule 1 (node_list -> .)
    DOUBLE          reduce using rule 1 (node_list -> .)
    FLOAT           reduce using rule 1 (node_list -> .)
    INT             reduce using rule 1 (node_list -> .)
    VOID            reduce using rule 1 (node_list -> .)
    INT8_T          reduce using rule 1 (node_list -> .)
    INT16_T         reduce using rule 1 (node_list -> .)
    INT32_T         reduce using rule 1 (node_list -> .)
    INT64_T         reduce using rule 1 (node_list -> .)
    UINT8_T         reduce using rule 1 (node_list -> .)
    UINT16_T        reduce using rule 1 (node_list -> .)
    UINT32_T        reduce using rule 1 (node_list -> .)
    UINT64_T        reduce using rule 1 (node_list -> .)
    ID              reduce using rule 1 (node_list -> .)
    SIZEOF          reduce using rule 1 (node_list -> .)
    LPAREN          reduce using rule 1 (node_list -> .)
    NEGATE          reduce using rule 1 (node_list -> .)
    MINUS           reduce using rule 1 (node_list -> .)
    RETURN          reduce using rule 1 (node_list -> .)
    WHILE           reduce using rule 1 (node_list -> .)
    IF              reduce using rule 1 (node_list -> .)
    FOR             reduce using rule 1 (node_list -> .)
    FLOAT_L         reduce using rule 1 (node_list -> .)
    INT_L           reduce using rule 1 (node_list -> .)
    CHAR_L          reduce using rule 1 (node_list -> .)
    STRING_L        reduce using rule 1 (node_list -> .)
    NONDECIMAL_L    reduce using rule 1 (node_list -> .)
    BITAND          reduce using rule 1 (node_list -> .)
    CONST           reduce using rule 1 (node_list -> .)
    EXTERN          reduce using rule 1 (node_list -> .)
    INLINE          reduce using rule 1 (node_list -> .)
    LONG            reduce using rule 1 (node_list -> .)
    SHORT           reduce using rule 1 (node_list -> .)
    SIGNED          reduce using rule 1 (node_list -> .)
    UNSIGNED        reduce using rule 1 (node_list -> .)
    VOLATILE        reduce using rule 1 (node_list -> .)

  ! INCLUDE         [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! DEFINE          [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! IFNDEF          [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! ENDIF           [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! error           [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! ELSE            [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! STRUCT          [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! CHAR            [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! DOUBLE          [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! FLOAT           [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! INT             [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! VOID            [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! INT8_T          [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! INT16_T         [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! INT32_T         [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! INT64_T         [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! UINT8_T         [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! UINT16_T        [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! UINT32_T        [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! UINT64_T        [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! ID              [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! SIZEOF          [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! LPAREN          [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! NEGATE          [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! MINUS           [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! RETURN          [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! WHILE           [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! IF              [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! FOR             [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! FLOAT_L         [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! INT_L           [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! CHAR_L          [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! STRING_L        [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! NONDECIMAL_L    [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! BITAND          [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! CONST           [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! EXTERN          [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! INLINE          [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! LONG            [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! SHORT           [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! SIGNED          [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! UNSIGNED        [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! VOLATILE        [ reduce using rule 76 (control_expr -> error LBRACE .) ]
  ! RBRACE          [ reduce using rule 76 (control_expr -> error LBRACE .) ]

    node_list                      shift and go to state 158

state 92

    (109) statement -> expression SEMI .

    INCLUDE         reduce using rule 109 (statement -> expression SEMI .)
    DEFINE          reduce using rule 109 (statement -> expression SEMI .)
    IFNDEF          reduce using rule 109 (statement -> expression SEMI .)
    ENDIF           reduce using rule 109 (statement -> expression SEMI .)
    error           reduce using rule 109 (statement -> expression SEMI .)
    ELSE            reduce using rule 109 (statement -> expression SEMI .)
    STRUCT          reduce using rule 109 (statement -> expression SEMI .)
    CHAR            reduce using rule 109 (statement -> expression SEMI .)
    DOUBLE          reduce using rule 109 (statement -> expression SEMI .)
    FLOAT           reduce using rule 109 (statement -> expression SEMI .)
    INT             reduce using rule 109 (statement -> expression SEMI .)
    VOID            reduce using rule 109 (statement -> expression SEMI .)
    INT8_T          reduce using rule 109 (statement -> expression SEMI .)
    INT16_T         reduce using rule 109 (statement -> expression SEMI .)
    INT32_T         reduce using rule 109 (statement -> expression SEMI .)
    INT64_T         reduce using rule 109 (statement -> expression SEMI .)
    UINT8_T         reduce using rule 109 (statement -> expression SEMI .)
    UINT16_T        reduce using rule 109 (statement -> expression SEMI .)
    UINT32_T        reduce using rule 109 (statement -> expression SEMI .)
    UINT64_T        reduce using rule 109 (statement -> expression SEMI .)
    ID              reduce using rule 109 (statement -> expression SEMI .)
    SIZEOF          reduce using rule 109 (statement -> expression SEMI .)
    LPAREN          reduce using rule 109 (statement -> expression SEMI .)
    NEGATE          reduce using rule 109 (statement -> expression SEMI .)
    MINUS           reduce using rule 109 (statement -> expression SEMI .)
    RETURN          reduce using rule 109 (statement -> expression SEMI .)
    WHILE           reduce using rule 109 (statement -> expression SEMI .)
    IF              reduce using rule 109 (statement -> expression SEMI .)
    FOR             reduce using rule 109 (statement -> expression SEMI .)
    FLOAT_L         reduce using rule 109 (statement -> expression SEMI .)
    INT_L           reduce using rule 109 (statement -> expression SEMI .)
    CHAR_L          reduce using rule 109 (statement -> expression SEMI .)
    STRING_L        reduce using rule 109 (statement -> expression SEMI .)
    NONDECIMAL_L    reduce using rule 109 (statement -> expression SEMI .)
    BITAND          reduce using rule 109 (statement -> expression SEMI .)
    $end            reduce using rule 109 (statement -> expression SEMI .)
    CONST           reduce using rule 109 (statement -> expression SEMI .)
    EXTERN          reduce using rule 109 (statement -> expression SEMI .)
    INLINE          reduce using rule 109 (statement -> expression SEMI .)
    LONG            reduce using rule 109 (statement -> expression SEMI .)
    SHORT           reduce using rule 109 (statement -> expression SEMI .)
    SIGNED          reduce using rule 109 (statement -> expression SEMI .)
    UNSIGNED        reduce using rule 109 (statement -> expression SEMI .)
    VOLATILE        reduce using rule 109 (statement -> expression SEMI .)
    RBRACE          reduce using rule 109 (statement -> expression SEMI .)


state 93

    (111) statement -> return SEMI .

    INCLUDE         reduce using rule 111 (statement -> return SEMI .)
    DEFINE          reduce using rule 111 (statement -> return SEMI .)
    IFNDEF          reduce using rule 111 (statement -> return SEMI .)
    ENDIF           reduce using rule 111 (statement -> return SEMI .)
    error           reduce using rule 111 (statement -> return SEMI .)
    ELSE            reduce using rule 111 (statement -> return SEMI .)
    STRUCT          reduce using rule 111 (statement -> return SEMI .)
    CHAR            reduce using rule 111 (statement -> return SEMI .)
    DOUBLE          reduce using rule 111 (statement -> return SEMI .)
    FLOAT           reduce using rule 111 (statement -> return SEMI .)
    INT             reduce using rule 111 (statement -> return SEMI .)
    VOID            reduce using rule 111 (statement -> return SEMI .)
    INT8_T          reduce using rule 111 (statement -> return SEMI .)
    INT16_T         reduce using rule 111 (statement -> return SEMI .)
    INT32_T         reduce using rule 111 (statement -> return SEMI .)
    INT64_T         reduce using rule 111 (statement -> return SEMI .)
    UINT8_T         reduce using rule 111 (statement -> return SEMI .)
    UINT16_T        reduce using rule 111 (statement -> return SEMI .)
    UINT32_T        reduce using rule 111 (statement -> return SEMI .)
    UINT64_T        reduce using rule 111 (statement -> return SEMI .)
    ID              reduce using rule 111 (statement -> return SEMI .)
    SIZEOF          reduce using rule 111 (statement -> return SEMI .)
    LPAREN          reduce using rule 111 (statement -> return SEMI .)
    NEGATE          reduce using rule 111 (statement -> return SEMI .)
    MINUS           reduce using rule 111 (statement -> return SEMI .)
    RETURN          reduce using rule 111 (statement -> return SEMI .)
    WHILE           reduce using rule 111 (statement -> return SEMI .)
    IF              reduce using rule 111 (statement -> return SEMI .)
    FOR             reduce using rule 111 (statement -> return SEMI .)
    FLOAT_L         reduce using rule 111 (statement -> return SEMI .)
    INT_L           reduce using rule 111 (statement -> return SEMI .)
    CHAR_L          reduce using rule 111 (statement -> return SEMI .)
    STRING_L        reduce using rule 111 (statement -> return SEMI .)
    NONDECIMAL_L    reduce using rule 111 (statement -> return SEMI .)
    BITAND          reduce using rule 111 (statement -> return SEMI .)
    $end            reduce using rule 111 (statement -> return SEMI .)
    CONST           reduce using rule 111 (statement -> return SEMI .)
    EXTERN          reduce using rule 111 (statement -> return SEMI .)
    INLINE          reduce using rule 111 (statement -> return SEMI .)
    LONG            reduce using rule 111 (statement -> return SEMI .)
    SHORT           reduce using rule 111 (statement -> return SEMI .)
    SIGNED          reduce using rule 111 (statement -> return SEMI .)
    UNSIGNED        reduce using rule 111 (statement -> return SEMI .)
    VOLATILE        reduce using rule 111 (statement -> return SEMI .)
    RBRACE          reduce using rule 111 (statement -> return SEMI .)


state 94

    (72) control_expr -> control LPAREN . conditional_expr RPAREN scope
    (65) conditional_expr -> . name conditional expression
    (66) conditional_expr -> . expression conditional name
    (67) conditional_expr -> . expression conditional expression
    (68) conditional_expr -> . name conditional name
    (69) conditional_expr -> . name
    (70) conditional_expr -> . expression
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (113) expression -> . LPAREN expression RPAREN
    (114) expression -> . LPAREN name RPAREN
    (115) expression -> . NEGATE expression
    (116) expression -> . MINUS expression
    (117) expression -> . NEGATE name
    (118) expression -> . MINUS name
    (133) expression -> . operand binop operand
    (134) expression -> . name INCREMENT
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name
    (129) operand -> . name
    (130) operand -> . expression
    (131) operand -> . type_cast name
    (132) operand -> . func_call
    (19) type_cast -> . LPAREN dtype RPAREN
    (98) func_call -> . ID LPAREN func_arglist RPAREN
    (99) func_call -> . SIZEOF LPAREN func_arglist RPAREN

    ID              shift and go to state 71
    LPAREN          shift and go to state 17
    NEGATE          shift and go to state 49
    MINUS           shift and go to state 50
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64
    SIZEOF          shift and go to state 44

    conditional_expr               shift and go to state 160
    name                           shift and go to state 161
    expression                     shift and go to state 162
    literal                        shift and go to state 57
    access                         shift and go to state 58
    operand                        shift and go to state 51
    type_cast                      shift and go to state 56
    func_call                      shift and go to state 72

state 95

    (73) control_expr -> control scope .

    INCLUDE         reduce using rule 73 (control_expr -> control scope .)
    DEFINE          reduce using rule 73 (control_expr -> control scope .)
    IFNDEF          reduce using rule 73 (control_expr -> control scope .)
    ENDIF           reduce using rule 73 (control_expr -> control scope .)
    error           reduce using rule 73 (control_expr -> control scope .)
    ELSE            reduce using rule 73 (control_expr -> control scope .)
    STRUCT          reduce using rule 73 (control_expr -> control scope .)
    CHAR            reduce using rule 73 (control_expr -> control scope .)
    DOUBLE          reduce using rule 73 (control_expr -> control scope .)
    FLOAT           reduce using rule 73 (control_expr -> control scope .)
    INT             reduce using rule 73 (control_expr -> control scope .)
    VOID            reduce using rule 73 (control_expr -> control scope .)
    INT8_T          reduce using rule 73 (control_expr -> control scope .)
    INT16_T         reduce using rule 73 (control_expr -> control scope .)
    INT32_T         reduce using rule 73 (control_expr -> control scope .)
    INT64_T         reduce using rule 73 (control_expr -> control scope .)
    UINT8_T         reduce using rule 73 (control_expr -> control scope .)
    UINT16_T        reduce using rule 73 (control_expr -> control scope .)
    UINT32_T        reduce using rule 73 (control_expr -> control scope .)
    UINT64_T        reduce using rule 73 (control_expr -> control scope .)
    ID              reduce using rule 73 (control_expr -> control scope .)
    SIZEOF          reduce using rule 73 (control_expr -> control scope .)
    LPAREN          reduce using rule 73 (control_expr -> control scope .)
    NEGATE          reduce using rule 73 (control_expr -> control scope .)
    MINUS           reduce using rule 73 (control_expr -> control scope .)
    RETURN          reduce using rule 73 (control_expr -> control scope .)
    WHILE           reduce using rule 73 (control_expr -> control scope .)
    IF              reduce using rule 73 (control_expr -> control scope .)
    FOR             reduce using rule 73 (control_expr -> control scope .)
    FLOAT_L         reduce using rule 73 (control_expr -> control scope .)
    INT_L           reduce using rule 73 (control_expr -> control scope .)
    CHAR_L          reduce using rule 73 (control_expr -> control scope .)
    STRING_L        reduce using rule 73 (control_expr -> control scope .)
    NONDECIMAL_L    reduce using rule 73 (control_expr -> control scope .)
    BITAND          reduce using rule 73 (control_expr -> control scope .)
    $end            reduce using rule 73 (control_expr -> control scope .)
    CONST           reduce using rule 73 (control_expr -> control scope .)
    EXTERN          reduce using rule 73 (control_expr -> control scope .)
    INLINE          reduce using rule 73 (control_expr -> control scope .)
    LONG            reduce using rule 73 (control_expr -> control scope .)
    SHORT           reduce using rule 73 (control_expr -> control scope .)
    SIGNED          reduce using rule 73 (control_expr -> control scope .)
    UNSIGNED        reduce using rule 73 (control_expr -> control scope .)
    VOLATILE        reduce using rule 73 (control_expr -> control scope .)
    RBRACE          reduce using rule 73 (control_expr -> control scope .)


state 96

    (74) control_expr -> for_loop scope .

    INCLUDE         reduce using rule 74 (control_expr -> for_loop scope .)
    DEFINE          reduce using rule 74 (control_expr -> for_loop scope .)
    IFNDEF          reduce using rule 74 (control_expr -> for_loop scope .)
    ENDIF           reduce using rule 74 (control_expr -> for_loop scope .)
    error           reduce using rule 74 (control_expr -> for_loop scope .)
    ELSE            reduce using rule 74 (control_expr -> for_loop scope .)
    STRUCT          reduce using rule 74 (control_expr -> for_loop scope .)
    CHAR            reduce using rule 74 (control_expr -> for_loop scope .)
    DOUBLE          reduce using rule 74 (control_expr -> for_loop scope .)
    FLOAT           reduce using rule 74 (control_expr -> for_loop scope .)
    INT             reduce using rule 74 (control_expr -> for_loop scope .)
    VOID            reduce using rule 74 (control_expr -> for_loop scope .)
    INT8_T          reduce using rule 74 (control_expr -> for_loop scope .)
    INT16_T         reduce using rule 74 (control_expr -> for_loop scope .)
    INT32_T         reduce using rule 74 (control_expr -> for_loop scope .)
    INT64_T         reduce using rule 74 (control_expr -> for_loop scope .)
    UINT8_T         reduce using rule 74 (control_expr -> for_loop scope .)
    UINT16_T        reduce using rule 74 (control_expr -> for_loop scope .)
    UINT32_T        reduce using rule 74 (control_expr -> for_loop scope .)
    UINT64_T        reduce using rule 74 (control_expr -> for_loop scope .)
    ID              reduce using rule 74 (control_expr -> for_loop scope .)
    SIZEOF          reduce using rule 74 (control_expr -> for_loop scope .)
    LPAREN          reduce using rule 74 (control_expr -> for_loop scope .)
    NEGATE          reduce using rule 74 (control_expr -> for_loop scope .)
    MINUS           reduce using rule 74 (control_expr -> for_loop scope .)
    RETURN          reduce using rule 74 (control_expr -> for_loop scope .)
    WHILE           reduce using rule 74 (control_expr -> for_loop scope .)
    IF              reduce using rule 74 (control_expr -> for_loop scope .)
    FOR             reduce using rule 74 (control_expr -> for_loop scope .)
    FLOAT_L         reduce using rule 74 (control_expr -> for_loop scope .)
    INT_L           reduce using rule 74 (control_expr -> for_loop scope .)
    CHAR_L          reduce using rule 74 (control_expr -> for_loop scope .)
    STRING_L        reduce using rule 74 (control_expr -> for_loop scope .)
    NONDECIMAL_L    reduce using rule 74 (control_expr -> for_loop scope .)
    BITAND          reduce using rule 74 (control_expr -> for_loop scope .)
    $end            reduce using rule 74 (control_expr -> for_loop scope .)
    CONST           reduce using rule 74 (control_expr -> for_loop scope .)
    EXTERN          reduce using rule 74 (control_expr -> for_loop scope .)
    INLINE          reduce using rule 74 (control_expr -> for_loop scope .)
    LONG            reduce using rule 74 (control_expr -> for_loop scope .)
    SHORT           reduce using rule 74 (control_expr -> for_loop scope .)
    SIGNED          reduce using rule 74 (control_expr -> for_loop scope .)
    UNSIGNED        reduce using rule 74 (control_expr -> for_loop scope .)
    VOLATILE        reduce using rule 74 (control_expr -> for_loop scope .)
    RBRACE          reduce using rule 74 (control_expr -> for_loop scope .)


state 97

    (75) control_expr -> ELSE node_list .
    (2) node_list -> node_list . node
    (3) node -> . include
    (4) node -> . define
    (5) node -> . if
    (6) node -> . func_def
    (7) node -> . func_decl
    (8) node -> . statement
    (9) node -> . control_expr
    (10) node -> . struct_def
    (48) include -> . INCLUDE
    (49) define -> . DEFINE
    (50) if -> . IFNDEF
    (51) if -> . ENDIF
    (83) func_def -> . dtype ID LPAREN func_def_arglist RPAREN scope
    (84) func_def -> . modifier_list dtype ID LPAREN func_def_arglist RPAREN scope
    (85) func_def -> . func_call scope
    (86) func_def -> . error scope
    (87) func_decl -> . dtype ID LPAREN func_def_arglist RPAREN SEMI
    (106) statement -> . init_var
    (107) statement -> . assign_var
    (108) statement -> . declare_var
    (109) statement -> . expression SEMI
    (110) statement -> . func_call SEMI
    (111) statement -> . return SEMI
    (112) statement -> . error SEMI
    (72) control_expr -> . control LPAREN conditional_expr RPAREN scope
    (73) control_expr -> . control scope
    (74) control_expr -> . for_loop scope
    (75) control_expr -> . ELSE node_list
    (76) control_expr -> . error LBRACE
    (104) struct_def -> . STRUCT ID scope SEMI
    (30) dtype -> . CHAR
    (31) dtype -> . DOUBLE
    (32) dtype -> . FLOAT
    (33) dtype -> . INT
    (34) dtype -> . VOID
    (35) dtype -> . INT8_T
    (36) dtype -> . INT16_T
    (37) dtype -> . INT32_T
    (38) dtype -> . INT64_T
    (39) dtype -> . UINT8_T
    (40) dtype -> . UINT16_T
    (41) dtype -> . UINT32_T
    (42) dtype -> . UINT64_T
    (43) dtype -> . struct_type
    (44) dtype -> . dtype ASTERISK
    (28) modifier_list -> .
    (29) modifier_list -> . modifier_list modifier
    (98) func_call -> . ID LPAREN func_arglist RPAREN
    (99) func_call -> . SIZEOF LPAREN func_arglist RPAREN
    (163) init_var -> . init_var_ls init_var_rs
    (166) assign_var -> . assign_var_ls assign_var_rs
    (140) declare_var -> . declare_var_ls SEMI
    (113) expression -> . LPAREN expression RPAREN
    (114) expression -> . LPAREN name RPAREN
    (115) expression -> . NEGATE expression
    (116) expression -> . MINUS expression
    (117) expression -> . NEGATE name
    (118) expression -> . MINUS name
    (133) expression -> . operand binop operand
    (134) expression -> . name INCREMENT
    (135) return -> . RETURN name
    (136) return -> . RETURN expression
    (54) control -> . WHILE
    (55) control -> . IF
    (56) control -> . ELSE
    (71) for_loop -> . FOR LPAREN init_var conditional_expr SEMI ID INCREMENT RPAREN
    (18) struct_type -> . STRUCT name
    (145) init_var_ls -> . declare_var_ls assign
    (146) init_var_ls -> . declare_var_ls vector_init_list assign
    (164) assign_var_ls -> . name assign
    (137) declare_var_ls -> . dtype ID
    (138) declare_var_ls -> . modifier_list ID
    (139) declare_var_ls -> . modifier_list dtype ID
    (129) operand -> . name
    (130) operand -> . expression
    (131) operand -> . type_cast name
    (132) operand -> . func_call
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (19) type_cast -> . LPAREN dtype RPAREN
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name

  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for IFNDEF resolved as shift
  ! shift/reduce conflict for ENDIF resolved as shift
  ! shift/reduce conflict for error resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for STRUCT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT8_T resolved as shift
  ! shift/reduce conflict for INT16_T resolved as shift
  ! shift/reduce conflict for INT32_T resolved as shift
  ! shift/reduce conflict for INT64_T resolved as shift
  ! shift/reduce conflict for UINT8_T resolved as shift
  ! shift/reduce conflict for UINT16_T resolved as shift
  ! shift/reduce conflict for UINT32_T resolved as shift
  ! shift/reduce conflict for UINT64_T resolved as shift
  ! reduce/reduce conflict for ID resolved using rule 28 (modifier_list -> .)
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT8_T resolved as shift
  ! shift/reduce conflict for INT16_T resolved as shift
  ! shift/reduce conflict for INT32_T resolved as shift
  ! shift/reduce conflict for INT64_T resolved as shift
  ! shift/reduce conflict for UINT8_T resolved as shift
  ! shift/reduce conflict for UINT16_T resolved as shift
  ! shift/reduce conflict for UINT32_T resolved as shift
  ! shift/reduce conflict for UINT64_T resolved as shift
  ! reduce/reduce conflict for CONST resolved using rule 28 (modifier_list -> .)
  ! reduce/reduce conflict for EXTERN resolved using rule 28 (modifier_list -> .)
  ! reduce/reduce conflict for INLINE resolved using rule 28 (modifier_list -> .)
  ! reduce/reduce conflict for LONG resolved using rule 28 (modifier_list -> .)
  ! reduce/reduce conflict for SHORT resolved using rule 28 (modifier_list -> .)
  ! reduce/reduce conflict for SIGNED resolved using rule 28 (modifier_list -> .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 28 (modifier_list -> .)
  ! reduce/reduce conflict for VOLATILE resolved using rule 28 (modifier_list -> .)
  ! shift/reduce conflict for STRUCT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SIZEOF resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NEGATE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FLOAT_L resolved as shift
  ! shift/reduce conflict for INT_L resolved as shift
  ! shift/reduce conflict for CHAR_L resolved as shift
  ! shift/reduce conflict for STRING_L resolved as shift
  ! shift/reduce conflict for NONDECIMAL_L resolved as shift
  ! shift/reduce conflict for BITAND resolved as shift
    $end            reduce using rule 75 (control_expr -> ELSE node_list .)
    RBRACE          reduce using rule 75 (control_expr -> ELSE node_list .)
    INCLUDE         shift and go to state 11
    DEFINE          shift and go to state 12
    IFNDEF          shift and go to state 13
    ENDIF           shift and go to state 14
    error           shift and go to state 20
    ELSE            shift and go to state 28
    STRUCT          shift and go to state 29
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 31
    FLOAT           shift and go to state 32
    INT             shift and go to state 33
    VOID            shift and go to state 34
    INT8_T          shift and go to state 35
    INT16_T         shift and go to state 36
    INT32_T         shift and go to state 37
    INT64_T         shift and go to state 38
    UINT8_T         shift and go to state 39
    UINT16_T        shift and go to state 40
    UINT32_T        shift and go to state 41
    UINT64_T        shift and go to state 42
    CONST           reduce using rule 28 (modifier_list -> .)
    EXTERN          reduce using rule 28 (modifier_list -> .)
    INLINE          reduce using rule 28 (modifier_list -> .)
    LONG            reduce using rule 28 (modifier_list -> .)
    SHORT           reduce using rule 28 (modifier_list -> .)
    SIGNED          reduce using rule 28 (modifier_list -> .)
    UNSIGNED        reduce using rule 28 (modifier_list -> .)
    VOLATILE        reduce using rule 28 (modifier_list -> .)
    ID              shift and go to state 16
    SIZEOF          shift and go to state 44
    LPAREN          shift and go to state 17
    NEGATE          shift and go to state 49
    MINUS           shift and go to state 50
    RETURN          shift and go to state 52
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    FOR             shift and go to state 55
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64

  ! INCLUDE         [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! DEFINE          [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! IFNDEF          [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! ENDIF           [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! error           [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! ELSE            [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! STRUCT          [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! CHAR            [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! DOUBLE          [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! FLOAT           [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! INT             [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! VOID            [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! INT8_T          [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! INT16_T         [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! INT32_T         [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! INT64_T         [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! UINT8_T         [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! UINT16_T        [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! UINT32_T        [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! UINT64_T        [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! ID              [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! SIZEOF          [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! LPAREN          [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! NEGATE          [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! MINUS           [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! RETURN          [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! WHILE           [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! IF              [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! FOR             [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! FLOAT_L         [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! INT_L           [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! CHAR_L          [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! STRING_L        [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! NONDECIMAL_L    [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! BITAND          [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! CONST           [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! EXTERN          [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! INLINE          [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! LONG            [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! SHORT           [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! SIGNED          [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! UNSIGNED        [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! VOLATILE        [ reduce using rule 75 (control_expr -> ELSE node_list .) ]
  ! ID              [ reduce using rule 28 (modifier_list -> .) ]
  ! CHAR            [ reduce using rule 28 (modifier_list -> .) ]
  ! DOUBLE          [ reduce using rule 28 (modifier_list -> .) ]
  ! FLOAT           [ reduce using rule 28 (modifier_list -> .) ]
  ! INT             [ reduce using rule 28 (modifier_list -> .) ]
  ! VOID            [ reduce using rule 28 (modifier_list -> .) ]
  ! INT8_T          [ reduce using rule 28 (modifier_list -> .) ]
  ! INT16_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! INT32_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! INT64_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT8_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT16_T        [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT32_T        [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT64_T        [ reduce using rule 28 (modifier_list -> .) ]
  ! STRUCT          [ reduce using rule 28 (modifier_list -> .) ]

    node                           shift and go to state 2
    include                        shift and go to state 3
    define                         shift and go to state 4
    if                             shift and go to state 5
    func_def                       shift and go to state 6
    func_decl                      shift and go to state 7
    statement                      shift and go to state 8
    control_expr                   shift and go to state 9
    struct_def                     shift and go to state 10
    dtype                          shift and go to state 15
    modifier_list                  shift and go to state 18
    func_call                      shift and go to state 19
    init_var                       shift and go to state 21
    assign_var                     shift and go to state 22
    declare_var                    shift and go to state 23
    expression                     shift and go to state 24
    return                         shift and go to state 25
    control                        shift and go to state 26
    for_loop                       shift and go to state 27
    struct_type                    shift and go to state 43
    init_var_ls                    shift and go to state 45
    assign_var_ls                  shift and go to state 46
    declare_var_ls                 shift and go to state 47
    name                           shift and go to state 48
    operand                        shift and go to state 51
    type_cast                      shift and go to state 56
    literal                        shift and go to state 57
    access                         shift and go to state 58

state 98

    (104) struct_def -> STRUCT ID . scope SEMI
    (45) name -> ID .
    (52) scope -> . LBRACE node_list RBRACE
    (53) scope -> . error RBRACE

    LBRACK          reduce using rule 45 (name -> ID .)
    MEMBER          reduce using rule 45 (name -> ID .)
    ID              reduce using rule 45 (name -> ID .)
    ASTERISK        reduce using rule 45 (name -> ID .)
    LBRACE          shift and go to state 87
    error           shift and go to state 88

    scope                          shift and go to state 163

state 99

    (18) struct_type -> STRUCT name .
    (100) access -> name . LBRACK name RBRACK
    (101) access -> name . LBRACK expression RBRACK
    (102) access -> name . MEMBER name

    ID              reduce using rule 18 (struct_type -> STRUCT name .)
    ASTERISK        reduce using rule 18 (struct_type -> STRUCT name .)
    RPAREN          reduce using rule 18 (struct_type -> STRUCT name .)
    COMMA           reduce using rule 18 (struct_type -> STRUCT name .)
    CHAR            reduce using rule 18 (struct_type -> STRUCT name .)
    DOUBLE          reduce using rule 18 (struct_type -> STRUCT name .)
    FLOAT           reduce using rule 18 (struct_type -> STRUCT name .)
    INT             reduce using rule 18 (struct_type -> STRUCT name .)
    VOID            reduce using rule 18 (struct_type -> STRUCT name .)
    INT8_T          reduce using rule 18 (struct_type -> STRUCT name .)
    INT16_T         reduce using rule 18 (struct_type -> STRUCT name .)
    INT32_T         reduce using rule 18 (struct_type -> STRUCT name .)
    INT64_T         reduce using rule 18 (struct_type -> STRUCT name .)
    UINT8_T         reduce using rule 18 (struct_type -> STRUCT name .)
    UINT16_T        reduce using rule 18 (struct_type -> STRUCT name .)
    UINT32_T        reduce using rule 18 (struct_type -> STRUCT name .)
    UINT64_T        reduce using rule 18 (struct_type -> STRUCT name .)
    LPAREN          reduce using rule 18 (struct_type -> STRUCT name .)
    NEGATE          reduce using rule 18 (struct_type -> STRUCT name .)
    MINUS           reduce using rule 18 (struct_type -> STRUCT name .)
    SIZEOF          reduce using rule 18 (struct_type -> STRUCT name .)
    FLOAT_L         reduce using rule 18 (struct_type -> STRUCT name .)
    INT_L           reduce using rule 18 (struct_type -> STRUCT name .)
    CHAR_L          reduce using rule 18 (struct_type -> STRUCT name .)
    STRING_L        reduce using rule 18 (struct_type -> STRUCT name .)
    NONDECIMAL_L    reduce using rule 18 (struct_type -> STRUCT name .)
    BITAND          reduce using rule 18 (struct_type -> STRUCT name .)
    STRUCT          reduce using rule 18 (struct_type -> STRUCT name .)
    CONST           reduce using rule 18 (struct_type -> STRUCT name .)
    EXTERN          reduce using rule 18 (struct_type -> STRUCT name .)
    INLINE          reduce using rule 18 (struct_type -> STRUCT name .)
    LONG            reduce using rule 18 (struct_type -> STRUCT name .)
    SHORT           reduce using rule 18 (struct_type -> STRUCT name .)
    SIGNED          reduce using rule 18 (struct_type -> STRUCT name .)
    UNSIGNED        reduce using rule 18 (struct_type -> STRUCT name .)
    VOLATILE        reduce using rule 18 (struct_type -> STRUCT name .)
    LBRACK          shift and go to state 121
    MEMBER          shift and go to state 122


state 100

    (99) func_call -> SIZEOF LPAREN . func_arglist RPAREN
    (95) func_arglist -> .
    (96) func_arglist -> . func_arglist func_arg
    (97) func_arglist -> . func_arglist func_arg COMMA

    RPAREN          reduce using rule 95 (func_arglist -> .)
    ID              reduce using rule 95 (func_arglist -> .)
    CHAR            reduce using rule 95 (func_arglist -> .)
    DOUBLE          reduce using rule 95 (func_arglist -> .)
    FLOAT           reduce using rule 95 (func_arglist -> .)
    INT             reduce using rule 95 (func_arglist -> .)
    VOID            reduce using rule 95 (func_arglist -> .)
    INT8_T          reduce using rule 95 (func_arglist -> .)
    INT16_T         reduce using rule 95 (func_arglist -> .)
    INT32_T         reduce using rule 95 (func_arglist -> .)
    INT64_T         reduce using rule 95 (func_arglist -> .)
    UINT8_T         reduce using rule 95 (func_arglist -> .)
    UINT16_T        reduce using rule 95 (func_arglist -> .)
    UINT32_T        reduce using rule 95 (func_arglist -> .)
    UINT64_T        reduce using rule 95 (func_arglist -> .)
    LPAREN          reduce using rule 95 (func_arglist -> .)
    NEGATE          reduce using rule 95 (func_arglist -> .)
    MINUS           reduce using rule 95 (func_arglist -> .)
    SIZEOF          reduce using rule 95 (func_arglist -> .)
    FLOAT_L         reduce using rule 95 (func_arglist -> .)
    INT_L           reduce using rule 95 (func_arglist -> .)
    CHAR_L          reduce using rule 95 (func_arglist -> .)
    STRING_L        reduce using rule 95 (func_arglist -> .)
    NONDECIMAL_L    reduce using rule 95 (func_arglist -> .)
    BITAND          reduce using rule 95 (func_arglist -> .)
    STRUCT          reduce using rule 95 (func_arglist -> .)

    func_arglist                   shift and go to state 164

state 101

    (163) init_var -> init_var_ls init_var_rs .

    INCLUDE         reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    DEFINE          reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    IFNDEF          reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    ENDIF           reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    error           reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    ELSE            reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    STRUCT          reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    CHAR            reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    DOUBLE          reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    FLOAT           reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    INT             reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    VOID            reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    INT8_T          reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    INT16_T         reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    INT32_T         reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    INT64_T         reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    UINT8_T         reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    UINT16_T        reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    UINT32_T        reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    UINT64_T        reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    ID              reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    SIZEOF          reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    LPAREN          reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    NEGATE          reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    MINUS           reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    RETURN          reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    WHILE           reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    IF              reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    FOR             reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    FLOAT_L         reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    INT_L           reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    CHAR_L          reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    STRING_L        reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    NONDECIMAL_L    reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    BITAND          reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    $end            reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    CONST           reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    EXTERN          reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    INLINE          reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    LONG            reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    SHORT           reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    SIGNED          reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    UNSIGNED        reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    VOLATILE        reduce using rule 163 (init_var -> init_var_ls init_var_rs .)
    RBRACE          reduce using rule 163 (init_var -> init_var_ls init_var_rs .)


state 102

    (156) init_var_rs -> name . SEMI
    (134) expression -> name . INCREMENT
    (100) access -> name . LBRACK name RBRACK
    (101) access -> name . LBRACK expression RBRACK
    (102) access -> name . MEMBER name
    (129) operand -> name .

    SEMI            shift and go to state 165
    INCREMENT       shift and go to state 119
    LBRACK          shift and go to state 121
    MEMBER          shift and go to state 122
    PLUS            reduce using rule 129 (operand -> name .)
    MINUS           reduce using rule 129 (operand -> name .)
    ASTERISK        reduce using rule 129 (operand -> name .)
    DIVIDE          reduce using rule 129 (operand -> name .)
    LSHIFT          reduce using rule 129 (operand -> name .)
    RSHIFT          reduce using rule 129 (operand -> name .)
    PERCENT         reduce using rule 129 (operand -> name .)
    BITAND          reduce using rule 129 (operand -> name .)
    BITOR           reduce using rule 129 (operand -> name .)
    EQ              reduce using rule 129 (operand -> name .)
    NEQ             reduce using rule 129 (operand -> name .)
    LT              reduce using rule 129 (operand -> name .)
    GT              reduce using rule 129 (operand -> name .)
    LE              reduce using rule 129 (operand -> name .)
    GE              reduce using rule 129 (operand -> name .)
    AND             reduce using rule 129 (operand -> name .)
    OR              reduce using rule 129 (operand -> name .)


state 103

    (157) init_var_rs -> func_call . SEMI
    (132) operand -> func_call .

    SEMI            shift and go to state 166
    PLUS            reduce using rule 132 (operand -> func_call .)
    MINUS           reduce using rule 132 (operand -> func_call .)
    ASTERISK        reduce using rule 132 (operand -> func_call .)
    DIVIDE          reduce using rule 132 (operand -> func_call .)
    LSHIFT          reduce using rule 132 (operand -> func_call .)
    RSHIFT          reduce using rule 132 (operand -> func_call .)
    PERCENT         reduce using rule 132 (operand -> func_call .)
    BITAND          reduce using rule 132 (operand -> func_call .)
    BITOR           reduce using rule 132 (operand -> func_call .)
    EQ              reduce using rule 132 (operand -> func_call .)
    NEQ             reduce using rule 132 (operand -> func_call .)
    LT              reduce using rule 132 (operand -> func_call .)
    GT              reduce using rule 132 (operand -> func_call .)
    LE              reduce using rule 132 (operand -> func_call .)
    GE              reduce using rule 132 (operand -> func_call .)
    AND             reduce using rule 132 (operand -> func_call .)
    OR              reduce using rule 132 (operand -> func_call .)


state 104

    (158) init_var_rs -> expression . SEMI
    (130) operand -> expression .

    SEMI            shift and go to state 167
    PLUS            reduce using rule 130 (operand -> expression .)
    MINUS           reduce using rule 130 (operand -> expression .)
    ASTERISK        reduce using rule 130 (operand -> expression .)
    DIVIDE          reduce using rule 130 (operand -> expression .)
    LSHIFT          reduce using rule 130 (operand -> expression .)
    RSHIFT          reduce using rule 130 (operand -> expression .)
    PERCENT         reduce using rule 130 (operand -> expression .)
    BITAND          reduce using rule 130 (operand -> expression .)
    BITOR           reduce using rule 130 (operand -> expression .)
    EQ              reduce using rule 130 (operand -> expression .)
    NEQ             reduce using rule 130 (operand -> expression .)
    LT              reduce using rule 130 (operand -> expression .)
    GT              reduce using rule 130 (operand -> expression .)
    LE              reduce using rule 130 (operand -> expression .)
    GE              reduce using rule 130 (operand -> expression .)
    AND             reduce using rule 130 (operand -> expression .)
    OR              reduce using rule 130 (operand -> expression .)


state 105

    (159) init_var_rs -> typecast_init .

    INCLUDE         reduce using rule 159 (init_var_rs -> typecast_init .)
    DEFINE          reduce using rule 159 (init_var_rs -> typecast_init .)
    IFNDEF          reduce using rule 159 (init_var_rs -> typecast_init .)
    ENDIF           reduce using rule 159 (init_var_rs -> typecast_init .)
    error           reduce using rule 159 (init_var_rs -> typecast_init .)
    ELSE            reduce using rule 159 (init_var_rs -> typecast_init .)
    STRUCT          reduce using rule 159 (init_var_rs -> typecast_init .)
    CHAR            reduce using rule 159 (init_var_rs -> typecast_init .)
    DOUBLE          reduce using rule 159 (init_var_rs -> typecast_init .)
    FLOAT           reduce using rule 159 (init_var_rs -> typecast_init .)
    INT             reduce using rule 159 (init_var_rs -> typecast_init .)
    VOID            reduce using rule 159 (init_var_rs -> typecast_init .)
    INT8_T          reduce using rule 159 (init_var_rs -> typecast_init .)
    INT16_T         reduce using rule 159 (init_var_rs -> typecast_init .)
    INT32_T         reduce using rule 159 (init_var_rs -> typecast_init .)
    INT64_T         reduce using rule 159 (init_var_rs -> typecast_init .)
    UINT8_T         reduce using rule 159 (init_var_rs -> typecast_init .)
    UINT16_T        reduce using rule 159 (init_var_rs -> typecast_init .)
    UINT32_T        reduce using rule 159 (init_var_rs -> typecast_init .)
    UINT64_T        reduce using rule 159 (init_var_rs -> typecast_init .)
    ID              reduce using rule 159 (init_var_rs -> typecast_init .)
    SIZEOF          reduce using rule 159 (init_var_rs -> typecast_init .)
    LPAREN          reduce using rule 159 (init_var_rs -> typecast_init .)
    NEGATE          reduce using rule 159 (init_var_rs -> typecast_init .)
    MINUS           reduce using rule 159 (init_var_rs -> typecast_init .)
    RETURN          reduce using rule 159 (init_var_rs -> typecast_init .)
    WHILE           reduce using rule 159 (init_var_rs -> typecast_init .)
    IF              reduce using rule 159 (init_var_rs -> typecast_init .)
    FOR             reduce using rule 159 (init_var_rs -> typecast_init .)
    FLOAT_L         reduce using rule 159 (init_var_rs -> typecast_init .)
    INT_L           reduce using rule 159 (init_var_rs -> typecast_init .)
    CHAR_L          reduce using rule 159 (init_var_rs -> typecast_init .)
    STRING_L        reduce using rule 159 (init_var_rs -> typecast_init .)
    NONDECIMAL_L    reduce using rule 159 (init_var_rs -> typecast_init .)
    BITAND          reduce using rule 159 (init_var_rs -> typecast_init .)
    $end            reduce using rule 159 (init_var_rs -> typecast_init .)
    CONST           reduce using rule 159 (init_var_rs -> typecast_init .)
    EXTERN          reduce using rule 159 (init_var_rs -> typecast_init .)
    INLINE          reduce using rule 159 (init_var_rs -> typecast_init .)
    LONG            reduce using rule 159 (init_var_rs -> typecast_init .)
    SHORT           reduce using rule 159 (init_var_rs -> typecast_init .)
    SIGNED          reduce using rule 159 (init_var_rs -> typecast_init .)
    UNSIGNED        reduce using rule 159 (init_var_rs -> typecast_init .)
    VOLATILE        reduce using rule 159 (init_var_rs -> typecast_init .)
    RBRACE          reduce using rule 159 (init_var_rs -> typecast_init .)


state 106

    (160) init_var_rs -> vector_init_rs .

    INCLUDE         reduce using rule 160 (init_var_rs -> vector_init_rs .)
    DEFINE          reduce using rule 160 (init_var_rs -> vector_init_rs .)
    IFNDEF          reduce using rule 160 (init_var_rs -> vector_init_rs .)
    ENDIF           reduce using rule 160 (init_var_rs -> vector_init_rs .)
    error           reduce using rule 160 (init_var_rs -> vector_init_rs .)
    ELSE            reduce using rule 160 (init_var_rs -> vector_init_rs .)
    STRUCT          reduce using rule 160 (init_var_rs -> vector_init_rs .)
    CHAR            reduce using rule 160 (init_var_rs -> vector_init_rs .)
    DOUBLE          reduce using rule 160 (init_var_rs -> vector_init_rs .)
    FLOAT           reduce using rule 160 (init_var_rs -> vector_init_rs .)
    INT             reduce using rule 160 (init_var_rs -> vector_init_rs .)
    VOID            reduce using rule 160 (init_var_rs -> vector_init_rs .)
    INT8_T          reduce using rule 160 (init_var_rs -> vector_init_rs .)
    INT16_T         reduce using rule 160 (init_var_rs -> vector_init_rs .)
    INT32_T         reduce using rule 160 (init_var_rs -> vector_init_rs .)
    INT64_T         reduce using rule 160 (init_var_rs -> vector_init_rs .)
    UINT8_T         reduce using rule 160 (init_var_rs -> vector_init_rs .)
    UINT16_T        reduce using rule 160 (init_var_rs -> vector_init_rs .)
    UINT32_T        reduce using rule 160 (init_var_rs -> vector_init_rs .)
    UINT64_T        reduce using rule 160 (init_var_rs -> vector_init_rs .)
    ID              reduce using rule 160 (init_var_rs -> vector_init_rs .)
    SIZEOF          reduce using rule 160 (init_var_rs -> vector_init_rs .)
    LPAREN          reduce using rule 160 (init_var_rs -> vector_init_rs .)
    NEGATE          reduce using rule 160 (init_var_rs -> vector_init_rs .)
    MINUS           reduce using rule 160 (init_var_rs -> vector_init_rs .)
    RETURN          reduce using rule 160 (init_var_rs -> vector_init_rs .)
    WHILE           reduce using rule 160 (init_var_rs -> vector_init_rs .)
    IF              reduce using rule 160 (init_var_rs -> vector_init_rs .)
    FOR             reduce using rule 160 (init_var_rs -> vector_init_rs .)
    FLOAT_L         reduce using rule 160 (init_var_rs -> vector_init_rs .)
    INT_L           reduce using rule 160 (init_var_rs -> vector_init_rs .)
    CHAR_L          reduce using rule 160 (init_var_rs -> vector_init_rs .)
    STRING_L        reduce using rule 160 (init_var_rs -> vector_init_rs .)
    NONDECIMAL_L    reduce using rule 160 (init_var_rs -> vector_init_rs .)
    BITAND          reduce using rule 160 (init_var_rs -> vector_init_rs .)
    $end            reduce using rule 160 (init_var_rs -> vector_init_rs .)
    CONST           reduce using rule 160 (init_var_rs -> vector_init_rs .)
    EXTERN          reduce using rule 160 (init_var_rs -> vector_init_rs .)
    INLINE          reduce using rule 160 (init_var_rs -> vector_init_rs .)
    LONG            reduce using rule 160 (init_var_rs -> vector_init_rs .)
    SHORT           reduce using rule 160 (init_var_rs -> vector_init_rs .)
    SIGNED          reduce using rule 160 (init_var_rs -> vector_init_rs .)
    UNSIGNED        reduce using rule 160 (init_var_rs -> vector_init_rs .)
    VOLATILE        reduce using rule 160 (init_var_rs -> vector_init_rs .)
    RBRACE          reduce using rule 160 (init_var_rs -> vector_init_rs .)


state 107

    (161) init_var_rs -> LPAREN . name RPAREN
    (113) expression -> LPAREN . expression RPAREN
    (114) expression -> LPAREN . name RPAREN
    (19) type_cast -> LPAREN . dtype RPAREN
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (113) expression -> . LPAREN expression RPAREN
    (114) expression -> . LPAREN name RPAREN
    (115) expression -> . NEGATE expression
    (116) expression -> . MINUS expression
    (117) expression -> . NEGATE name
    (118) expression -> . MINUS name
    (133) expression -> . operand binop operand
    (134) expression -> . name INCREMENT
    (30) dtype -> . CHAR
    (31) dtype -> . DOUBLE
    (32) dtype -> . FLOAT
    (33) dtype -> . INT
    (34) dtype -> . VOID
    (35) dtype -> . INT8_T
    (36) dtype -> . INT16_T
    (37) dtype -> . INT32_T
    (38) dtype -> . INT64_T
    (39) dtype -> . UINT8_T
    (40) dtype -> . UINT16_T
    (41) dtype -> . UINT32_T
    (42) dtype -> . UINT64_T
    (43) dtype -> . struct_type
    (44) dtype -> . dtype ASTERISK
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name
    (129) operand -> . name
    (130) operand -> . expression
    (131) operand -> . type_cast name
    (132) operand -> . func_call
    (18) struct_type -> . STRUCT name
    (19) type_cast -> . LPAREN dtype RPAREN
    (98) func_call -> . ID LPAREN func_arglist RPAREN
    (99) func_call -> . SIZEOF LPAREN func_arglist RPAREN

    ID              shift and go to state 71
    LPAREN          shift and go to state 17
    NEGATE          shift and go to state 49
    MINUS           shift and go to state 50
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 31
    FLOAT           shift and go to state 32
    INT             shift and go to state 33
    VOID            shift and go to state 34
    INT8_T          shift and go to state 35
    INT16_T         shift and go to state 36
    INT32_T         shift and go to state 37
    INT64_T         shift and go to state 38
    UINT8_T         shift and go to state 39
    UINT16_T        shift and go to state 40
    UINT32_T        shift and go to state 41
    UINT64_T        shift and go to state 42
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64
    STRUCT          shift and go to state 73
    SIZEOF          shift and go to state 44

    name                           shift and go to state 168
    expression                     shift and go to state 68
    dtype                          shift and go to state 70
    literal                        shift and go to state 57
    access                         shift and go to state 58
    operand                        shift and go to state 51
    struct_type                    shift and go to state 43
    type_cast                      shift and go to state 56
    func_call                      shift and go to state 72

state 108

    (162) init_var_rs -> error . SEMI

    SEMI            shift and go to state 169


state 109

    (155) typecast_init -> type_cast . init_var_rs
    (131) operand -> type_cast . name
    (156) init_var_rs -> . name SEMI
    (157) init_var_rs -> . func_call SEMI
    (158) init_var_rs -> . expression SEMI
    (159) init_var_rs -> . typecast_init
    (160) init_var_rs -> . vector_init_rs
    (161) init_var_rs -> . LPAREN name RPAREN
    (162) init_var_rs -> . error SEMI
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (98) func_call -> . ID LPAREN func_arglist RPAREN
    (99) func_call -> . SIZEOF LPAREN func_arglist RPAREN
    (113) expression -> . LPAREN expression RPAREN
    (114) expression -> . LPAREN name RPAREN
    (115) expression -> . NEGATE expression
    (116) expression -> . MINUS expression
    (117) expression -> . NEGATE name
    (118) expression -> . MINUS name
    (133) expression -> . operand binop operand
    (134) expression -> . name INCREMENT
    (155) typecast_init -> . type_cast init_var_rs
    (154) vector_init_rs -> . vector_body SEMI
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name
    (129) operand -> . name
    (130) operand -> . expression
    (131) operand -> . type_cast name
    (132) operand -> . func_call
    (19) type_cast -> . LPAREN dtype RPAREN
    (153) vector_body -> . LBRACE vec_item_list RBRACE

    LPAREN          shift and go to state 107
    error           shift and go to state 108
    ID              shift and go to state 71
    SIZEOF          shift and go to state 44
    NEGATE          shift and go to state 49
    MINUS           shift and go to state 50
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64
    LBRACE          shift and go to state 111

    type_cast                      shift and go to state 109
    init_var_rs                    shift and go to state 170
    name                           shift and go to state 171
    func_call                      shift and go to state 103
    expression                     shift and go to state 104
    typecast_init                  shift and go to state 105
    vector_init_rs                 shift and go to state 106
    literal                        shift and go to state 57
    access                         shift and go to state 58
    operand                        shift and go to state 51
    vector_body                    shift and go to state 110

state 110

    (154) vector_init_rs -> vector_body . SEMI

    SEMI            shift and go to state 172


state 111

    (153) vector_body -> LBRACE . vec_item_list RBRACE
    (150) vec_item_list -> .
    (151) vec_item_list -> . vec_item_list vector_item
    (152) vec_item_list -> . vec_item_list vector_item COMMA

    RBRACE          reduce using rule 150 (vec_item_list -> .)
    ID              reduce using rule 150 (vec_item_list -> .)
    SIZEOF          reduce using rule 150 (vec_item_list -> .)
    LBRACE          reduce using rule 150 (vec_item_list -> .)
    FLOAT_L         reduce using rule 150 (vec_item_list -> .)
    INT_L           reduce using rule 150 (vec_item_list -> .)
    CHAR_L          reduce using rule 150 (vec_item_list -> .)
    STRING_L        reduce using rule 150 (vec_item_list -> .)
    NONDECIMAL_L    reduce using rule 150 (vec_item_list -> .)
    BITAND          reduce using rule 150 (vec_item_list -> .)

    vec_item_list                  shift and go to state 173

state 112

    (166) assign_var -> assign_var_ls assign_var_rs .

    INCLUDE         reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    DEFINE          reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    IFNDEF          reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    ENDIF           reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    error           reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    ELSE            reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    STRUCT          reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    CHAR            reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    DOUBLE          reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    FLOAT           reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    INT             reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    VOID            reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    INT8_T          reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    INT16_T         reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    INT32_T         reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    INT64_T         reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    UINT8_T         reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    UINT16_T        reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    UINT32_T        reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    UINT64_T        reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    ID              reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    SIZEOF          reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    LPAREN          reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    NEGATE          reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    MINUS           reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    RETURN          reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    WHILE           reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    IF              reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    FOR             reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    FLOAT_L         reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    INT_L           reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    CHAR_L          reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    STRING_L        reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    NONDECIMAL_L    reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    BITAND          reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    $end            reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    CONST           reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    EXTERN          reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    INLINE          reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    LONG            reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    SHORT           reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    SIGNED          reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    UNSIGNED        reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    VOLATILE        reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)
    RBRACE          reduce using rule 166 (assign_var -> assign_var_ls assign_var_rs .)


state 113

    (165) assign_var_rs -> init_var_rs .

    INCLUDE         reduce using rule 165 (assign_var_rs -> init_var_rs .)
    DEFINE          reduce using rule 165 (assign_var_rs -> init_var_rs .)
    IFNDEF          reduce using rule 165 (assign_var_rs -> init_var_rs .)
    ENDIF           reduce using rule 165 (assign_var_rs -> init_var_rs .)
    error           reduce using rule 165 (assign_var_rs -> init_var_rs .)
    ELSE            reduce using rule 165 (assign_var_rs -> init_var_rs .)
    STRUCT          reduce using rule 165 (assign_var_rs -> init_var_rs .)
    CHAR            reduce using rule 165 (assign_var_rs -> init_var_rs .)
    DOUBLE          reduce using rule 165 (assign_var_rs -> init_var_rs .)
    FLOAT           reduce using rule 165 (assign_var_rs -> init_var_rs .)
    INT             reduce using rule 165 (assign_var_rs -> init_var_rs .)
    VOID            reduce using rule 165 (assign_var_rs -> init_var_rs .)
    INT8_T          reduce using rule 165 (assign_var_rs -> init_var_rs .)
    INT16_T         reduce using rule 165 (assign_var_rs -> init_var_rs .)
    INT32_T         reduce using rule 165 (assign_var_rs -> init_var_rs .)
    INT64_T         reduce using rule 165 (assign_var_rs -> init_var_rs .)
    UINT8_T         reduce using rule 165 (assign_var_rs -> init_var_rs .)
    UINT16_T        reduce using rule 165 (assign_var_rs -> init_var_rs .)
    UINT32_T        reduce using rule 165 (assign_var_rs -> init_var_rs .)
    UINT64_T        reduce using rule 165 (assign_var_rs -> init_var_rs .)
    ID              reduce using rule 165 (assign_var_rs -> init_var_rs .)
    SIZEOF          reduce using rule 165 (assign_var_rs -> init_var_rs .)
    LPAREN          reduce using rule 165 (assign_var_rs -> init_var_rs .)
    NEGATE          reduce using rule 165 (assign_var_rs -> init_var_rs .)
    MINUS           reduce using rule 165 (assign_var_rs -> init_var_rs .)
    RETURN          reduce using rule 165 (assign_var_rs -> init_var_rs .)
    WHILE           reduce using rule 165 (assign_var_rs -> init_var_rs .)
    IF              reduce using rule 165 (assign_var_rs -> init_var_rs .)
    FOR             reduce using rule 165 (assign_var_rs -> init_var_rs .)
    FLOAT_L         reduce using rule 165 (assign_var_rs -> init_var_rs .)
    INT_L           reduce using rule 165 (assign_var_rs -> init_var_rs .)
    CHAR_L          reduce using rule 165 (assign_var_rs -> init_var_rs .)
    STRING_L        reduce using rule 165 (assign_var_rs -> init_var_rs .)
    NONDECIMAL_L    reduce using rule 165 (assign_var_rs -> init_var_rs .)
    BITAND          reduce using rule 165 (assign_var_rs -> init_var_rs .)
    $end            reduce using rule 165 (assign_var_rs -> init_var_rs .)
    CONST           reduce using rule 165 (assign_var_rs -> init_var_rs .)
    EXTERN          reduce using rule 165 (assign_var_rs -> init_var_rs .)
    INLINE          reduce using rule 165 (assign_var_rs -> init_var_rs .)
    LONG            reduce using rule 165 (assign_var_rs -> init_var_rs .)
    SHORT           reduce using rule 165 (assign_var_rs -> init_var_rs .)
    SIGNED          reduce using rule 165 (assign_var_rs -> init_var_rs .)
    UNSIGNED        reduce using rule 165 (assign_var_rs -> init_var_rs .)
    VOLATILE        reduce using rule 165 (assign_var_rs -> init_var_rs .)
    RBRACE          reduce using rule 165 (assign_var_rs -> init_var_rs .)


state 114

    (140) declare_var -> declare_var_ls SEMI .

    INCLUDE         reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    DEFINE          reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    IFNDEF          reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    ENDIF           reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    error           reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    ELSE            reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    STRUCT          reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    CHAR            reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    DOUBLE          reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    FLOAT           reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    INT             reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    VOID            reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    INT8_T          reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    INT16_T         reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    INT32_T         reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    INT64_T         reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    UINT8_T         reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    UINT16_T        reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    UINT32_T        reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    UINT64_T        reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    ID              reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    SIZEOF          reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    LPAREN          reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    NEGATE          reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    MINUS           reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    RETURN          reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    WHILE           reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    IF              reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    FOR             reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    FLOAT_L         reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    INT_L           reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    CHAR_L          reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    STRING_L        reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    NONDECIMAL_L    reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    BITAND          reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    $end            reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    CONST           reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    EXTERN          reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    INLINE          reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    LONG            reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    SHORT           reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    SIGNED          reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    UNSIGNED        reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    VOLATILE        reduce using rule 140 (declare_var -> declare_var_ls SEMI .)
    RBRACE          reduce using rule 140 (declare_var -> declare_var_ls SEMI .)


state 115

    (145) init_var_ls -> declare_var_ls assign .

    LPAREN          reduce using rule 145 (init_var_ls -> declare_var_ls assign .)
    error           reduce using rule 145 (init_var_ls -> declare_var_ls assign .)
    ID              reduce using rule 145 (init_var_ls -> declare_var_ls assign .)
    SIZEOF          reduce using rule 145 (init_var_ls -> declare_var_ls assign .)
    NEGATE          reduce using rule 145 (init_var_ls -> declare_var_ls assign .)
    MINUS           reduce using rule 145 (init_var_ls -> declare_var_ls assign .)
    FLOAT_L         reduce using rule 145 (init_var_ls -> declare_var_ls assign .)
    INT_L           reduce using rule 145 (init_var_ls -> declare_var_ls assign .)
    CHAR_L          reduce using rule 145 (init_var_ls -> declare_var_ls assign .)
    STRING_L        reduce using rule 145 (init_var_ls -> declare_var_ls assign .)
    NONDECIMAL_L    reduce using rule 145 (init_var_ls -> declare_var_ls assign .)
    BITAND          reduce using rule 145 (init_var_ls -> declare_var_ls assign .)
    LBRACE          reduce using rule 145 (init_var_ls -> declare_var_ls assign .)


state 116

    (146) init_var_ls -> declare_var_ls vector_init_list . assign
    (144) vector_init_list -> vector_init_list . vector_init
    (16) assign -> . SIMPLE_ASSIGN
    (17) assign -> . COMPLEX_ASSIGN
    (141) vector_init -> . LBRACK RBRACK
    (142) vector_init -> . LBRACK name RBRACK

    SIMPLE_ASSIGN   shift and go to state 117
    COMPLEX_ASSIGN  shift and go to state 118
    LBRACK          shift and go to state 176

    assign                         shift and go to state 174
    vector_init                    shift and go to state 175

state 117

    (16) assign -> SIMPLE_ASSIGN .

    LPAREN          reduce using rule 16 (assign -> SIMPLE_ASSIGN .)
    error           reduce using rule 16 (assign -> SIMPLE_ASSIGN .)
    ID              reduce using rule 16 (assign -> SIMPLE_ASSIGN .)
    SIZEOF          reduce using rule 16 (assign -> SIMPLE_ASSIGN .)
    NEGATE          reduce using rule 16 (assign -> SIMPLE_ASSIGN .)
    MINUS           reduce using rule 16 (assign -> SIMPLE_ASSIGN .)
    FLOAT_L         reduce using rule 16 (assign -> SIMPLE_ASSIGN .)
    INT_L           reduce using rule 16 (assign -> SIMPLE_ASSIGN .)
    CHAR_L          reduce using rule 16 (assign -> SIMPLE_ASSIGN .)
    STRING_L        reduce using rule 16 (assign -> SIMPLE_ASSIGN .)
    NONDECIMAL_L    reduce using rule 16 (assign -> SIMPLE_ASSIGN .)
    BITAND          reduce using rule 16 (assign -> SIMPLE_ASSIGN .)
    LBRACE          reduce using rule 16 (assign -> SIMPLE_ASSIGN .)


state 118

    (17) assign -> COMPLEX_ASSIGN .

    LPAREN          reduce using rule 17 (assign -> COMPLEX_ASSIGN .)
    error           reduce using rule 17 (assign -> COMPLEX_ASSIGN .)
    ID              reduce using rule 17 (assign -> COMPLEX_ASSIGN .)
    SIZEOF          reduce using rule 17 (assign -> COMPLEX_ASSIGN .)
    NEGATE          reduce using rule 17 (assign -> COMPLEX_ASSIGN .)
    MINUS           reduce using rule 17 (assign -> COMPLEX_ASSIGN .)
    FLOAT_L         reduce using rule 17 (assign -> COMPLEX_ASSIGN .)
    INT_L           reduce using rule 17 (assign -> COMPLEX_ASSIGN .)
    CHAR_L          reduce using rule 17 (assign -> COMPLEX_ASSIGN .)
    STRING_L        reduce using rule 17 (assign -> COMPLEX_ASSIGN .)
    NONDECIMAL_L    reduce using rule 17 (assign -> COMPLEX_ASSIGN .)
    BITAND          reduce using rule 17 (assign -> COMPLEX_ASSIGN .)
    LBRACE          reduce using rule 17 (assign -> COMPLEX_ASSIGN .)


state 119

    (134) expression -> name INCREMENT .

    SEMI            reduce using rule 134 (expression -> name INCREMENT .)
    PLUS            reduce using rule 134 (expression -> name INCREMENT .)
    MINUS           reduce using rule 134 (expression -> name INCREMENT .)
    ASTERISK        reduce using rule 134 (expression -> name INCREMENT .)
    DIVIDE          reduce using rule 134 (expression -> name INCREMENT .)
    LSHIFT          reduce using rule 134 (expression -> name INCREMENT .)
    RSHIFT          reduce using rule 134 (expression -> name INCREMENT .)
    PERCENT         reduce using rule 134 (expression -> name INCREMENT .)
    BITAND          reduce using rule 134 (expression -> name INCREMENT .)
    BITOR           reduce using rule 134 (expression -> name INCREMENT .)
    EQ              reduce using rule 134 (expression -> name INCREMENT .)
    NEQ             reduce using rule 134 (expression -> name INCREMENT .)
    LT              reduce using rule 134 (expression -> name INCREMENT .)
    GT              reduce using rule 134 (expression -> name INCREMENT .)
    LE              reduce using rule 134 (expression -> name INCREMENT .)
    GE              reduce using rule 134 (expression -> name INCREMENT .)
    AND             reduce using rule 134 (expression -> name INCREMENT .)
    OR              reduce using rule 134 (expression -> name INCREMENT .)
    RPAREN          reduce using rule 134 (expression -> name INCREMENT .)
    RBRACK          reduce using rule 134 (expression -> name INCREMENT .)
    COMMA           reduce using rule 134 (expression -> name INCREMENT .)
    ID              reduce using rule 134 (expression -> name INCREMENT .)
    CHAR            reduce using rule 134 (expression -> name INCREMENT .)
    DOUBLE          reduce using rule 134 (expression -> name INCREMENT .)
    FLOAT           reduce using rule 134 (expression -> name INCREMENT .)
    INT             reduce using rule 134 (expression -> name INCREMENT .)
    VOID            reduce using rule 134 (expression -> name INCREMENT .)
    INT8_T          reduce using rule 134 (expression -> name INCREMENT .)
    INT16_T         reduce using rule 134 (expression -> name INCREMENT .)
    INT32_T         reduce using rule 134 (expression -> name INCREMENT .)
    INT64_T         reduce using rule 134 (expression -> name INCREMENT .)
    UINT8_T         reduce using rule 134 (expression -> name INCREMENT .)
    UINT16_T        reduce using rule 134 (expression -> name INCREMENT .)
    UINT32_T        reduce using rule 134 (expression -> name INCREMENT .)
    UINT64_T        reduce using rule 134 (expression -> name INCREMENT .)
    LPAREN          reduce using rule 134 (expression -> name INCREMENT .)
    NEGATE          reduce using rule 134 (expression -> name INCREMENT .)
    SIZEOF          reduce using rule 134 (expression -> name INCREMENT .)
    FLOAT_L         reduce using rule 134 (expression -> name INCREMENT .)
    INT_L           reduce using rule 134 (expression -> name INCREMENT .)
    CHAR_L          reduce using rule 134 (expression -> name INCREMENT .)
    STRING_L        reduce using rule 134 (expression -> name INCREMENT .)
    NONDECIMAL_L    reduce using rule 134 (expression -> name INCREMENT .)
    STRUCT          reduce using rule 134 (expression -> name INCREMENT .)


state 120

    (164) assign_var_ls -> name assign .

    LPAREN          reduce using rule 164 (assign_var_ls -> name assign .)
    error           reduce using rule 164 (assign_var_ls -> name assign .)
    ID              reduce using rule 164 (assign_var_ls -> name assign .)
    SIZEOF          reduce using rule 164 (assign_var_ls -> name assign .)
    NEGATE          reduce using rule 164 (assign_var_ls -> name assign .)
    MINUS           reduce using rule 164 (assign_var_ls -> name assign .)
    FLOAT_L         reduce using rule 164 (assign_var_ls -> name assign .)
    INT_L           reduce using rule 164 (assign_var_ls -> name assign .)
    CHAR_L          reduce using rule 164 (assign_var_ls -> name assign .)
    STRING_L        reduce using rule 164 (assign_var_ls -> name assign .)
    NONDECIMAL_L    reduce using rule 164 (assign_var_ls -> name assign .)
    BITAND          reduce using rule 164 (assign_var_ls -> name assign .)
    LBRACE          reduce using rule 164 (assign_var_ls -> name assign .)


state 121

    (100) access -> name LBRACK . name RBRACK
    (101) access -> name LBRACK . expression RBRACK
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (113) expression -> . LPAREN expression RPAREN
    (114) expression -> . LPAREN name RPAREN
    (115) expression -> . NEGATE expression
    (116) expression -> . MINUS expression
    (117) expression -> . NEGATE name
    (118) expression -> . MINUS name
    (133) expression -> . operand binop operand
    (134) expression -> . name INCREMENT
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name
    (129) operand -> . name
    (130) operand -> . expression
    (131) operand -> . type_cast name
    (132) operand -> . func_call
    (19) type_cast -> . LPAREN dtype RPAREN
    (98) func_call -> . ID LPAREN func_arglist RPAREN
    (99) func_call -> . SIZEOF LPAREN func_arglist RPAREN

    ID              shift and go to state 71
    LPAREN          shift and go to state 17
    NEGATE          shift and go to state 49
    MINUS           shift and go to state 50
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64
    SIZEOF          shift and go to state 44

    name                           shift and go to state 177
    expression                     shift and go to state 178
    literal                        shift and go to state 57
    access                         shift and go to state 58
    operand                        shift and go to state 51
    type_cast                      shift and go to state 56
    func_call                      shift and go to state 72

state 122

    (102) access -> name MEMBER . name
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name

    ID              shift and go to state 150
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64

    name                           shift and go to state 179
    literal                        shift and go to state 57
    access                         shift and go to state 58

state 123

    (115) expression -> NEGATE expression .
    (130) operand -> expression .

  ! reduce/reduce conflict for PLUS resolved using rule 115 (expression -> NEGATE expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 115 (expression -> NEGATE expression .)
  ! reduce/reduce conflict for ASTERISK resolved using rule 115 (expression -> NEGATE expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 115 (expression -> NEGATE expression .)
  ! reduce/reduce conflict for LSHIFT resolved using rule 115 (expression -> NEGATE expression .)
  ! reduce/reduce conflict for RSHIFT resolved using rule 115 (expression -> NEGATE expression .)
  ! reduce/reduce conflict for PERCENT resolved using rule 115 (expression -> NEGATE expression .)
  ! reduce/reduce conflict for BITAND resolved using rule 115 (expression -> NEGATE expression .)
  ! reduce/reduce conflict for BITOR resolved using rule 115 (expression -> NEGATE expression .)
  ! reduce/reduce conflict for EQ resolved using rule 115 (expression -> NEGATE expression .)
  ! reduce/reduce conflict for NEQ resolved using rule 115 (expression -> NEGATE expression .)
  ! reduce/reduce conflict for LT resolved using rule 115 (expression -> NEGATE expression .)
  ! reduce/reduce conflict for GT resolved using rule 115 (expression -> NEGATE expression .)
  ! reduce/reduce conflict for LE resolved using rule 115 (expression -> NEGATE expression .)
  ! reduce/reduce conflict for GE resolved using rule 115 (expression -> NEGATE expression .)
  ! reduce/reduce conflict for AND resolved using rule 115 (expression -> NEGATE expression .)
  ! reduce/reduce conflict for OR resolved using rule 115 (expression -> NEGATE expression .)
    SEMI            reduce using rule 115 (expression -> NEGATE expression .)
    PLUS            reduce using rule 115 (expression -> NEGATE expression .)
    MINUS           reduce using rule 115 (expression -> NEGATE expression .)
    ASTERISK        reduce using rule 115 (expression -> NEGATE expression .)
    DIVIDE          reduce using rule 115 (expression -> NEGATE expression .)
    LSHIFT          reduce using rule 115 (expression -> NEGATE expression .)
    RSHIFT          reduce using rule 115 (expression -> NEGATE expression .)
    PERCENT         reduce using rule 115 (expression -> NEGATE expression .)
    BITAND          reduce using rule 115 (expression -> NEGATE expression .)
    BITOR           reduce using rule 115 (expression -> NEGATE expression .)
    EQ              reduce using rule 115 (expression -> NEGATE expression .)
    NEQ             reduce using rule 115 (expression -> NEGATE expression .)
    LT              reduce using rule 115 (expression -> NEGATE expression .)
    GT              reduce using rule 115 (expression -> NEGATE expression .)
    LE              reduce using rule 115 (expression -> NEGATE expression .)
    GE              reduce using rule 115 (expression -> NEGATE expression .)
    AND             reduce using rule 115 (expression -> NEGATE expression .)
    OR              reduce using rule 115 (expression -> NEGATE expression .)
    RPAREN          reduce using rule 115 (expression -> NEGATE expression .)
    RBRACK          reduce using rule 115 (expression -> NEGATE expression .)
    COMMA           reduce using rule 115 (expression -> NEGATE expression .)
    ID              reduce using rule 115 (expression -> NEGATE expression .)
    CHAR            reduce using rule 115 (expression -> NEGATE expression .)
    DOUBLE          reduce using rule 115 (expression -> NEGATE expression .)
    FLOAT           reduce using rule 115 (expression -> NEGATE expression .)
    INT             reduce using rule 115 (expression -> NEGATE expression .)
    VOID            reduce using rule 115 (expression -> NEGATE expression .)
    INT8_T          reduce using rule 115 (expression -> NEGATE expression .)
    INT16_T         reduce using rule 115 (expression -> NEGATE expression .)
    INT32_T         reduce using rule 115 (expression -> NEGATE expression .)
    INT64_T         reduce using rule 115 (expression -> NEGATE expression .)
    UINT8_T         reduce using rule 115 (expression -> NEGATE expression .)
    UINT16_T        reduce using rule 115 (expression -> NEGATE expression .)
    UINT32_T        reduce using rule 115 (expression -> NEGATE expression .)
    UINT64_T        reduce using rule 115 (expression -> NEGATE expression .)
    LPAREN          reduce using rule 115 (expression -> NEGATE expression .)
    NEGATE          reduce using rule 115 (expression -> NEGATE expression .)
    SIZEOF          reduce using rule 115 (expression -> NEGATE expression .)
    FLOAT_L         reduce using rule 115 (expression -> NEGATE expression .)
    INT_L           reduce using rule 115 (expression -> NEGATE expression .)
    CHAR_L          reduce using rule 115 (expression -> NEGATE expression .)
    STRING_L        reduce using rule 115 (expression -> NEGATE expression .)
    NONDECIMAL_L    reduce using rule 115 (expression -> NEGATE expression .)
    STRUCT          reduce using rule 115 (expression -> NEGATE expression .)

  ! PLUS            [ reduce using rule 130 (operand -> expression .) ]
  ! MINUS           [ reduce using rule 130 (operand -> expression .) ]
  ! ASTERISK        [ reduce using rule 130 (operand -> expression .) ]
  ! DIVIDE          [ reduce using rule 130 (operand -> expression .) ]
  ! LSHIFT          [ reduce using rule 130 (operand -> expression .) ]
  ! RSHIFT          [ reduce using rule 130 (operand -> expression .) ]
  ! PERCENT         [ reduce using rule 130 (operand -> expression .) ]
  ! BITAND          [ reduce using rule 130 (operand -> expression .) ]
  ! BITOR           [ reduce using rule 130 (operand -> expression .) ]
  ! EQ              [ reduce using rule 130 (operand -> expression .) ]
  ! NEQ             [ reduce using rule 130 (operand -> expression .) ]
  ! LT              [ reduce using rule 130 (operand -> expression .) ]
  ! GT              [ reduce using rule 130 (operand -> expression .) ]
  ! LE              [ reduce using rule 130 (operand -> expression .) ]
  ! GE              [ reduce using rule 130 (operand -> expression .) ]
  ! AND             [ reduce using rule 130 (operand -> expression .) ]
  ! OR              [ reduce using rule 130 (operand -> expression .) ]


state 124

    (117) expression -> NEGATE name .
    (134) expression -> name . INCREMENT
    (129) operand -> name .
    (100) access -> name . LBRACK name RBRACK
    (101) access -> name . LBRACK expression RBRACK
    (102) access -> name . MEMBER name

  ! reduce/reduce conflict for PLUS resolved using rule 117 (expression -> NEGATE name .)
  ! reduce/reduce conflict for MINUS resolved using rule 117 (expression -> NEGATE name .)
  ! reduce/reduce conflict for ASTERISK resolved using rule 117 (expression -> NEGATE name .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 117 (expression -> NEGATE name .)
  ! reduce/reduce conflict for LSHIFT resolved using rule 117 (expression -> NEGATE name .)
  ! reduce/reduce conflict for RSHIFT resolved using rule 117 (expression -> NEGATE name .)
  ! reduce/reduce conflict for PERCENT resolved using rule 117 (expression -> NEGATE name .)
  ! reduce/reduce conflict for BITAND resolved using rule 117 (expression -> NEGATE name .)
  ! reduce/reduce conflict for BITOR resolved using rule 117 (expression -> NEGATE name .)
  ! reduce/reduce conflict for EQ resolved using rule 117 (expression -> NEGATE name .)
  ! reduce/reduce conflict for NEQ resolved using rule 117 (expression -> NEGATE name .)
  ! reduce/reduce conflict for LT resolved using rule 117 (expression -> NEGATE name .)
  ! reduce/reduce conflict for GT resolved using rule 117 (expression -> NEGATE name .)
  ! reduce/reduce conflict for LE resolved using rule 117 (expression -> NEGATE name .)
  ! reduce/reduce conflict for GE resolved using rule 117 (expression -> NEGATE name .)
  ! reduce/reduce conflict for AND resolved using rule 117 (expression -> NEGATE name .)
  ! reduce/reduce conflict for OR resolved using rule 117 (expression -> NEGATE name .)
    SEMI            reduce using rule 117 (expression -> NEGATE name .)
    PLUS            reduce using rule 117 (expression -> NEGATE name .)
    MINUS           reduce using rule 117 (expression -> NEGATE name .)
    ASTERISK        reduce using rule 117 (expression -> NEGATE name .)
    DIVIDE          reduce using rule 117 (expression -> NEGATE name .)
    LSHIFT          reduce using rule 117 (expression -> NEGATE name .)
    RSHIFT          reduce using rule 117 (expression -> NEGATE name .)
    PERCENT         reduce using rule 117 (expression -> NEGATE name .)
    BITAND          reduce using rule 117 (expression -> NEGATE name .)
    BITOR           reduce using rule 117 (expression -> NEGATE name .)
    EQ              reduce using rule 117 (expression -> NEGATE name .)
    NEQ             reduce using rule 117 (expression -> NEGATE name .)
    LT              reduce using rule 117 (expression -> NEGATE name .)
    GT              reduce using rule 117 (expression -> NEGATE name .)
    LE              reduce using rule 117 (expression -> NEGATE name .)
    GE              reduce using rule 117 (expression -> NEGATE name .)
    AND             reduce using rule 117 (expression -> NEGATE name .)
    OR              reduce using rule 117 (expression -> NEGATE name .)
    RPAREN          reduce using rule 117 (expression -> NEGATE name .)
    RBRACK          reduce using rule 117 (expression -> NEGATE name .)
    COMMA           reduce using rule 117 (expression -> NEGATE name .)
    ID              reduce using rule 117 (expression -> NEGATE name .)
    CHAR            reduce using rule 117 (expression -> NEGATE name .)
    DOUBLE          reduce using rule 117 (expression -> NEGATE name .)
    FLOAT           reduce using rule 117 (expression -> NEGATE name .)
    INT             reduce using rule 117 (expression -> NEGATE name .)
    VOID            reduce using rule 117 (expression -> NEGATE name .)
    INT8_T          reduce using rule 117 (expression -> NEGATE name .)
    INT16_T         reduce using rule 117 (expression -> NEGATE name .)
    INT32_T         reduce using rule 117 (expression -> NEGATE name .)
    INT64_T         reduce using rule 117 (expression -> NEGATE name .)
    UINT8_T         reduce using rule 117 (expression -> NEGATE name .)
    UINT16_T        reduce using rule 117 (expression -> NEGATE name .)
    UINT32_T        reduce using rule 117 (expression -> NEGATE name .)
    UINT64_T        reduce using rule 117 (expression -> NEGATE name .)
    LPAREN          reduce using rule 117 (expression -> NEGATE name .)
    NEGATE          reduce using rule 117 (expression -> NEGATE name .)
    SIZEOF          reduce using rule 117 (expression -> NEGATE name .)
    FLOAT_L         reduce using rule 117 (expression -> NEGATE name .)
    INT_L           reduce using rule 117 (expression -> NEGATE name .)
    CHAR_L          reduce using rule 117 (expression -> NEGATE name .)
    STRING_L        reduce using rule 117 (expression -> NEGATE name .)
    NONDECIMAL_L    reduce using rule 117 (expression -> NEGATE name .)
    STRUCT          reduce using rule 117 (expression -> NEGATE name .)
    INCREMENT       shift and go to state 119
    LBRACK          shift and go to state 121
    MEMBER          shift and go to state 122

  ! PLUS            [ reduce using rule 129 (operand -> name .) ]
  ! MINUS           [ reduce using rule 129 (operand -> name .) ]
  ! ASTERISK        [ reduce using rule 129 (operand -> name .) ]
  ! DIVIDE          [ reduce using rule 129 (operand -> name .) ]
  ! LSHIFT          [ reduce using rule 129 (operand -> name .) ]
  ! RSHIFT          [ reduce using rule 129 (operand -> name .) ]
  ! PERCENT         [ reduce using rule 129 (operand -> name .) ]
  ! BITAND          [ reduce using rule 129 (operand -> name .) ]
  ! BITOR           [ reduce using rule 129 (operand -> name .) ]
  ! EQ              [ reduce using rule 129 (operand -> name .) ]
  ! NEQ             [ reduce using rule 129 (operand -> name .) ]
  ! LT              [ reduce using rule 129 (operand -> name .) ]
  ! GT              [ reduce using rule 129 (operand -> name .) ]
  ! LE              [ reduce using rule 129 (operand -> name .) ]
  ! GE              [ reduce using rule 129 (operand -> name .) ]
  ! AND             [ reduce using rule 129 (operand -> name .) ]
  ! OR              [ reduce using rule 129 (operand -> name .) ]


state 125

    (116) expression -> MINUS expression .
    (130) operand -> expression .

  ! reduce/reduce conflict for PLUS resolved using rule 116 (expression -> MINUS expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 116 (expression -> MINUS expression .)
  ! reduce/reduce conflict for ASTERISK resolved using rule 116 (expression -> MINUS expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 116 (expression -> MINUS expression .)
  ! reduce/reduce conflict for LSHIFT resolved using rule 116 (expression -> MINUS expression .)
  ! reduce/reduce conflict for RSHIFT resolved using rule 116 (expression -> MINUS expression .)
  ! reduce/reduce conflict for PERCENT resolved using rule 116 (expression -> MINUS expression .)
  ! reduce/reduce conflict for BITAND resolved using rule 116 (expression -> MINUS expression .)
  ! reduce/reduce conflict for BITOR resolved using rule 116 (expression -> MINUS expression .)
  ! reduce/reduce conflict for EQ resolved using rule 116 (expression -> MINUS expression .)
  ! reduce/reduce conflict for NEQ resolved using rule 116 (expression -> MINUS expression .)
  ! reduce/reduce conflict for LT resolved using rule 116 (expression -> MINUS expression .)
  ! reduce/reduce conflict for GT resolved using rule 116 (expression -> MINUS expression .)
  ! reduce/reduce conflict for LE resolved using rule 116 (expression -> MINUS expression .)
  ! reduce/reduce conflict for GE resolved using rule 116 (expression -> MINUS expression .)
  ! reduce/reduce conflict for AND resolved using rule 116 (expression -> MINUS expression .)
  ! reduce/reduce conflict for OR resolved using rule 116 (expression -> MINUS expression .)
    SEMI            reduce using rule 116 (expression -> MINUS expression .)
    PLUS            reduce using rule 116 (expression -> MINUS expression .)
    MINUS           reduce using rule 116 (expression -> MINUS expression .)
    ASTERISK        reduce using rule 116 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 116 (expression -> MINUS expression .)
    LSHIFT          reduce using rule 116 (expression -> MINUS expression .)
    RSHIFT          reduce using rule 116 (expression -> MINUS expression .)
    PERCENT         reduce using rule 116 (expression -> MINUS expression .)
    BITAND          reduce using rule 116 (expression -> MINUS expression .)
    BITOR           reduce using rule 116 (expression -> MINUS expression .)
    EQ              reduce using rule 116 (expression -> MINUS expression .)
    NEQ             reduce using rule 116 (expression -> MINUS expression .)
    LT              reduce using rule 116 (expression -> MINUS expression .)
    GT              reduce using rule 116 (expression -> MINUS expression .)
    LE              reduce using rule 116 (expression -> MINUS expression .)
    GE              reduce using rule 116 (expression -> MINUS expression .)
    AND             reduce using rule 116 (expression -> MINUS expression .)
    OR              reduce using rule 116 (expression -> MINUS expression .)
    RPAREN          reduce using rule 116 (expression -> MINUS expression .)
    RBRACK          reduce using rule 116 (expression -> MINUS expression .)
    COMMA           reduce using rule 116 (expression -> MINUS expression .)
    ID              reduce using rule 116 (expression -> MINUS expression .)
    CHAR            reduce using rule 116 (expression -> MINUS expression .)
    DOUBLE          reduce using rule 116 (expression -> MINUS expression .)
    FLOAT           reduce using rule 116 (expression -> MINUS expression .)
    INT             reduce using rule 116 (expression -> MINUS expression .)
    VOID            reduce using rule 116 (expression -> MINUS expression .)
    INT8_T          reduce using rule 116 (expression -> MINUS expression .)
    INT16_T         reduce using rule 116 (expression -> MINUS expression .)
    INT32_T         reduce using rule 116 (expression -> MINUS expression .)
    INT64_T         reduce using rule 116 (expression -> MINUS expression .)
    UINT8_T         reduce using rule 116 (expression -> MINUS expression .)
    UINT16_T        reduce using rule 116 (expression -> MINUS expression .)
    UINT32_T        reduce using rule 116 (expression -> MINUS expression .)
    UINT64_T        reduce using rule 116 (expression -> MINUS expression .)
    LPAREN          reduce using rule 116 (expression -> MINUS expression .)
    NEGATE          reduce using rule 116 (expression -> MINUS expression .)
    SIZEOF          reduce using rule 116 (expression -> MINUS expression .)
    FLOAT_L         reduce using rule 116 (expression -> MINUS expression .)
    INT_L           reduce using rule 116 (expression -> MINUS expression .)
    CHAR_L          reduce using rule 116 (expression -> MINUS expression .)
    STRING_L        reduce using rule 116 (expression -> MINUS expression .)
    NONDECIMAL_L    reduce using rule 116 (expression -> MINUS expression .)
    STRUCT          reduce using rule 116 (expression -> MINUS expression .)

  ! PLUS            [ reduce using rule 130 (operand -> expression .) ]
  ! MINUS           [ reduce using rule 130 (operand -> expression .) ]
  ! ASTERISK        [ reduce using rule 130 (operand -> expression .) ]
  ! DIVIDE          [ reduce using rule 130 (operand -> expression .) ]
  ! LSHIFT          [ reduce using rule 130 (operand -> expression .) ]
  ! RSHIFT          [ reduce using rule 130 (operand -> expression .) ]
  ! PERCENT         [ reduce using rule 130 (operand -> expression .) ]
  ! BITAND          [ reduce using rule 130 (operand -> expression .) ]
  ! BITOR           [ reduce using rule 130 (operand -> expression .) ]
  ! EQ              [ reduce using rule 130 (operand -> expression .) ]
  ! NEQ             [ reduce using rule 130 (operand -> expression .) ]
  ! LT              [ reduce using rule 130 (operand -> expression .) ]
  ! GT              [ reduce using rule 130 (operand -> expression .) ]
  ! LE              [ reduce using rule 130 (operand -> expression .) ]
  ! GE              [ reduce using rule 130 (operand -> expression .) ]
  ! AND             [ reduce using rule 130 (operand -> expression .) ]
  ! OR              [ reduce using rule 130 (operand -> expression .) ]


state 126

    (118) expression -> MINUS name .
    (134) expression -> name . INCREMENT
    (129) operand -> name .
    (100) access -> name . LBRACK name RBRACK
    (101) access -> name . LBRACK expression RBRACK
    (102) access -> name . MEMBER name

  ! reduce/reduce conflict for PLUS resolved using rule 118 (expression -> MINUS name .)
  ! reduce/reduce conflict for MINUS resolved using rule 118 (expression -> MINUS name .)
  ! reduce/reduce conflict for ASTERISK resolved using rule 118 (expression -> MINUS name .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 118 (expression -> MINUS name .)
  ! reduce/reduce conflict for LSHIFT resolved using rule 118 (expression -> MINUS name .)
  ! reduce/reduce conflict for RSHIFT resolved using rule 118 (expression -> MINUS name .)
  ! reduce/reduce conflict for PERCENT resolved using rule 118 (expression -> MINUS name .)
  ! reduce/reduce conflict for BITAND resolved using rule 118 (expression -> MINUS name .)
  ! reduce/reduce conflict for BITOR resolved using rule 118 (expression -> MINUS name .)
  ! reduce/reduce conflict for EQ resolved using rule 118 (expression -> MINUS name .)
  ! reduce/reduce conflict for NEQ resolved using rule 118 (expression -> MINUS name .)
  ! reduce/reduce conflict for LT resolved using rule 118 (expression -> MINUS name .)
  ! reduce/reduce conflict for GT resolved using rule 118 (expression -> MINUS name .)
  ! reduce/reduce conflict for LE resolved using rule 118 (expression -> MINUS name .)
  ! reduce/reduce conflict for GE resolved using rule 118 (expression -> MINUS name .)
  ! reduce/reduce conflict for AND resolved using rule 118 (expression -> MINUS name .)
  ! reduce/reduce conflict for OR resolved using rule 118 (expression -> MINUS name .)
    SEMI            reduce using rule 118 (expression -> MINUS name .)
    PLUS            reduce using rule 118 (expression -> MINUS name .)
    MINUS           reduce using rule 118 (expression -> MINUS name .)
    ASTERISK        reduce using rule 118 (expression -> MINUS name .)
    DIVIDE          reduce using rule 118 (expression -> MINUS name .)
    LSHIFT          reduce using rule 118 (expression -> MINUS name .)
    RSHIFT          reduce using rule 118 (expression -> MINUS name .)
    PERCENT         reduce using rule 118 (expression -> MINUS name .)
    BITAND          reduce using rule 118 (expression -> MINUS name .)
    BITOR           reduce using rule 118 (expression -> MINUS name .)
    EQ              reduce using rule 118 (expression -> MINUS name .)
    NEQ             reduce using rule 118 (expression -> MINUS name .)
    LT              reduce using rule 118 (expression -> MINUS name .)
    GT              reduce using rule 118 (expression -> MINUS name .)
    LE              reduce using rule 118 (expression -> MINUS name .)
    GE              reduce using rule 118 (expression -> MINUS name .)
    AND             reduce using rule 118 (expression -> MINUS name .)
    OR              reduce using rule 118 (expression -> MINUS name .)
    RPAREN          reduce using rule 118 (expression -> MINUS name .)
    RBRACK          reduce using rule 118 (expression -> MINUS name .)
    COMMA           reduce using rule 118 (expression -> MINUS name .)
    ID              reduce using rule 118 (expression -> MINUS name .)
    CHAR            reduce using rule 118 (expression -> MINUS name .)
    DOUBLE          reduce using rule 118 (expression -> MINUS name .)
    FLOAT           reduce using rule 118 (expression -> MINUS name .)
    INT             reduce using rule 118 (expression -> MINUS name .)
    VOID            reduce using rule 118 (expression -> MINUS name .)
    INT8_T          reduce using rule 118 (expression -> MINUS name .)
    INT16_T         reduce using rule 118 (expression -> MINUS name .)
    INT32_T         reduce using rule 118 (expression -> MINUS name .)
    INT64_T         reduce using rule 118 (expression -> MINUS name .)
    UINT8_T         reduce using rule 118 (expression -> MINUS name .)
    UINT16_T        reduce using rule 118 (expression -> MINUS name .)
    UINT32_T        reduce using rule 118 (expression -> MINUS name .)
    UINT64_T        reduce using rule 118 (expression -> MINUS name .)
    LPAREN          reduce using rule 118 (expression -> MINUS name .)
    NEGATE          reduce using rule 118 (expression -> MINUS name .)
    SIZEOF          reduce using rule 118 (expression -> MINUS name .)
    FLOAT_L         reduce using rule 118 (expression -> MINUS name .)
    INT_L           reduce using rule 118 (expression -> MINUS name .)
    CHAR_L          reduce using rule 118 (expression -> MINUS name .)
    STRING_L        reduce using rule 118 (expression -> MINUS name .)
    NONDECIMAL_L    reduce using rule 118 (expression -> MINUS name .)
    STRUCT          reduce using rule 118 (expression -> MINUS name .)
    INCREMENT       shift and go to state 119
    LBRACK          shift and go to state 121
    MEMBER          shift and go to state 122

  ! PLUS            [ reduce using rule 129 (operand -> name .) ]
  ! MINUS           [ reduce using rule 129 (operand -> name .) ]
  ! ASTERISK        [ reduce using rule 129 (operand -> name .) ]
  ! DIVIDE          [ reduce using rule 129 (operand -> name .) ]
  ! LSHIFT          [ reduce using rule 129 (operand -> name .) ]
  ! RSHIFT          [ reduce using rule 129 (operand -> name .) ]
  ! PERCENT         [ reduce using rule 129 (operand -> name .) ]
  ! BITAND          [ reduce using rule 129 (operand -> name .) ]
  ! BITOR           [ reduce using rule 129 (operand -> name .) ]
  ! EQ              [ reduce using rule 129 (operand -> name .) ]
  ! NEQ             [ reduce using rule 129 (operand -> name .) ]
  ! LT              [ reduce using rule 129 (operand -> name .) ]
  ! GT              [ reduce using rule 129 (operand -> name .) ]
  ! LE              [ reduce using rule 129 (operand -> name .) ]
  ! GE              [ reduce using rule 129 (operand -> name .) ]
  ! AND             [ reduce using rule 129 (operand -> name .) ]
  ! OR              [ reduce using rule 129 (operand -> name .) ]


state 127

    (133) expression -> operand binop . operand
    (129) operand -> . name
    (130) operand -> . expression
    (131) operand -> . type_cast name
    (132) operand -> . func_call
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (113) expression -> . LPAREN expression RPAREN
    (114) expression -> . LPAREN name RPAREN
    (115) expression -> . NEGATE expression
    (116) expression -> . MINUS expression
    (117) expression -> . NEGATE name
    (118) expression -> . MINUS name
    (133) expression -> . operand binop operand
    (134) expression -> . name INCREMENT
    (19) type_cast -> . LPAREN dtype RPAREN
    (98) func_call -> . ID LPAREN func_arglist RPAREN
    (99) func_call -> . SIZEOF LPAREN func_arglist RPAREN
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name

    ID              shift and go to state 71
    LPAREN          shift and go to state 17
    NEGATE          shift and go to state 49
    MINUS           shift and go to state 50
    SIZEOF          shift and go to state 44
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64

    operand                        shift and go to state 180
    name                           shift and go to state 181
    expression                     shift and go to state 182
    type_cast                      shift and go to state 56
    func_call                      shift and go to state 72
    literal                        shift and go to state 57
    access                         shift and go to state 58

state 128

    (119) binop -> PLUS .

    ID              reduce using rule 119 (binop -> PLUS .)
    LPAREN          reduce using rule 119 (binop -> PLUS .)
    NEGATE          reduce using rule 119 (binop -> PLUS .)
    MINUS           reduce using rule 119 (binop -> PLUS .)
    SIZEOF          reduce using rule 119 (binop -> PLUS .)
    FLOAT_L         reduce using rule 119 (binop -> PLUS .)
    INT_L           reduce using rule 119 (binop -> PLUS .)
    CHAR_L          reduce using rule 119 (binop -> PLUS .)
    STRING_L        reduce using rule 119 (binop -> PLUS .)
    NONDECIMAL_L    reduce using rule 119 (binop -> PLUS .)
    BITAND          reduce using rule 119 (binop -> PLUS .)


state 129

    (120) binop -> MINUS .

    ID              reduce using rule 120 (binop -> MINUS .)
    LPAREN          reduce using rule 120 (binop -> MINUS .)
    NEGATE          reduce using rule 120 (binop -> MINUS .)
    MINUS           reduce using rule 120 (binop -> MINUS .)
    SIZEOF          reduce using rule 120 (binop -> MINUS .)
    FLOAT_L         reduce using rule 120 (binop -> MINUS .)
    INT_L           reduce using rule 120 (binop -> MINUS .)
    CHAR_L          reduce using rule 120 (binop -> MINUS .)
    STRING_L        reduce using rule 120 (binop -> MINUS .)
    NONDECIMAL_L    reduce using rule 120 (binop -> MINUS .)
    BITAND          reduce using rule 120 (binop -> MINUS .)


state 130

    (121) binop -> ASTERISK .

    ID              reduce using rule 121 (binop -> ASTERISK .)
    LPAREN          reduce using rule 121 (binop -> ASTERISK .)
    NEGATE          reduce using rule 121 (binop -> ASTERISK .)
    MINUS           reduce using rule 121 (binop -> ASTERISK .)
    SIZEOF          reduce using rule 121 (binop -> ASTERISK .)
    FLOAT_L         reduce using rule 121 (binop -> ASTERISK .)
    INT_L           reduce using rule 121 (binop -> ASTERISK .)
    CHAR_L          reduce using rule 121 (binop -> ASTERISK .)
    STRING_L        reduce using rule 121 (binop -> ASTERISK .)
    NONDECIMAL_L    reduce using rule 121 (binop -> ASTERISK .)
    BITAND          reduce using rule 121 (binop -> ASTERISK .)


state 131

    (122) binop -> DIVIDE .

    ID              reduce using rule 122 (binop -> DIVIDE .)
    LPAREN          reduce using rule 122 (binop -> DIVIDE .)
    NEGATE          reduce using rule 122 (binop -> DIVIDE .)
    MINUS           reduce using rule 122 (binop -> DIVIDE .)
    SIZEOF          reduce using rule 122 (binop -> DIVIDE .)
    FLOAT_L         reduce using rule 122 (binop -> DIVIDE .)
    INT_L           reduce using rule 122 (binop -> DIVIDE .)
    CHAR_L          reduce using rule 122 (binop -> DIVIDE .)
    STRING_L        reduce using rule 122 (binop -> DIVIDE .)
    NONDECIMAL_L    reduce using rule 122 (binop -> DIVIDE .)
    BITAND          reduce using rule 122 (binop -> DIVIDE .)


state 132

    (123) binop -> LSHIFT .

    ID              reduce using rule 123 (binop -> LSHIFT .)
    LPAREN          reduce using rule 123 (binop -> LSHIFT .)
    NEGATE          reduce using rule 123 (binop -> LSHIFT .)
    MINUS           reduce using rule 123 (binop -> LSHIFT .)
    SIZEOF          reduce using rule 123 (binop -> LSHIFT .)
    FLOAT_L         reduce using rule 123 (binop -> LSHIFT .)
    INT_L           reduce using rule 123 (binop -> LSHIFT .)
    CHAR_L          reduce using rule 123 (binop -> LSHIFT .)
    STRING_L        reduce using rule 123 (binop -> LSHIFT .)
    NONDECIMAL_L    reduce using rule 123 (binop -> LSHIFT .)
    BITAND          reduce using rule 123 (binop -> LSHIFT .)


state 133

    (124) binop -> RSHIFT .

    ID              reduce using rule 124 (binop -> RSHIFT .)
    LPAREN          reduce using rule 124 (binop -> RSHIFT .)
    NEGATE          reduce using rule 124 (binop -> RSHIFT .)
    MINUS           reduce using rule 124 (binop -> RSHIFT .)
    SIZEOF          reduce using rule 124 (binop -> RSHIFT .)
    FLOAT_L         reduce using rule 124 (binop -> RSHIFT .)
    INT_L           reduce using rule 124 (binop -> RSHIFT .)
    CHAR_L          reduce using rule 124 (binop -> RSHIFT .)
    STRING_L        reduce using rule 124 (binop -> RSHIFT .)
    NONDECIMAL_L    reduce using rule 124 (binop -> RSHIFT .)
    BITAND          reduce using rule 124 (binop -> RSHIFT .)


state 134

    (125) binop -> PERCENT .

    ID              reduce using rule 125 (binop -> PERCENT .)
    LPAREN          reduce using rule 125 (binop -> PERCENT .)
    NEGATE          reduce using rule 125 (binop -> PERCENT .)
    MINUS           reduce using rule 125 (binop -> PERCENT .)
    SIZEOF          reduce using rule 125 (binop -> PERCENT .)
    FLOAT_L         reduce using rule 125 (binop -> PERCENT .)
    INT_L           reduce using rule 125 (binop -> PERCENT .)
    CHAR_L          reduce using rule 125 (binop -> PERCENT .)
    STRING_L        reduce using rule 125 (binop -> PERCENT .)
    NONDECIMAL_L    reduce using rule 125 (binop -> PERCENT .)
    BITAND          reduce using rule 125 (binop -> PERCENT .)


state 135

    (126) binop -> BITAND .

    ID              reduce using rule 126 (binop -> BITAND .)
    LPAREN          reduce using rule 126 (binop -> BITAND .)
    NEGATE          reduce using rule 126 (binop -> BITAND .)
    MINUS           reduce using rule 126 (binop -> BITAND .)
    SIZEOF          reduce using rule 126 (binop -> BITAND .)
    FLOAT_L         reduce using rule 126 (binop -> BITAND .)
    INT_L           reduce using rule 126 (binop -> BITAND .)
    CHAR_L          reduce using rule 126 (binop -> BITAND .)
    STRING_L        reduce using rule 126 (binop -> BITAND .)
    NONDECIMAL_L    reduce using rule 126 (binop -> BITAND .)
    BITAND          reduce using rule 126 (binop -> BITAND .)


state 136

    (127) binop -> BITOR .

    ID              reduce using rule 127 (binop -> BITOR .)
    LPAREN          reduce using rule 127 (binop -> BITOR .)
    NEGATE          reduce using rule 127 (binop -> BITOR .)
    MINUS           reduce using rule 127 (binop -> BITOR .)
    SIZEOF          reduce using rule 127 (binop -> BITOR .)
    FLOAT_L         reduce using rule 127 (binop -> BITOR .)
    INT_L           reduce using rule 127 (binop -> BITOR .)
    CHAR_L          reduce using rule 127 (binop -> BITOR .)
    STRING_L        reduce using rule 127 (binop -> BITOR .)
    NONDECIMAL_L    reduce using rule 127 (binop -> BITOR .)
    BITAND          reduce using rule 127 (binop -> BITOR .)


state 137

    (128) binop -> conditional .

    ID              reduce using rule 128 (binop -> conditional .)
    LPAREN          reduce using rule 128 (binop -> conditional .)
    NEGATE          reduce using rule 128 (binop -> conditional .)
    MINUS           reduce using rule 128 (binop -> conditional .)
    SIZEOF          reduce using rule 128 (binop -> conditional .)
    FLOAT_L         reduce using rule 128 (binop -> conditional .)
    INT_L           reduce using rule 128 (binop -> conditional .)
    CHAR_L          reduce using rule 128 (binop -> conditional .)
    STRING_L        reduce using rule 128 (binop -> conditional .)
    NONDECIMAL_L    reduce using rule 128 (binop -> conditional .)
    BITAND          reduce using rule 128 (binop -> conditional .)


state 138

    (57) conditional -> EQ .

    ID              reduce using rule 57 (conditional -> EQ .)
    LPAREN          reduce using rule 57 (conditional -> EQ .)
    NEGATE          reduce using rule 57 (conditional -> EQ .)
    MINUS           reduce using rule 57 (conditional -> EQ .)
    SIZEOF          reduce using rule 57 (conditional -> EQ .)
    FLOAT_L         reduce using rule 57 (conditional -> EQ .)
    INT_L           reduce using rule 57 (conditional -> EQ .)
    CHAR_L          reduce using rule 57 (conditional -> EQ .)
    STRING_L        reduce using rule 57 (conditional -> EQ .)
    NONDECIMAL_L    reduce using rule 57 (conditional -> EQ .)
    BITAND          reduce using rule 57 (conditional -> EQ .)


state 139

    (58) conditional -> NEQ .

    ID              reduce using rule 58 (conditional -> NEQ .)
    LPAREN          reduce using rule 58 (conditional -> NEQ .)
    NEGATE          reduce using rule 58 (conditional -> NEQ .)
    MINUS           reduce using rule 58 (conditional -> NEQ .)
    SIZEOF          reduce using rule 58 (conditional -> NEQ .)
    FLOAT_L         reduce using rule 58 (conditional -> NEQ .)
    INT_L           reduce using rule 58 (conditional -> NEQ .)
    CHAR_L          reduce using rule 58 (conditional -> NEQ .)
    STRING_L        reduce using rule 58 (conditional -> NEQ .)
    NONDECIMAL_L    reduce using rule 58 (conditional -> NEQ .)
    BITAND          reduce using rule 58 (conditional -> NEQ .)


state 140

    (59) conditional -> LT .

    ID              reduce using rule 59 (conditional -> LT .)
    LPAREN          reduce using rule 59 (conditional -> LT .)
    NEGATE          reduce using rule 59 (conditional -> LT .)
    MINUS           reduce using rule 59 (conditional -> LT .)
    SIZEOF          reduce using rule 59 (conditional -> LT .)
    FLOAT_L         reduce using rule 59 (conditional -> LT .)
    INT_L           reduce using rule 59 (conditional -> LT .)
    CHAR_L          reduce using rule 59 (conditional -> LT .)
    STRING_L        reduce using rule 59 (conditional -> LT .)
    NONDECIMAL_L    reduce using rule 59 (conditional -> LT .)
    BITAND          reduce using rule 59 (conditional -> LT .)


state 141

    (60) conditional -> GT .

    ID              reduce using rule 60 (conditional -> GT .)
    LPAREN          reduce using rule 60 (conditional -> GT .)
    NEGATE          reduce using rule 60 (conditional -> GT .)
    MINUS           reduce using rule 60 (conditional -> GT .)
    SIZEOF          reduce using rule 60 (conditional -> GT .)
    FLOAT_L         reduce using rule 60 (conditional -> GT .)
    INT_L           reduce using rule 60 (conditional -> GT .)
    CHAR_L          reduce using rule 60 (conditional -> GT .)
    STRING_L        reduce using rule 60 (conditional -> GT .)
    NONDECIMAL_L    reduce using rule 60 (conditional -> GT .)
    BITAND          reduce using rule 60 (conditional -> GT .)


state 142

    (61) conditional -> LE .

    ID              reduce using rule 61 (conditional -> LE .)
    LPAREN          reduce using rule 61 (conditional -> LE .)
    NEGATE          reduce using rule 61 (conditional -> LE .)
    MINUS           reduce using rule 61 (conditional -> LE .)
    SIZEOF          reduce using rule 61 (conditional -> LE .)
    FLOAT_L         reduce using rule 61 (conditional -> LE .)
    INT_L           reduce using rule 61 (conditional -> LE .)
    CHAR_L          reduce using rule 61 (conditional -> LE .)
    STRING_L        reduce using rule 61 (conditional -> LE .)
    NONDECIMAL_L    reduce using rule 61 (conditional -> LE .)
    BITAND          reduce using rule 61 (conditional -> LE .)


state 143

    (62) conditional -> GE .

    ID              reduce using rule 62 (conditional -> GE .)
    LPAREN          reduce using rule 62 (conditional -> GE .)
    NEGATE          reduce using rule 62 (conditional -> GE .)
    MINUS           reduce using rule 62 (conditional -> GE .)
    SIZEOF          reduce using rule 62 (conditional -> GE .)
    FLOAT_L         reduce using rule 62 (conditional -> GE .)
    INT_L           reduce using rule 62 (conditional -> GE .)
    CHAR_L          reduce using rule 62 (conditional -> GE .)
    STRING_L        reduce using rule 62 (conditional -> GE .)
    NONDECIMAL_L    reduce using rule 62 (conditional -> GE .)
    BITAND          reduce using rule 62 (conditional -> GE .)


state 144

    (63) conditional -> AND .

    ID              reduce using rule 63 (conditional -> AND .)
    LPAREN          reduce using rule 63 (conditional -> AND .)
    NEGATE          reduce using rule 63 (conditional -> AND .)
    MINUS           reduce using rule 63 (conditional -> AND .)
    SIZEOF          reduce using rule 63 (conditional -> AND .)
    FLOAT_L         reduce using rule 63 (conditional -> AND .)
    INT_L           reduce using rule 63 (conditional -> AND .)
    CHAR_L          reduce using rule 63 (conditional -> AND .)
    STRING_L        reduce using rule 63 (conditional -> AND .)
    NONDECIMAL_L    reduce using rule 63 (conditional -> AND .)
    BITAND          reduce using rule 63 (conditional -> AND .)


state 145

    (64) conditional -> OR .

    ID              reduce using rule 64 (conditional -> OR .)
    LPAREN          reduce using rule 64 (conditional -> OR .)
    NEGATE          reduce using rule 64 (conditional -> OR .)
    MINUS           reduce using rule 64 (conditional -> OR .)
    SIZEOF          reduce using rule 64 (conditional -> OR .)
    FLOAT_L         reduce using rule 64 (conditional -> OR .)
    INT_L           reduce using rule 64 (conditional -> OR .)
    CHAR_L          reduce using rule 64 (conditional -> OR .)
    STRING_L        reduce using rule 64 (conditional -> OR .)
    NONDECIMAL_L    reduce using rule 64 (conditional -> OR .)
    BITAND          reduce using rule 64 (conditional -> OR .)


state 146

    (135) return -> RETURN name .
    (134) expression -> name . INCREMENT
    (100) access -> name . LBRACK name RBRACK
    (101) access -> name . LBRACK expression RBRACK
    (102) access -> name . MEMBER name
    (129) operand -> name .

    SEMI            reduce using rule 135 (return -> RETURN name .)
    INCREMENT       shift and go to state 119
    LBRACK          shift and go to state 121
    MEMBER          shift and go to state 122
    PLUS            reduce using rule 129 (operand -> name .)
    MINUS           reduce using rule 129 (operand -> name .)
    ASTERISK        reduce using rule 129 (operand -> name .)
    DIVIDE          reduce using rule 129 (operand -> name .)
    LSHIFT          reduce using rule 129 (operand -> name .)
    RSHIFT          reduce using rule 129 (operand -> name .)
    PERCENT         reduce using rule 129 (operand -> name .)
    BITAND          reduce using rule 129 (operand -> name .)
    BITOR           reduce using rule 129 (operand -> name .)
    EQ              reduce using rule 129 (operand -> name .)
    NEQ             reduce using rule 129 (operand -> name .)
    LT              reduce using rule 129 (operand -> name .)
    GT              reduce using rule 129 (operand -> name .)
    LE              reduce using rule 129 (operand -> name .)
    GE              reduce using rule 129 (operand -> name .)
    AND             reduce using rule 129 (operand -> name .)
    OR              reduce using rule 129 (operand -> name .)


state 147

    (136) return -> RETURN expression .
    (130) operand -> expression .

    SEMI            reduce using rule 136 (return -> RETURN expression .)
    PLUS            reduce using rule 130 (operand -> expression .)
    MINUS           reduce using rule 130 (operand -> expression .)
    ASTERISK        reduce using rule 130 (operand -> expression .)
    DIVIDE          reduce using rule 130 (operand -> expression .)
    LSHIFT          reduce using rule 130 (operand -> expression .)
    RSHIFT          reduce using rule 130 (operand -> expression .)
    PERCENT         reduce using rule 130 (operand -> expression .)
    BITAND          reduce using rule 130 (operand -> expression .)
    BITOR           reduce using rule 130 (operand -> expression .)
    EQ              reduce using rule 130 (operand -> expression .)
    NEQ             reduce using rule 130 (operand -> expression .)
    LT              reduce using rule 130 (operand -> expression .)
    GT              reduce using rule 130 (operand -> expression .)
    LE              reduce using rule 130 (operand -> expression .)
    GE              reduce using rule 130 (operand -> expression .)
    AND             reduce using rule 130 (operand -> expression .)
    OR              reduce using rule 130 (operand -> expression .)


state 148

    (71) for_loop -> FOR LPAREN . init_var conditional_expr SEMI ID INCREMENT RPAREN
    (163) init_var -> . init_var_ls init_var_rs
    (145) init_var_ls -> . declare_var_ls assign
    (146) init_var_ls -> . declare_var_ls vector_init_list assign
    (137) declare_var_ls -> . dtype ID
    (138) declare_var_ls -> . modifier_list ID
    (139) declare_var_ls -> . modifier_list dtype ID
    (30) dtype -> . CHAR
    (31) dtype -> . DOUBLE
    (32) dtype -> . FLOAT
    (33) dtype -> . INT
    (34) dtype -> . VOID
    (35) dtype -> . INT8_T
    (36) dtype -> . INT16_T
    (37) dtype -> . INT32_T
    (38) dtype -> . INT64_T
    (39) dtype -> . UINT8_T
    (40) dtype -> . UINT16_T
    (41) dtype -> . UINT32_T
    (42) dtype -> . UINT64_T
    (43) dtype -> . struct_type
    (44) dtype -> . dtype ASTERISK
    (28) modifier_list -> .
    (29) modifier_list -> . modifier_list modifier
    (18) struct_type -> . STRUCT name

  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT8_T resolved as shift
  ! shift/reduce conflict for INT16_T resolved as shift
  ! shift/reduce conflict for INT32_T resolved as shift
  ! shift/reduce conflict for INT64_T resolved as shift
  ! shift/reduce conflict for UINT8_T resolved as shift
  ! shift/reduce conflict for UINT16_T resolved as shift
  ! shift/reduce conflict for UINT32_T resolved as shift
  ! shift/reduce conflict for UINT64_T resolved as shift
  ! shift/reduce conflict for STRUCT resolved as shift
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 31
    FLOAT           shift and go to state 32
    INT             shift and go to state 33
    VOID            shift and go to state 34
    INT8_T          shift and go to state 35
    INT16_T         shift and go to state 36
    INT32_T         shift and go to state 37
    INT64_T         shift and go to state 38
    UINT8_T         shift and go to state 39
    UINT16_T        shift and go to state 40
    UINT32_T        shift and go to state 41
    UINT64_T        shift and go to state 42
    ID              reduce using rule 28 (modifier_list -> .)
    CONST           reduce using rule 28 (modifier_list -> .)
    EXTERN          reduce using rule 28 (modifier_list -> .)
    INLINE          reduce using rule 28 (modifier_list -> .)
    LONG            reduce using rule 28 (modifier_list -> .)
    SHORT           reduce using rule 28 (modifier_list -> .)
    SIGNED          reduce using rule 28 (modifier_list -> .)
    UNSIGNED        reduce using rule 28 (modifier_list -> .)
    VOLATILE        reduce using rule 28 (modifier_list -> .)
    STRUCT          shift and go to state 73

  ! CHAR            [ reduce using rule 28 (modifier_list -> .) ]
  ! DOUBLE          [ reduce using rule 28 (modifier_list -> .) ]
  ! FLOAT           [ reduce using rule 28 (modifier_list -> .) ]
  ! INT             [ reduce using rule 28 (modifier_list -> .) ]
  ! VOID            [ reduce using rule 28 (modifier_list -> .) ]
  ! INT8_T          [ reduce using rule 28 (modifier_list -> .) ]
  ! INT16_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! INT32_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! INT64_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT8_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT16_T        [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT32_T        [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT64_T        [ reduce using rule 28 (modifier_list -> .) ]
  ! STRUCT          [ reduce using rule 28 (modifier_list -> .) ]

    init_var                       shift and go to state 183
    init_var_ls                    shift and go to state 45
    declare_var_ls                 shift and go to state 184
    dtype                          shift and go to state 185
    modifier_list                  shift and go to state 186
    struct_type                    shift and go to state 43

state 149

    (131) operand -> type_cast name .
    (100) access -> name . LBRACK name RBRACK
    (101) access -> name . LBRACK expression RBRACK
    (102) access -> name . MEMBER name

    PLUS            reduce using rule 131 (operand -> type_cast name .)
    MINUS           reduce using rule 131 (operand -> type_cast name .)
    ASTERISK        reduce using rule 131 (operand -> type_cast name .)
    DIVIDE          reduce using rule 131 (operand -> type_cast name .)
    LSHIFT          reduce using rule 131 (operand -> type_cast name .)
    RSHIFT          reduce using rule 131 (operand -> type_cast name .)
    PERCENT         reduce using rule 131 (operand -> type_cast name .)
    BITAND          reduce using rule 131 (operand -> type_cast name .)
    BITOR           reduce using rule 131 (operand -> type_cast name .)
    EQ              reduce using rule 131 (operand -> type_cast name .)
    NEQ             reduce using rule 131 (operand -> type_cast name .)
    LT              reduce using rule 131 (operand -> type_cast name .)
    GT              reduce using rule 131 (operand -> type_cast name .)
    LE              reduce using rule 131 (operand -> type_cast name .)
    GE              reduce using rule 131 (operand -> type_cast name .)
    AND             reduce using rule 131 (operand -> type_cast name .)
    OR              reduce using rule 131 (operand -> type_cast name .)
    SEMI            reduce using rule 131 (operand -> type_cast name .)
    RPAREN          reduce using rule 131 (operand -> type_cast name .)
    RBRACK          reduce using rule 131 (operand -> type_cast name .)
    COMMA           reduce using rule 131 (operand -> type_cast name .)
    ID              reduce using rule 131 (operand -> type_cast name .)
    CHAR            reduce using rule 131 (operand -> type_cast name .)
    DOUBLE          reduce using rule 131 (operand -> type_cast name .)
    FLOAT           reduce using rule 131 (operand -> type_cast name .)
    INT             reduce using rule 131 (operand -> type_cast name .)
    VOID            reduce using rule 131 (operand -> type_cast name .)
    INT8_T          reduce using rule 131 (operand -> type_cast name .)
    INT16_T         reduce using rule 131 (operand -> type_cast name .)
    INT32_T         reduce using rule 131 (operand -> type_cast name .)
    INT64_T         reduce using rule 131 (operand -> type_cast name .)
    UINT8_T         reduce using rule 131 (operand -> type_cast name .)
    UINT16_T        reduce using rule 131 (operand -> type_cast name .)
    UINT32_T        reduce using rule 131 (operand -> type_cast name .)
    UINT64_T        reduce using rule 131 (operand -> type_cast name .)
    LPAREN          reduce using rule 131 (operand -> type_cast name .)
    NEGATE          reduce using rule 131 (operand -> type_cast name .)
    SIZEOF          reduce using rule 131 (operand -> type_cast name .)
    FLOAT_L         reduce using rule 131 (operand -> type_cast name .)
    INT_L           reduce using rule 131 (operand -> type_cast name .)
    CHAR_L          reduce using rule 131 (operand -> type_cast name .)
    STRING_L        reduce using rule 131 (operand -> type_cast name .)
    NONDECIMAL_L    reduce using rule 131 (operand -> type_cast name .)
    STRUCT          reduce using rule 131 (operand -> type_cast name .)
    LBRACK          shift and go to state 121
    MEMBER          shift and go to state 122


state 150

    (45) name -> ID .

    LBRACK          reduce using rule 45 (name -> ID .)
    MEMBER          reduce using rule 45 (name -> ID .)
    PLUS            reduce using rule 45 (name -> ID .)
    MINUS           reduce using rule 45 (name -> ID .)
    ASTERISK        reduce using rule 45 (name -> ID .)
    DIVIDE          reduce using rule 45 (name -> ID .)
    LSHIFT          reduce using rule 45 (name -> ID .)
    RSHIFT          reduce using rule 45 (name -> ID .)
    PERCENT         reduce using rule 45 (name -> ID .)
    BITAND          reduce using rule 45 (name -> ID .)
    BITOR           reduce using rule 45 (name -> ID .)
    EQ              reduce using rule 45 (name -> ID .)
    NEQ             reduce using rule 45 (name -> ID .)
    LT              reduce using rule 45 (name -> ID .)
    GT              reduce using rule 45 (name -> ID .)
    LE              reduce using rule 45 (name -> ID .)
    GE              reduce using rule 45 (name -> ID .)
    AND             reduce using rule 45 (name -> ID .)
    OR              reduce using rule 45 (name -> ID .)
    SEMI            reduce using rule 45 (name -> ID .)
    RPAREN          reduce using rule 45 (name -> ID .)
    RBRACK          reduce using rule 45 (name -> ID .)
    COMMA           reduce using rule 45 (name -> ID .)
    ID              reduce using rule 45 (name -> ID .)
    CHAR            reduce using rule 45 (name -> ID .)
    DOUBLE          reduce using rule 45 (name -> ID .)
    FLOAT           reduce using rule 45 (name -> ID .)
    INT             reduce using rule 45 (name -> ID .)
    VOID            reduce using rule 45 (name -> ID .)
    INT8_T          reduce using rule 45 (name -> ID .)
    INT16_T         reduce using rule 45 (name -> ID .)
    INT32_T         reduce using rule 45 (name -> ID .)
    INT64_T         reduce using rule 45 (name -> ID .)
    UINT8_T         reduce using rule 45 (name -> ID .)
    UINT16_T        reduce using rule 45 (name -> ID .)
    UINT32_T        reduce using rule 45 (name -> ID .)
    UINT64_T        reduce using rule 45 (name -> ID .)
    LPAREN          reduce using rule 45 (name -> ID .)
    NEGATE          reduce using rule 45 (name -> ID .)
    SIZEOF          reduce using rule 45 (name -> ID .)
    FLOAT_L         reduce using rule 45 (name -> ID .)
    INT_L           reduce using rule 45 (name -> ID .)
    CHAR_L          reduce using rule 45 (name -> ID .)
    STRING_L        reduce using rule 45 (name -> ID .)
    NONDECIMAL_L    reduce using rule 45 (name -> ID .)
    STRUCT          reduce using rule 45 (name -> ID .)
    INCREMENT       reduce using rule 45 (name -> ID .)
    SIMPLE_ASSIGN   reduce using rule 45 (name -> ID .)
    COMPLEX_ASSIGN  reduce using rule 45 (name -> ID .)
    CONST           reduce using rule 45 (name -> ID .)
    EXTERN          reduce using rule 45 (name -> ID .)
    INLINE          reduce using rule 45 (name -> ID .)
    LONG            reduce using rule 45 (name -> ID .)
    SHORT           reduce using rule 45 (name -> ID .)
    SIGNED          reduce using rule 45 (name -> ID .)
    UNSIGNED        reduce using rule 45 (name -> ID .)
    VOLATILE        reduce using rule 45 (name -> ID .)
    RBRACE          reduce using rule 45 (name -> ID .)
    LBRACE          reduce using rule 45 (name -> ID .)


state 151

    (103) access -> BITAND name .
    (100) access -> name . LBRACK name RBRACK
    (101) access -> name . LBRACK expression RBRACK
    (102) access -> name . MEMBER name

  ! shift/reduce conflict for LBRACK resolved as shift
  ! shift/reduce conflict for MEMBER resolved as shift
    INCREMENT       reduce using rule 103 (access -> BITAND name .)
    SIMPLE_ASSIGN   reduce using rule 103 (access -> BITAND name .)
    COMPLEX_ASSIGN  reduce using rule 103 (access -> BITAND name .)
    PLUS            reduce using rule 103 (access -> BITAND name .)
    MINUS           reduce using rule 103 (access -> BITAND name .)
    ASTERISK        reduce using rule 103 (access -> BITAND name .)
    DIVIDE          reduce using rule 103 (access -> BITAND name .)
    LSHIFT          reduce using rule 103 (access -> BITAND name .)
    RSHIFT          reduce using rule 103 (access -> BITAND name .)
    PERCENT         reduce using rule 103 (access -> BITAND name .)
    BITAND          reduce using rule 103 (access -> BITAND name .)
    BITOR           reduce using rule 103 (access -> BITAND name .)
    EQ              reduce using rule 103 (access -> BITAND name .)
    NEQ             reduce using rule 103 (access -> BITAND name .)
    LT              reduce using rule 103 (access -> BITAND name .)
    GT              reduce using rule 103 (access -> BITAND name .)
    LE              reduce using rule 103 (access -> BITAND name .)
    GE              reduce using rule 103 (access -> BITAND name .)
    AND             reduce using rule 103 (access -> BITAND name .)
    OR              reduce using rule 103 (access -> BITAND name .)
    RPAREN          reduce using rule 103 (access -> BITAND name .)
    ID              reduce using rule 103 (access -> BITAND name .)
    SEMI            reduce using rule 103 (access -> BITAND name .)
    RBRACK          reduce using rule 103 (access -> BITAND name .)
    COMMA           reduce using rule 103 (access -> BITAND name .)
    CHAR            reduce using rule 103 (access -> BITAND name .)
    DOUBLE          reduce using rule 103 (access -> BITAND name .)
    FLOAT           reduce using rule 103 (access -> BITAND name .)
    INT             reduce using rule 103 (access -> BITAND name .)
    VOID            reduce using rule 103 (access -> BITAND name .)
    INT8_T          reduce using rule 103 (access -> BITAND name .)
    INT16_T         reduce using rule 103 (access -> BITAND name .)
    INT32_T         reduce using rule 103 (access -> BITAND name .)
    INT64_T         reduce using rule 103 (access -> BITAND name .)
    UINT8_T         reduce using rule 103 (access -> BITAND name .)
    UINT16_T        reduce using rule 103 (access -> BITAND name .)
    UINT32_T        reduce using rule 103 (access -> BITAND name .)
    UINT64_T        reduce using rule 103 (access -> BITAND name .)
    LPAREN          reduce using rule 103 (access -> BITAND name .)
    NEGATE          reduce using rule 103 (access -> BITAND name .)
    SIZEOF          reduce using rule 103 (access -> BITAND name .)
    FLOAT_L         reduce using rule 103 (access -> BITAND name .)
    INT_L           reduce using rule 103 (access -> BITAND name .)
    CHAR_L          reduce using rule 103 (access -> BITAND name .)
    STRING_L        reduce using rule 103 (access -> BITAND name .)
    NONDECIMAL_L    reduce using rule 103 (access -> BITAND name .)
    STRUCT          reduce using rule 103 (access -> BITAND name .)
    CONST           reduce using rule 103 (access -> BITAND name .)
    EXTERN          reduce using rule 103 (access -> BITAND name .)
    INLINE          reduce using rule 103 (access -> BITAND name .)
    LONG            reduce using rule 103 (access -> BITAND name .)
    SHORT           reduce using rule 103 (access -> BITAND name .)
    SIGNED          reduce using rule 103 (access -> BITAND name .)
    UNSIGNED        reduce using rule 103 (access -> BITAND name .)
    VOLATILE        reduce using rule 103 (access -> BITAND name .)
    RBRACE          reduce using rule 103 (access -> BITAND name .)
    LBRACE          reduce using rule 103 (access -> BITAND name .)
    LBRACK          shift and go to state 121
    MEMBER          shift and go to state 122

  ! LBRACK          [ reduce using rule 103 (access -> BITAND name .) ]
  ! MEMBER          [ reduce using rule 103 (access -> BITAND name .) ]


state 152

    (83) func_def -> dtype ID LPAREN . func_def_arglist RPAREN scope
    (87) func_decl -> dtype ID LPAREN . func_def_arglist RPAREN SEMI
    (80) func_def_arglist -> .
    (81) func_def_arglist -> . func_def_arglist func_def_arg
    (82) func_def_arglist -> . func_def_arglist func_def_arg COMMA

    RPAREN          reduce using rule 80 (func_def_arglist -> .)
    CHAR            reduce using rule 80 (func_def_arglist -> .)
    DOUBLE          reduce using rule 80 (func_def_arglist -> .)
    FLOAT           reduce using rule 80 (func_def_arglist -> .)
    INT             reduce using rule 80 (func_def_arglist -> .)
    VOID            reduce using rule 80 (func_def_arglist -> .)
    INT8_T          reduce using rule 80 (func_def_arglist -> .)
    INT16_T         reduce using rule 80 (func_def_arglist -> .)
    INT32_T         reduce using rule 80 (func_def_arglist -> .)
    INT64_T         reduce using rule 80 (func_def_arglist -> .)
    UINT8_T         reduce using rule 80 (func_def_arglist -> .)
    UINT16_T        reduce using rule 80 (func_def_arglist -> .)
    UINT32_T        reduce using rule 80 (func_def_arglist -> .)
    UINT64_T        reduce using rule 80 (func_def_arglist -> .)
    STRUCT          reduce using rule 80 (func_def_arglist -> .)
    CONST           reduce using rule 80 (func_def_arglist -> .)
    EXTERN          reduce using rule 80 (func_def_arglist -> .)
    INLINE          reduce using rule 80 (func_def_arglist -> .)
    LONG            reduce using rule 80 (func_def_arglist -> .)
    SHORT           reduce using rule 80 (func_def_arglist -> .)
    SIGNED          reduce using rule 80 (func_def_arglist -> .)
    UNSIGNED        reduce using rule 80 (func_def_arglist -> .)
    VOLATILE        reduce using rule 80 (func_def_arglist -> .)

    func_def_arglist               shift and go to state 187

state 153

    (98) func_call -> ID LPAREN func_arglist . RPAREN
    (96) func_arglist -> func_arglist . func_arg
    (97) func_arglist -> func_arglist . func_arg COMMA
    (88) func_arg -> . name
    (89) func_arg -> . dtype
    (90) func_arg -> . expression
    (91) func_arg -> . type_cast name
    (92) func_arg -> . type_cast expression
    (93) func_arg -> . func_call
    (94) func_arg -> . type_cast func_call
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (30) dtype -> . CHAR
    (31) dtype -> . DOUBLE
    (32) dtype -> . FLOAT
    (33) dtype -> . INT
    (34) dtype -> . VOID
    (35) dtype -> . INT8_T
    (36) dtype -> . INT16_T
    (37) dtype -> . INT32_T
    (38) dtype -> . INT64_T
    (39) dtype -> . UINT8_T
    (40) dtype -> . UINT16_T
    (41) dtype -> . UINT32_T
    (42) dtype -> . UINT64_T
    (43) dtype -> . struct_type
    (44) dtype -> . dtype ASTERISK
    (113) expression -> . LPAREN expression RPAREN
    (114) expression -> . LPAREN name RPAREN
    (115) expression -> . NEGATE expression
    (116) expression -> . MINUS expression
    (117) expression -> . NEGATE name
    (118) expression -> . MINUS name
    (133) expression -> . operand binop operand
    (134) expression -> . name INCREMENT
    (19) type_cast -> . LPAREN dtype RPAREN
    (98) func_call -> . ID LPAREN func_arglist RPAREN
    (99) func_call -> . SIZEOF LPAREN func_arglist RPAREN
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name
    (18) struct_type -> . STRUCT name
    (129) operand -> . name
    (130) operand -> . expression
    (131) operand -> . type_cast name
    (132) operand -> . func_call

    RPAREN          shift and go to state 188
    ID              shift and go to state 71
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 31
    FLOAT           shift and go to state 32
    INT             shift and go to state 33
    VOID            shift and go to state 34
    INT8_T          shift and go to state 35
    INT16_T         shift and go to state 36
    INT32_T         shift and go to state 37
    INT64_T         shift and go to state 38
    UINT8_T         shift and go to state 39
    UINT16_T        shift and go to state 40
    UINT32_T        shift and go to state 41
    UINT64_T        shift and go to state 42
    LPAREN          shift and go to state 17
    NEGATE          shift and go to state 49
    MINUS           shift and go to state 50
    SIZEOF          shift and go to state 44
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64
    STRUCT          shift and go to state 73

    func_arg                       shift and go to state 189
    name                           shift and go to state 190
    dtype                          shift and go to state 191
    expression                     shift and go to state 192
    type_cast                      shift and go to state 193
    func_call                      shift and go to state 194
    literal                        shift and go to state 57
    access                         shift and go to state 58
    struct_type                    shift and go to state 43
    operand                        shift and go to state 51

state 154

    (113) expression -> LPAREN expression RPAREN .

    SEMI            reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    ASTERISK        reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    PERCENT         reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    BITAND          reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    BITOR           reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    CHAR            reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    DOUBLE          reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    INT             reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    VOID            reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    INT8_T          reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    INT16_T         reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    INT32_T         reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    INT64_T         reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    UINT8_T         reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    UINT16_T        reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    UINT32_T        reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    UINT64_T        reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    NEGATE          reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    SIZEOF          reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    FLOAT_L         reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    INT_L           reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    CHAR_L          reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    STRING_L        reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    NONDECIMAL_L    reduce using rule 113 (expression -> LPAREN expression RPAREN .)
    STRUCT          reduce using rule 113 (expression -> LPAREN expression RPAREN .)


state 155

    (114) expression -> LPAREN name RPAREN .

    SEMI            reduce using rule 114 (expression -> LPAREN name RPAREN .)
    PLUS            reduce using rule 114 (expression -> LPAREN name RPAREN .)
    MINUS           reduce using rule 114 (expression -> LPAREN name RPAREN .)
    ASTERISK        reduce using rule 114 (expression -> LPAREN name RPAREN .)
    DIVIDE          reduce using rule 114 (expression -> LPAREN name RPAREN .)
    LSHIFT          reduce using rule 114 (expression -> LPAREN name RPAREN .)
    RSHIFT          reduce using rule 114 (expression -> LPAREN name RPAREN .)
    PERCENT         reduce using rule 114 (expression -> LPAREN name RPAREN .)
    BITAND          reduce using rule 114 (expression -> LPAREN name RPAREN .)
    BITOR           reduce using rule 114 (expression -> LPAREN name RPAREN .)
    EQ              reduce using rule 114 (expression -> LPAREN name RPAREN .)
    NEQ             reduce using rule 114 (expression -> LPAREN name RPAREN .)
    LT              reduce using rule 114 (expression -> LPAREN name RPAREN .)
    GT              reduce using rule 114 (expression -> LPAREN name RPAREN .)
    LE              reduce using rule 114 (expression -> LPAREN name RPAREN .)
    GE              reduce using rule 114 (expression -> LPAREN name RPAREN .)
    AND             reduce using rule 114 (expression -> LPAREN name RPAREN .)
    OR              reduce using rule 114 (expression -> LPAREN name RPAREN .)
    RPAREN          reduce using rule 114 (expression -> LPAREN name RPAREN .)
    RBRACK          reduce using rule 114 (expression -> LPAREN name RPAREN .)
    COMMA           reduce using rule 114 (expression -> LPAREN name RPAREN .)
    ID              reduce using rule 114 (expression -> LPAREN name RPAREN .)
    CHAR            reduce using rule 114 (expression -> LPAREN name RPAREN .)
    DOUBLE          reduce using rule 114 (expression -> LPAREN name RPAREN .)
    FLOAT           reduce using rule 114 (expression -> LPAREN name RPAREN .)
    INT             reduce using rule 114 (expression -> LPAREN name RPAREN .)
    VOID            reduce using rule 114 (expression -> LPAREN name RPAREN .)
    INT8_T          reduce using rule 114 (expression -> LPAREN name RPAREN .)
    INT16_T         reduce using rule 114 (expression -> LPAREN name RPAREN .)
    INT32_T         reduce using rule 114 (expression -> LPAREN name RPAREN .)
    INT64_T         reduce using rule 114 (expression -> LPAREN name RPAREN .)
    UINT8_T         reduce using rule 114 (expression -> LPAREN name RPAREN .)
    UINT16_T        reduce using rule 114 (expression -> LPAREN name RPAREN .)
    UINT32_T        reduce using rule 114 (expression -> LPAREN name RPAREN .)
    UINT64_T        reduce using rule 114 (expression -> LPAREN name RPAREN .)
    LPAREN          reduce using rule 114 (expression -> LPAREN name RPAREN .)
    NEGATE          reduce using rule 114 (expression -> LPAREN name RPAREN .)
    SIZEOF          reduce using rule 114 (expression -> LPAREN name RPAREN .)
    FLOAT_L         reduce using rule 114 (expression -> LPAREN name RPAREN .)
    INT_L           reduce using rule 114 (expression -> LPAREN name RPAREN .)
    CHAR_L          reduce using rule 114 (expression -> LPAREN name RPAREN .)
    STRING_L        reduce using rule 114 (expression -> LPAREN name RPAREN .)
    NONDECIMAL_L    reduce using rule 114 (expression -> LPAREN name RPAREN .)
    STRUCT          reduce using rule 114 (expression -> LPAREN name RPAREN .)


state 156

    (19) type_cast -> LPAREN dtype RPAREN .

    ID              reduce using rule 19 (type_cast -> LPAREN dtype RPAREN .)
    FLOAT_L         reduce using rule 19 (type_cast -> LPAREN dtype RPAREN .)
    INT_L           reduce using rule 19 (type_cast -> LPAREN dtype RPAREN .)
    CHAR_L          reduce using rule 19 (type_cast -> LPAREN dtype RPAREN .)
    STRING_L        reduce using rule 19 (type_cast -> LPAREN dtype RPAREN .)
    NONDECIMAL_L    reduce using rule 19 (type_cast -> LPAREN dtype RPAREN .)
    BITAND          reduce using rule 19 (type_cast -> LPAREN dtype RPAREN .)
    LPAREN          reduce using rule 19 (type_cast -> LPAREN dtype RPAREN .)
    error           reduce using rule 19 (type_cast -> LPAREN dtype RPAREN .)
    SIZEOF          reduce using rule 19 (type_cast -> LPAREN dtype RPAREN .)
    NEGATE          reduce using rule 19 (type_cast -> LPAREN dtype RPAREN .)
    MINUS           reduce using rule 19 (type_cast -> LPAREN dtype RPAREN .)
    LBRACE          reduce using rule 19 (type_cast -> LPAREN dtype RPAREN .)


state 157

    (84) func_def -> modifier_list dtype ID . LPAREN func_def_arglist RPAREN scope
    (139) declare_var_ls -> modifier_list dtype ID .

    LPAREN          shift and go to state 195
    SEMI            reduce using rule 139 (declare_var_ls -> modifier_list dtype ID .)
    SIMPLE_ASSIGN   reduce using rule 139 (declare_var_ls -> modifier_list dtype ID .)
    COMPLEX_ASSIGN  reduce using rule 139 (declare_var_ls -> modifier_list dtype ID .)
    LBRACK          reduce using rule 139 (declare_var_ls -> modifier_list dtype ID .)


state 158

    (52) scope -> LBRACE node_list . RBRACE
    (2) node_list -> node_list . node
    (3) node -> . include
    (4) node -> . define
    (5) node -> . if
    (6) node -> . func_def
    (7) node -> . func_decl
    (8) node -> . statement
    (9) node -> . control_expr
    (10) node -> . struct_def
    (48) include -> . INCLUDE
    (49) define -> . DEFINE
    (50) if -> . IFNDEF
    (51) if -> . ENDIF
    (83) func_def -> . dtype ID LPAREN func_def_arglist RPAREN scope
    (84) func_def -> . modifier_list dtype ID LPAREN func_def_arglist RPAREN scope
    (85) func_def -> . func_call scope
    (86) func_def -> . error scope
    (87) func_decl -> . dtype ID LPAREN func_def_arglist RPAREN SEMI
    (106) statement -> . init_var
    (107) statement -> . assign_var
    (108) statement -> . declare_var
    (109) statement -> . expression SEMI
    (110) statement -> . func_call SEMI
    (111) statement -> . return SEMI
    (112) statement -> . error SEMI
    (72) control_expr -> . control LPAREN conditional_expr RPAREN scope
    (73) control_expr -> . control scope
    (74) control_expr -> . for_loop scope
    (75) control_expr -> . ELSE node_list
    (76) control_expr -> . error LBRACE
    (104) struct_def -> . STRUCT ID scope SEMI
    (30) dtype -> . CHAR
    (31) dtype -> . DOUBLE
    (32) dtype -> . FLOAT
    (33) dtype -> . INT
    (34) dtype -> . VOID
    (35) dtype -> . INT8_T
    (36) dtype -> . INT16_T
    (37) dtype -> . INT32_T
    (38) dtype -> . INT64_T
    (39) dtype -> . UINT8_T
    (40) dtype -> . UINT16_T
    (41) dtype -> . UINT32_T
    (42) dtype -> . UINT64_T
    (43) dtype -> . struct_type
    (44) dtype -> . dtype ASTERISK
    (28) modifier_list -> .
    (29) modifier_list -> . modifier_list modifier
    (98) func_call -> . ID LPAREN func_arglist RPAREN
    (99) func_call -> . SIZEOF LPAREN func_arglist RPAREN
    (163) init_var -> . init_var_ls init_var_rs
    (166) assign_var -> . assign_var_ls assign_var_rs
    (140) declare_var -> . declare_var_ls SEMI
    (113) expression -> . LPAREN expression RPAREN
    (114) expression -> . LPAREN name RPAREN
    (115) expression -> . NEGATE expression
    (116) expression -> . MINUS expression
    (117) expression -> . NEGATE name
    (118) expression -> . MINUS name
    (133) expression -> . operand binop operand
    (134) expression -> . name INCREMENT
    (135) return -> . RETURN name
    (136) return -> . RETURN expression
    (54) control -> . WHILE
    (55) control -> . IF
    (56) control -> . ELSE
    (71) for_loop -> . FOR LPAREN init_var conditional_expr SEMI ID INCREMENT RPAREN
    (18) struct_type -> . STRUCT name
    (145) init_var_ls -> . declare_var_ls assign
    (146) init_var_ls -> . declare_var_ls vector_init_list assign
    (164) assign_var_ls -> . name assign
    (137) declare_var_ls -> . dtype ID
    (138) declare_var_ls -> . modifier_list ID
    (139) declare_var_ls -> . modifier_list dtype ID
    (129) operand -> . name
    (130) operand -> . expression
    (131) operand -> . type_cast name
    (132) operand -> . func_call
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (19) type_cast -> . LPAREN dtype RPAREN
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name

  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT8_T resolved as shift
  ! shift/reduce conflict for INT16_T resolved as shift
  ! shift/reduce conflict for INT32_T resolved as shift
  ! shift/reduce conflict for INT64_T resolved as shift
  ! shift/reduce conflict for UINT8_T resolved as shift
  ! shift/reduce conflict for UINT16_T resolved as shift
  ! shift/reduce conflict for UINT32_T resolved as shift
  ! shift/reduce conflict for UINT64_T resolved as shift
  ! shift/reduce conflict for STRUCT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    RBRACE          shift and go to state 196
    INCLUDE         shift and go to state 11
    DEFINE          shift and go to state 12
    IFNDEF          shift and go to state 13
    ENDIF           shift and go to state 14
    error           shift and go to state 20
    ELSE            shift and go to state 28
    STRUCT          shift and go to state 29
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 31
    FLOAT           shift and go to state 32
    INT             shift and go to state 33
    VOID            shift and go to state 34
    INT8_T          shift and go to state 35
    INT16_T         shift and go to state 36
    INT32_T         shift and go to state 37
    INT64_T         shift and go to state 38
    UINT8_T         shift and go to state 39
    UINT16_T        shift and go to state 40
    UINT32_T        shift and go to state 41
    UINT64_T        shift and go to state 42
    CONST           reduce using rule 28 (modifier_list -> .)
    EXTERN          reduce using rule 28 (modifier_list -> .)
    INLINE          reduce using rule 28 (modifier_list -> .)
    LONG            reduce using rule 28 (modifier_list -> .)
    SHORT           reduce using rule 28 (modifier_list -> .)
    SIGNED          reduce using rule 28 (modifier_list -> .)
    UNSIGNED        reduce using rule 28 (modifier_list -> .)
    VOLATILE        reduce using rule 28 (modifier_list -> .)
    ID              shift and go to state 16
    SIZEOF          shift and go to state 44
    LPAREN          shift and go to state 17
    NEGATE          shift and go to state 49
    MINUS           shift and go to state 50
    RETURN          shift and go to state 52
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    FOR             shift and go to state 55
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64

  ! ID              [ reduce using rule 28 (modifier_list -> .) ]
  ! CHAR            [ reduce using rule 28 (modifier_list -> .) ]
  ! DOUBLE          [ reduce using rule 28 (modifier_list -> .) ]
  ! FLOAT           [ reduce using rule 28 (modifier_list -> .) ]
  ! INT             [ reduce using rule 28 (modifier_list -> .) ]
  ! VOID            [ reduce using rule 28 (modifier_list -> .) ]
  ! INT8_T          [ reduce using rule 28 (modifier_list -> .) ]
  ! INT16_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! INT32_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! INT64_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT8_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT16_T        [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT32_T        [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT64_T        [ reduce using rule 28 (modifier_list -> .) ]
  ! STRUCT          [ reduce using rule 28 (modifier_list -> .) ]

    node                           shift and go to state 2
    include                        shift and go to state 3
    define                         shift and go to state 4
    if                             shift and go to state 5
    func_def                       shift and go to state 6
    func_decl                      shift and go to state 7
    statement                      shift and go to state 8
    control_expr                   shift and go to state 9
    struct_def                     shift and go to state 10
    dtype                          shift and go to state 15
    modifier_list                  shift and go to state 18
    func_call                      shift and go to state 19
    init_var                       shift and go to state 21
    assign_var                     shift and go to state 22
    declare_var                    shift and go to state 23
    expression                     shift and go to state 24
    return                         shift and go to state 25
    control                        shift and go to state 26
    for_loop                       shift and go to state 27
    struct_type                    shift and go to state 43
    init_var_ls                    shift and go to state 45
    assign_var_ls                  shift and go to state 46
    declare_var_ls                 shift and go to state 47
    name                           shift and go to state 48
    operand                        shift and go to state 51
    type_cast                      shift and go to state 56
    literal                        shift and go to state 57
    access                         shift and go to state 58

state 159

    (53) scope -> error RBRACE .

    INCLUDE         reduce using rule 53 (scope -> error RBRACE .)
    DEFINE          reduce using rule 53 (scope -> error RBRACE .)
    IFNDEF          reduce using rule 53 (scope -> error RBRACE .)
    ENDIF           reduce using rule 53 (scope -> error RBRACE .)
    error           reduce using rule 53 (scope -> error RBRACE .)
    ELSE            reduce using rule 53 (scope -> error RBRACE .)
    STRUCT          reduce using rule 53 (scope -> error RBRACE .)
    CHAR            reduce using rule 53 (scope -> error RBRACE .)
    DOUBLE          reduce using rule 53 (scope -> error RBRACE .)
    FLOAT           reduce using rule 53 (scope -> error RBRACE .)
    INT             reduce using rule 53 (scope -> error RBRACE .)
    VOID            reduce using rule 53 (scope -> error RBRACE .)
    INT8_T          reduce using rule 53 (scope -> error RBRACE .)
    INT16_T         reduce using rule 53 (scope -> error RBRACE .)
    INT32_T         reduce using rule 53 (scope -> error RBRACE .)
    INT64_T         reduce using rule 53 (scope -> error RBRACE .)
    UINT8_T         reduce using rule 53 (scope -> error RBRACE .)
    UINT16_T        reduce using rule 53 (scope -> error RBRACE .)
    UINT32_T        reduce using rule 53 (scope -> error RBRACE .)
    UINT64_T        reduce using rule 53 (scope -> error RBRACE .)
    ID              reduce using rule 53 (scope -> error RBRACE .)
    SIZEOF          reduce using rule 53 (scope -> error RBRACE .)
    LPAREN          reduce using rule 53 (scope -> error RBRACE .)
    NEGATE          reduce using rule 53 (scope -> error RBRACE .)
    MINUS           reduce using rule 53 (scope -> error RBRACE .)
    RETURN          reduce using rule 53 (scope -> error RBRACE .)
    WHILE           reduce using rule 53 (scope -> error RBRACE .)
    IF              reduce using rule 53 (scope -> error RBRACE .)
    FOR             reduce using rule 53 (scope -> error RBRACE .)
    FLOAT_L         reduce using rule 53 (scope -> error RBRACE .)
    INT_L           reduce using rule 53 (scope -> error RBRACE .)
    CHAR_L          reduce using rule 53 (scope -> error RBRACE .)
    STRING_L        reduce using rule 53 (scope -> error RBRACE .)
    NONDECIMAL_L    reduce using rule 53 (scope -> error RBRACE .)
    BITAND          reduce using rule 53 (scope -> error RBRACE .)
    $end            reduce using rule 53 (scope -> error RBRACE .)
    CONST           reduce using rule 53 (scope -> error RBRACE .)
    EXTERN          reduce using rule 53 (scope -> error RBRACE .)
    INLINE          reduce using rule 53 (scope -> error RBRACE .)
    LONG            reduce using rule 53 (scope -> error RBRACE .)
    SHORT           reduce using rule 53 (scope -> error RBRACE .)
    SIGNED          reduce using rule 53 (scope -> error RBRACE .)
    UNSIGNED        reduce using rule 53 (scope -> error RBRACE .)
    VOLATILE        reduce using rule 53 (scope -> error RBRACE .)
    RBRACE          reduce using rule 53 (scope -> error RBRACE .)
    SEMI            reduce using rule 53 (scope -> error RBRACE .)


state 160

    (72) control_expr -> control LPAREN conditional_expr . RPAREN scope

    RPAREN          shift and go to state 197


state 161

    (65) conditional_expr -> name . conditional expression
    (68) conditional_expr -> name . conditional name
    (69) conditional_expr -> name .
    (134) expression -> name . INCREMENT
    (100) access -> name . LBRACK name RBRACK
    (101) access -> name . LBRACK expression RBRACK
    (102) access -> name . MEMBER name
    (129) operand -> name .
    (57) conditional -> . EQ
    (58) conditional -> . NEQ
    (59) conditional -> . LT
    (60) conditional -> . GT
    (61) conditional -> . LE
    (62) conditional -> . GE
    (63) conditional -> . AND
    (64) conditional -> . OR

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPAREN          reduce using rule 69 (conditional_expr -> name .)
    SEMI            reduce using rule 69 (conditional_expr -> name .)
    INCREMENT       shift and go to state 119
    LBRACK          shift and go to state 121
    MEMBER          shift and go to state 122
    PLUS            reduce using rule 129 (operand -> name .)
    MINUS           reduce using rule 129 (operand -> name .)
    ASTERISK        reduce using rule 129 (operand -> name .)
    DIVIDE          reduce using rule 129 (operand -> name .)
    LSHIFT          reduce using rule 129 (operand -> name .)
    RSHIFT          reduce using rule 129 (operand -> name .)
    PERCENT         reduce using rule 129 (operand -> name .)
    BITAND          reduce using rule 129 (operand -> name .)
    BITOR           reduce using rule 129 (operand -> name .)
    EQ              shift and go to state 138
    NEQ             shift and go to state 139
    LT              shift and go to state 140
    GT              shift and go to state 141
    LE              shift and go to state 142
    GE              shift and go to state 143
    AND             shift and go to state 144
    OR              shift and go to state 145

  ! EQ              [ reduce using rule 129 (operand -> name .) ]
  ! NEQ             [ reduce using rule 129 (operand -> name .) ]
  ! LT              [ reduce using rule 129 (operand -> name .) ]
  ! GT              [ reduce using rule 129 (operand -> name .) ]
  ! LE              [ reduce using rule 129 (operand -> name .) ]
  ! GE              [ reduce using rule 129 (operand -> name .) ]
  ! AND             [ reduce using rule 129 (operand -> name .) ]
  ! OR              [ reduce using rule 129 (operand -> name .) ]

    conditional                    shift and go to state 198

state 162

    (66) conditional_expr -> expression . conditional name
    (67) conditional_expr -> expression . conditional expression
    (70) conditional_expr -> expression .
    (130) operand -> expression .
    (57) conditional -> . EQ
    (58) conditional -> . NEQ
    (59) conditional -> . LT
    (60) conditional -> . GT
    (61) conditional -> . LE
    (62) conditional -> . GE
    (63) conditional -> . AND
    (64) conditional -> . OR

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPAREN          reduce using rule 70 (conditional_expr -> expression .)
    SEMI            reduce using rule 70 (conditional_expr -> expression .)
    PLUS            reduce using rule 130 (operand -> expression .)
    MINUS           reduce using rule 130 (operand -> expression .)
    ASTERISK        reduce using rule 130 (operand -> expression .)
    DIVIDE          reduce using rule 130 (operand -> expression .)
    LSHIFT          reduce using rule 130 (operand -> expression .)
    RSHIFT          reduce using rule 130 (operand -> expression .)
    PERCENT         reduce using rule 130 (operand -> expression .)
    BITAND          reduce using rule 130 (operand -> expression .)
    BITOR           reduce using rule 130 (operand -> expression .)
    EQ              shift and go to state 138
    NEQ             shift and go to state 139
    LT              shift and go to state 140
    GT              shift and go to state 141
    LE              shift and go to state 142
    GE              shift and go to state 143
    AND             shift and go to state 144
    OR              shift and go to state 145

  ! EQ              [ reduce using rule 130 (operand -> expression .) ]
  ! NEQ             [ reduce using rule 130 (operand -> expression .) ]
  ! LT              [ reduce using rule 130 (operand -> expression .) ]
  ! GT              [ reduce using rule 130 (operand -> expression .) ]
  ! LE              [ reduce using rule 130 (operand -> expression .) ]
  ! GE              [ reduce using rule 130 (operand -> expression .) ]
  ! AND             [ reduce using rule 130 (operand -> expression .) ]
  ! OR              [ reduce using rule 130 (operand -> expression .) ]

    conditional                    shift and go to state 199

state 163

    (104) struct_def -> STRUCT ID scope . SEMI

    SEMI            shift and go to state 200


state 164

    (99) func_call -> SIZEOF LPAREN func_arglist . RPAREN
    (96) func_arglist -> func_arglist . func_arg
    (97) func_arglist -> func_arglist . func_arg COMMA
    (88) func_arg -> . name
    (89) func_arg -> . dtype
    (90) func_arg -> . expression
    (91) func_arg -> . type_cast name
    (92) func_arg -> . type_cast expression
    (93) func_arg -> . func_call
    (94) func_arg -> . type_cast func_call
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (30) dtype -> . CHAR
    (31) dtype -> . DOUBLE
    (32) dtype -> . FLOAT
    (33) dtype -> . INT
    (34) dtype -> . VOID
    (35) dtype -> . INT8_T
    (36) dtype -> . INT16_T
    (37) dtype -> . INT32_T
    (38) dtype -> . INT64_T
    (39) dtype -> . UINT8_T
    (40) dtype -> . UINT16_T
    (41) dtype -> . UINT32_T
    (42) dtype -> . UINT64_T
    (43) dtype -> . struct_type
    (44) dtype -> . dtype ASTERISK
    (113) expression -> . LPAREN expression RPAREN
    (114) expression -> . LPAREN name RPAREN
    (115) expression -> . NEGATE expression
    (116) expression -> . MINUS expression
    (117) expression -> . NEGATE name
    (118) expression -> . MINUS name
    (133) expression -> . operand binop operand
    (134) expression -> . name INCREMENT
    (19) type_cast -> . LPAREN dtype RPAREN
    (98) func_call -> . ID LPAREN func_arglist RPAREN
    (99) func_call -> . SIZEOF LPAREN func_arglist RPAREN
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name
    (18) struct_type -> . STRUCT name
    (129) operand -> . name
    (130) operand -> . expression
    (131) operand -> . type_cast name
    (132) operand -> . func_call

    RPAREN          shift and go to state 201
    ID              shift and go to state 71
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 31
    FLOAT           shift and go to state 32
    INT             shift and go to state 33
    VOID            shift and go to state 34
    INT8_T          shift and go to state 35
    INT16_T         shift and go to state 36
    INT32_T         shift and go to state 37
    INT64_T         shift and go to state 38
    UINT8_T         shift and go to state 39
    UINT16_T        shift and go to state 40
    UINT32_T        shift and go to state 41
    UINT64_T        shift and go to state 42
    LPAREN          shift and go to state 17
    NEGATE          shift and go to state 49
    MINUS           shift and go to state 50
    SIZEOF          shift and go to state 44
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64
    STRUCT          shift and go to state 73

    func_arg                       shift and go to state 189
    name                           shift and go to state 190
    dtype                          shift and go to state 191
    expression                     shift and go to state 192
    type_cast                      shift and go to state 193
    func_call                      shift and go to state 194
    literal                        shift and go to state 57
    access                         shift and go to state 58
    struct_type                    shift and go to state 43
    operand                        shift and go to state 51

state 165

    (156) init_var_rs -> name SEMI .

    INCLUDE         reduce using rule 156 (init_var_rs -> name SEMI .)
    DEFINE          reduce using rule 156 (init_var_rs -> name SEMI .)
    IFNDEF          reduce using rule 156 (init_var_rs -> name SEMI .)
    ENDIF           reduce using rule 156 (init_var_rs -> name SEMI .)
    error           reduce using rule 156 (init_var_rs -> name SEMI .)
    ELSE            reduce using rule 156 (init_var_rs -> name SEMI .)
    STRUCT          reduce using rule 156 (init_var_rs -> name SEMI .)
    CHAR            reduce using rule 156 (init_var_rs -> name SEMI .)
    DOUBLE          reduce using rule 156 (init_var_rs -> name SEMI .)
    FLOAT           reduce using rule 156 (init_var_rs -> name SEMI .)
    INT             reduce using rule 156 (init_var_rs -> name SEMI .)
    VOID            reduce using rule 156 (init_var_rs -> name SEMI .)
    INT8_T          reduce using rule 156 (init_var_rs -> name SEMI .)
    INT16_T         reduce using rule 156 (init_var_rs -> name SEMI .)
    INT32_T         reduce using rule 156 (init_var_rs -> name SEMI .)
    INT64_T         reduce using rule 156 (init_var_rs -> name SEMI .)
    UINT8_T         reduce using rule 156 (init_var_rs -> name SEMI .)
    UINT16_T        reduce using rule 156 (init_var_rs -> name SEMI .)
    UINT32_T        reduce using rule 156 (init_var_rs -> name SEMI .)
    UINT64_T        reduce using rule 156 (init_var_rs -> name SEMI .)
    ID              reduce using rule 156 (init_var_rs -> name SEMI .)
    SIZEOF          reduce using rule 156 (init_var_rs -> name SEMI .)
    LPAREN          reduce using rule 156 (init_var_rs -> name SEMI .)
    NEGATE          reduce using rule 156 (init_var_rs -> name SEMI .)
    MINUS           reduce using rule 156 (init_var_rs -> name SEMI .)
    RETURN          reduce using rule 156 (init_var_rs -> name SEMI .)
    WHILE           reduce using rule 156 (init_var_rs -> name SEMI .)
    IF              reduce using rule 156 (init_var_rs -> name SEMI .)
    FOR             reduce using rule 156 (init_var_rs -> name SEMI .)
    FLOAT_L         reduce using rule 156 (init_var_rs -> name SEMI .)
    INT_L           reduce using rule 156 (init_var_rs -> name SEMI .)
    CHAR_L          reduce using rule 156 (init_var_rs -> name SEMI .)
    STRING_L        reduce using rule 156 (init_var_rs -> name SEMI .)
    NONDECIMAL_L    reduce using rule 156 (init_var_rs -> name SEMI .)
    BITAND          reduce using rule 156 (init_var_rs -> name SEMI .)
    $end            reduce using rule 156 (init_var_rs -> name SEMI .)
    CONST           reduce using rule 156 (init_var_rs -> name SEMI .)
    EXTERN          reduce using rule 156 (init_var_rs -> name SEMI .)
    INLINE          reduce using rule 156 (init_var_rs -> name SEMI .)
    LONG            reduce using rule 156 (init_var_rs -> name SEMI .)
    SHORT           reduce using rule 156 (init_var_rs -> name SEMI .)
    SIGNED          reduce using rule 156 (init_var_rs -> name SEMI .)
    UNSIGNED        reduce using rule 156 (init_var_rs -> name SEMI .)
    VOLATILE        reduce using rule 156 (init_var_rs -> name SEMI .)
    RBRACE          reduce using rule 156 (init_var_rs -> name SEMI .)


state 166

    (157) init_var_rs -> func_call SEMI .

    INCLUDE         reduce using rule 157 (init_var_rs -> func_call SEMI .)
    DEFINE          reduce using rule 157 (init_var_rs -> func_call SEMI .)
    IFNDEF          reduce using rule 157 (init_var_rs -> func_call SEMI .)
    ENDIF           reduce using rule 157 (init_var_rs -> func_call SEMI .)
    error           reduce using rule 157 (init_var_rs -> func_call SEMI .)
    ELSE            reduce using rule 157 (init_var_rs -> func_call SEMI .)
    STRUCT          reduce using rule 157 (init_var_rs -> func_call SEMI .)
    CHAR            reduce using rule 157 (init_var_rs -> func_call SEMI .)
    DOUBLE          reduce using rule 157 (init_var_rs -> func_call SEMI .)
    FLOAT           reduce using rule 157 (init_var_rs -> func_call SEMI .)
    INT             reduce using rule 157 (init_var_rs -> func_call SEMI .)
    VOID            reduce using rule 157 (init_var_rs -> func_call SEMI .)
    INT8_T          reduce using rule 157 (init_var_rs -> func_call SEMI .)
    INT16_T         reduce using rule 157 (init_var_rs -> func_call SEMI .)
    INT32_T         reduce using rule 157 (init_var_rs -> func_call SEMI .)
    INT64_T         reduce using rule 157 (init_var_rs -> func_call SEMI .)
    UINT8_T         reduce using rule 157 (init_var_rs -> func_call SEMI .)
    UINT16_T        reduce using rule 157 (init_var_rs -> func_call SEMI .)
    UINT32_T        reduce using rule 157 (init_var_rs -> func_call SEMI .)
    UINT64_T        reduce using rule 157 (init_var_rs -> func_call SEMI .)
    ID              reduce using rule 157 (init_var_rs -> func_call SEMI .)
    SIZEOF          reduce using rule 157 (init_var_rs -> func_call SEMI .)
    LPAREN          reduce using rule 157 (init_var_rs -> func_call SEMI .)
    NEGATE          reduce using rule 157 (init_var_rs -> func_call SEMI .)
    MINUS           reduce using rule 157 (init_var_rs -> func_call SEMI .)
    RETURN          reduce using rule 157 (init_var_rs -> func_call SEMI .)
    WHILE           reduce using rule 157 (init_var_rs -> func_call SEMI .)
    IF              reduce using rule 157 (init_var_rs -> func_call SEMI .)
    FOR             reduce using rule 157 (init_var_rs -> func_call SEMI .)
    FLOAT_L         reduce using rule 157 (init_var_rs -> func_call SEMI .)
    INT_L           reduce using rule 157 (init_var_rs -> func_call SEMI .)
    CHAR_L          reduce using rule 157 (init_var_rs -> func_call SEMI .)
    STRING_L        reduce using rule 157 (init_var_rs -> func_call SEMI .)
    NONDECIMAL_L    reduce using rule 157 (init_var_rs -> func_call SEMI .)
    BITAND          reduce using rule 157 (init_var_rs -> func_call SEMI .)
    $end            reduce using rule 157 (init_var_rs -> func_call SEMI .)
    CONST           reduce using rule 157 (init_var_rs -> func_call SEMI .)
    EXTERN          reduce using rule 157 (init_var_rs -> func_call SEMI .)
    INLINE          reduce using rule 157 (init_var_rs -> func_call SEMI .)
    LONG            reduce using rule 157 (init_var_rs -> func_call SEMI .)
    SHORT           reduce using rule 157 (init_var_rs -> func_call SEMI .)
    SIGNED          reduce using rule 157 (init_var_rs -> func_call SEMI .)
    UNSIGNED        reduce using rule 157 (init_var_rs -> func_call SEMI .)
    VOLATILE        reduce using rule 157 (init_var_rs -> func_call SEMI .)
    RBRACE          reduce using rule 157 (init_var_rs -> func_call SEMI .)


state 167

    (158) init_var_rs -> expression SEMI .

    INCLUDE         reduce using rule 158 (init_var_rs -> expression SEMI .)
    DEFINE          reduce using rule 158 (init_var_rs -> expression SEMI .)
    IFNDEF          reduce using rule 158 (init_var_rs -> expression SEMI .)
    ENDIF           reduce using rule 158 (init_var_rs -> expression SEMI .)
    error           reduce using rule 158 (init_var_rs -> expression SEMI .)
    ELSE            reduce using rule 158 (init_var_rs -> expression SEMI .)
    STRUCT          reduce using rule 158 (init_var_rs -> expression SEMI .)
    CHAR            reduce using rule 158 (init_var_rs -> expression SEMI .)
    DOUBLE          reduce using rule 158 (init_var_rs -> expression SEMI .)
    FLOAT           reduce using rule 158 (init_var_rs -> expression SEMI .)
    INT             reduce using rule 158 (init_var_rs -> expression SEMI .)
    VOID            reduce using rule 158 (init_var_rs -> expression SEMI .)
    INT8_T          reduce using rule 158 (init_var_rs -> expression SEMI .)
    INT16_T         reduce using rule 158 (init_var_rs -> expression SEMI .)
    INT32_T         reduce using rule 158 (init_var_rs -> expression SEMI .)
    INT64_T         reduce using rule 158 (init_var_rs -> expression SEMI .)
    UINT8_T         reduce using rule 158 (init_var_rs -> expression SEMI .)
    UINT16_T        reduce using rule 158 (init_var_rs -> expression SEMI .)
    UINT32_T        reduce using rule 158 (init_var_rs -> expression SEMI .)
    UINT64_T        reduce using rule 158 (init_var_rs -> expression SEMI .)
    ID              reduce using rule 158 (init_var_rs -> expression SEMI .)
    SIZEOF          reduce using rule 158 (init_var_rs -> expression SEMI .)
    LPAREN          reduce using rule 158 (init_var_rs -> expression SEMI .)
    NEGATE          reduce using rule 158 (init_var_rs -> expression SEMI .)
    MINUS           reduce using rule 158 (init_var_rs -> expression SEMI .)
    RETURN          reduce using rule 158 (init_var_rs -> expression SEMI .)
    WHILE           reduce using rule 158 (init_var_rs -> expression SEMI .)
    IF              reduce using rule 158 (init_var_rs -> expression SEMI .)
    FOR             reduce using rule 158 (init_var_rs -> expression SEMI .)
    FLOAT_L         reduce using rule 158 (init_var_rs -> expression SEMI .)
    INT_L           reduce using rule 158 (init_var_rs -> expression SEMI .)
    CHAR_L          reduce using rule 158 (init_var_rs -> expression SEMI .)
    STRING_L        reduce using rule 158 (init_var_rs -> expression SEMI .)
    NONDECIMAL_L    reduce using rule 158 (init_var_rs -> expression SEMI .)
    BITAND          reduce using rule 158 (init_var_rs -> expression SEMI .)
    $end            reduce using rule 158 (init_var_rs -> expression SEMI .)
    CONST           reduce using rule 158 (init_var_rs -> expression SEMI .)
    EXTERN          reduce using rule 158 (init_var_rs -> expression SEMI .)
    INLINE          reduce using rule 158 (init_var_rs -> expression SEMI .)
    LONG            reduce using rule 158 (init_var_rs -> expression SEMI .)
    SHORT           reduce using rule 158 (init_var_rs -> expression SEMI .)
    SIGNED          reduce using rule 158 (init_var_rs -> expression SEMI .)
    UNSIGNED        reduce using rule 158 (init_var_rs -> expression SEMI .)
    VOLATILE        reduce using rule 158 (init_var_rs -> expression SEMI .)
    RBRACE          reduce using rule 158 (init_var_rs -> expression SEMI .)


state 168

    (161) init_var_rs -> LPAREN name . RPAREN
    (114) expression -> LPAREN name . RPAREN
    (134) expression -> name . INCREMENT
    (100) access -> name . LBRACK name RBRACK
    (101) access -> name . LBRACK expression RBRACK
    (102) access -> name . MEMBER name
    (129) operand -> name .

    RPAREN          shift and go to state 202
    INCREMENT       shift and go to state 119
    LBRACK          shift and go to state 121
    MEMBER          shift and go to state 122
    PLUS            reduce using rule 129 (operand -> name .)
    MINUS           reduce using rule 129 (operand -> name .)
    ASTERISK        reduce using rule 129 (operand -> name .)
    DIVIDE          reduce using rule 129 (operand -> name .)
    LSHIFT          reduce using rule 129 (operand -> name .)
    RSHIFT          reduce using rule 129 (operand -> name .)
    PERCENT         reduce using rule 129 (operand -> name .)
    BITAND          reduce using rule 129 (operand -> name .)
    BITOR           reduce using rule 129 (operand -> name .)
    EQ              reduce using rule 129 (operand -> name .)
    NEQ             reduce using rule 129 (operand -> name .)
    LT              reduce using rule 129 (operand -> name .)
    GT              reduce using rule 129 (operand -> name .)
    LE              reduce using rule 129 (operand -> name .)
    GE              reduce using rule 129 (operand -> name .)
    AND             reduce using rule 129 (operand -> name .)
    OR              reduce using rule 129 (operand -> name .)


state 169

    (162) init_var_rs -> error SEMI .

    INCLUDE         reduce using rule 162 (init_var_rs -> error SEMI .)
    DEFINE          reduce using rule 162 (init_var_rs -> error SEMI .)
    IFNDEF          reduce using rule 162 (init_var_rs -> error SEMI .)
    ENDIF           reduce using rule 162 (init_var_rs -> error SEMI .)
    error           reduce using rule 162 (init_var_rs -> error SEMI .)
    ELSE            reduce using rule 162 (init_var_rs -> error SEMI .)
    STRUCT          reduce using rule 162 (init_var_rs -> error SEMI .)
    CHAR            reduce using rule 162 (init_var_rs -> error SEMI .)
    DOUBLE          reduce using rule 162 (init_var_rs -> error SEMI .)
    FLOAT           reduce using rule 162 (init_var_rs -> error SEMI .)
    INT             reduce using rule 162 (init_var_rs -> error SEMI .)
    VOID            reduce using rule 162 (init_var_rs -> error SEMI .)
    INT8_T          reduce using rule 162 (init_var_rs -> error SEMI .)
    INT16_T         reduce using rule 162 (init_var_rs -> error SEMI .)
    INT32_T         reduce using rule 162 (init_var_rs -> error SEMI .)
    INT64_T         reduce using rule 162 (init_var_rs -> error SEMI .)
    UINT8_T         reduce using rule 162 (init_var_rs -> error SEMI .)
    UINT16_T        reduce using rule 162 (init_var_rs -> error SEMI .)
    UINT32_T        reduce using rule 162 (init_var_rs -> error SEMI .)
    UINT64_T        reduce using rule 162 (init_var_rs -> error SEMI .)
    ID              reduce using rule 162 (init_var_rs -> error SEMI .)
    SIZEOF          reduce using rule 162 (init_var_rs -> error SEMI .)
    LPAREN          reduce using rule 162 (init_var_rs -> error SEMI .)
    NEGATE          reduce using rule 162 (init_var_rs -> error SEMI .)
    MINUS           reduce using rule 162 (init_var_rs -> error SEMI .)
    RETURN          reduce using rule 162 (init_var_rs -> error SEMI .)
    WHILE           reduce using rule 162 (init_var_rs -> error SEMI .)
    IF              reduce using rule 162 (init_var_rs -> error SEMI .)
    FOR             reduce using rule 162 (init_var_rs -> error SEMI .)
    FLOAT_L         reduce using rule 162 (init_var_rs -> error SEMI .)
    INT_L           reduce using rule 162 (init_var_rs -> error SEMI .)
    CHAR_L          reduce using rule 162 (init_var_rs -> error SEMI .)
    STRING_L        reduce using rule 162 (init_var_rs -> error SEMI .)
    NONDECIMAL_L    reduce using rule 162 (init_var_rs -> error SEMI .)
    BITAND          reduce using rule 162 (init_var_rs -> error SEMI .)
    $end            reduce using rule 162 (init_var_rs -> error SEMI .)
    CONST           reduce using rule 162 (init_var_rs -> error SEMI .)
    EXTERN          reduce using rule 162 (init_var_rs -> error SEMI .)
    INLINE          reduce using rule 162 (init_var_rs -> error SEMI .)
    LONG            reduce using rule 162 (init_var_rs -> error SEMI .)
    SHORT           reduce using rule 162 (init_var_rs -> error SEMI .)
    SIGNED          reduce using rule 162 (init_var_rs -> error SEMI .)
    UNSIGNED        reduce using rule 162 (init_var_rs -> error SEMI .)
    VOLATILE        reduce using rule 162 (init_var_rs -> error SEMI .)
    RBRACE          reduce using rule 162 (init_var_rs -> error SEMI .)


state 170

    (155) typecast_init -> type_cast init_var_rs .

    INCLUDE         reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    DEFINE          reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    IFNDEF          reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    ENDIF           reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    error           reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    ELSE            reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    STRUCT          reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    CHAR            reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    DOUBLE          reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    FLOAT           reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    INT             reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    VOID            reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    INT8_T          reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    INT16_T         reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    INT32_T         reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    INT64_T         reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    UINT8_T         reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    UINT16_T        reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    UINT32_T        reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    UINT64_T        reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    ID              reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    SIZEOF          reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    LPAREN          reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    NEGATE          reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    MINUS           reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    RETURN          reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    WHILE           reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    IF              reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    FOR             reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    FLOAT_L         reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    INT_L           reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    CHAR_L          reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    STRING_L        reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    NONDECIMAL_L    reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    BITAND          reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    $end            reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    CONST           reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    EXTERN          reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    INLINE          reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    LONG            reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    SHORT           reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    SIGNED          reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    UNSIGNED        reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    VOLATILE        reduce using rule 155 (typecast_init -> type_cast init_var_rs .)
    RBRACE          reduce using rule 155 (typecast_init -> type_cast init_var_rs .)


state 171

    (131) operand -> type_cast name .
    (156) init_var_rs -> name . SEMI
    (134) expression -> name . INCREMENT
    (100) access -> name . LBRACK name RBRACK
    (101) access -> name . LBRACK expression RBRACK
    (102) access -> name . MEMBER name
    (129) operand -> name .

  ! reduce/reduce conflict for PLUS resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for MINUS resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for ASTERISK resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for LSHIFT resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for RSHIFT resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for PERCENT resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for BITAND resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for BITOR resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for EQ resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for NEQ resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for LT resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for GT resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for LE resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for GE resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for AND resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for OR resolved using rule 129 (operand -> name .)
    SEMI            shift and go to state 165
    INCREMENT       shift and go to state 119
    LBRACK          shift and go to state 121
    MEMBER          shift and go to state 122
    PLUS            reduce using rule 129 (operand -> name .)
    MINUS           reduce using rule 129 (operand -> name .)
    ASTERISK        reduce using rule 129 (operand -> name .)
    DIVIDE          reduce using rule 129 (operand -> name .)
    LSHIFT          reduce using rule 129 (operand -> name .)
    RSHIFT          reduce using rule 129 (operand -> name .)
    PERCENT         reduce using rule 129 (operand -> name .)
    BITAND          reduce using rule 129 (operand -> name .)
    BITOR           reduce using rule 129 (operand -> name .)
    EQ              reduce using rule 129 (operand -> name .)
    NEQ             reduce using rule 129 (operand -> name .)
    LT              reduce using rule 129 (operand -> name .)
    GT              reduce using rule 129 (operand -> name .)
    LE              reduce using rule 129 (operand -> name .)
    GE              reduce using rule 129 (operand -> name .)
    AND             reduce using rule 129 (operand -> name .)
    OR              reduce using rule 129 (operand -> name .)

  ! PLUS            [ reduce using rule 131 (operand -> type_cast name .) ]
  ! MINUS           [ reduce using rule 131 (operand -> type_cast name .) ]
  ! ASTERISK        [ reduce using rule 131 (operand -> type_cast name .) ]
  ! DIVIDE          [ reduce using rule 131 (operand -> type_cast name .) ]
  ! LSHIFT          [ reduce using rule 131 (operand -> type_cast name .) ]
  ! RSHIFT          [ reduce using rule 131 (operand -> type_cast name .) ]
  ! PERCENT         [ reduce using rule 131 (operand -> type_cast name .) ]
  ! BITAND          [ reduce using rule 131 (operand -> type_cast name .) ]
  ! BITOR           [ reduce using rule 131 (operand -> type_cast name .) ]
  ! EQ              [ reduce using rule 131 (operand -> type_cast name .) ]
  ! NEQ             [ reduce using rule 131 (operand -> type_cast name .) ]
  ! LT              [ reduce using rule 131 (operand -> type_cast name .) ]
  ! GT              [ reduce using rule 131 (operand -> type_cast name .) ]
  ! LE              [ reduce using rule 131 (operand -> type_cast name .) ]
  ! GE              [ reduce using rule 131 (operand -> type_cast name .) ]
  ! AND             [ reduce using rule 131 (operand -> type_cast name .) ]
  ! OR              [ reduce using rule 131 (operand -> type_cast name .) ]


state 172

    (154) vector_init_rs -> vector_body SEMI .

    INCLUDE         reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    DEFINE          reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    IFNDEF          reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    ENDIF           reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    error           reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    ELSE            reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    STRUCT          reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    CHAR            reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    DOUBLE          reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    FLOAT           reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    INT             reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    VOID            reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    INT8_T          reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    INT16_T         reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    INT32_T         reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    INT64_T         reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    UINT8_T         reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    UINT16_T        reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    UINT32_T        reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    UINT64_T        reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    ID              reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    SIZEOF          reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    LPAREN          reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    NEGATE          reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    MINUS           reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    RETURN          reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    WHILE           reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    IF              reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    FOR             reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    FLOAT_L         reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    INT_L           reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    CHAR_L          reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    STRING_L        reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    NONDECIMAL_L    reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    BITAND          reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    $end            reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    CONST           reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    EXTERN          reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    INLINE          reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    LONG            reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    SHORT           reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    SIGNED          reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    UNSIGNED        reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    VOLATILE        reduce using rule 154 (vector_init_rs -> vector_body SEMI .)
    RBRACE          reduce using rule 154 (vector_init_rs -> vector_body SEMI .)


state 173

    (153) vector_body -> LBRACE vec_item_list . RBRACE
    (151) vec_item_list -> vec_item_list . vector_item
    (152) vec_item_list -> vec_item_list . vector_item COMMA
    (147) vector_item -> . name
    (148) vector_item -> . func_call
    (149) vector_item -> . vector_body
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (98) func_call -> . ID LPAREN func_arglist RPAREN
    (99) func_call -> . SIZEOF LPAREN func_arglist RPAREN
    (153) vector_body -> . LBRACE vec_item_list RBRACE
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name

    RBRACE          shift and go to state 203
    ID              shift and go to state 71
    SIZEOF          shift and go to state 44
    LBRACE          shift and go to state 111
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64

    vector_item                    shift and go to state 204
    name                           shift and go to state 205
    func_call                      shift and go to state 206
    vector_body                    shift and go to state 207
    literal                        shift and go to state 57
    access                         shift and go to state 58

state 174

    (146) init_var_ls -> declare_var_ls vector_init_list assign .

    LPAREN          reduce using rule 146 (init_var_ls -> declare_var_ls vector_init_list assign .)
    error           reduce using rule 146 (init_var_ls -> declare_var_ls vector_init_list assign .)
    ID              reduce using rule 146 (init_var_ls -> declare_var_ls vector_init_list assign .)
    SIZEOF          reduce using rule 146 (init_var_ls -> declare_var_ls vector_init_list assign .)
    NEGATE          reduce using rule 146 (init_var_ls -> declare_var_ls vector_init_list assign .)
    MINUS           reduce using rule 146 (init_var_ls -> declare_var_ls vector_init_list assign .)
    FLOAT_L         reduce using rule 146 (init_var_ls -> declare_var_ls vector_init_list assign .)
    INT_L           reduce using rule 146 (init_var_ls -> declare_var_ls vector_init_list assign .)
    CHAR_L          reduce using rule 146 (init_var_ls -> declare_var_ls vector_init_list assign .)
    STRING_L        reduce using rule 146 (init_var_ls -> declare_var_ls vector_init_list assign .)
    NONDECIMAL_L    reduce using rule 146 (init_var_ls -> declare_var_ls vector_init_list assign .)
    BITAND          reduce using rule 146 (init_var_ls -> declare_var_ls vector_init_list assign .)
    LBRACE          reduce using rule 146 (init_var_ls -> declare_var_ls vector_init_list assign .)


state 175

    (144) vector_init_list -> vector_init_list vector_init .

    SIMPLE_ASSIGN   reduce using rule 144 (vector_init_list -> vector_init_list vector_init .)
    COMPLEX_ASSIGN  reduce using rule 144 (vector_init_list -> vector_init_list vector_init .)
    LBRACK          reduce using rule 144 (vector_init_list -> vector_init_list vector_init .)


state 176

    (141) vector_init -> LBRACK . RBRACK
    (142) vector_init -> LBRACK . name RBRACK
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name

    RBRACK          shift and go to state 208
    ID              shift and go to state 150
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64

    name                           shift and go to state 209
    literal                        shift and go to state 57
    access                         shift and go to state 58

state 177

    (100) access -> name LBRACK name . RBRACK
    (134) expression -> name . INCREMENT
    (100) access -> name . LBRACK name RBRACK
    (101) access -> name . LBRACK expression RBRACK
    (102) access -> name . MEMBER name
    (129) operand -> name .

    RBRACK          shift and go to state 210
    INCREMENT       shift and go to state 119
    LBRACK          shift and go to state 121
    MEMBER          shift and go to state 122
    PLUS            reduce using rule 129 (operand -> name .)
    MINUS           reduce using rule 129 (operand -> name .)
    ASTERISK        reduce using rule 129 (operand -> name .)
    DIVIDE          reduce using rule 129 (operand -> name .)
    LSHIFT          reduce using rule 129 (operand -> name .)
    RSHIFT          reduce using rule 129 (operand -> name .)
    PERCENT         reduce using rule 129 (operand -> name .)
    BITAND          reduce using rule 129 (operand -> name .)
    BITOR           reduce using rule 129 (operand -> name .)
    EQ              reduce using rule 129 (operand -> name .)
    NEQ             reduce using rule 129 (operand -> name .)
    LT              reduce using rule 129 (operand -> name .)
    GT              reduce using rule 129 (operand -> name .)
    LE              reduce using rule 129 (operand -> name .)
    GE              reduce using rule 129 (operand -> name .)
    AND             reduce using rule 129 (operand -> name .)
    OR              reduce using rule 129 (operand -> name .)


state 178

    (101) access -> name LBRACK expression . RBRACK
    (130) operand -> expression .

    RBRACK          shift and go to state 211
    PLUS            reduce using rule 130 (operand -> expression .)
    MINUS           reduce using rule 130 (operand -> expression .)
    ASTERISK        reduce using rule 130 (operand -> expression .)
    DIVIDE          reduce using rule 130 (operand -> expression .)
    LSHIFT          reduce using rule 130 (operand -> expression .)
    RSHIFT          reduce using rule 130 (operand -> expression .)
    PERCENT         reduce using rule 130 (operand -> expression .)
    BITAND          reduce using rule 130 (operand -> expression .)
    BITOR           reduce using rule 130 (operand -> expression .)
    EQ              reduce using rule 130 (operand -> expression .)
    NEQ             reduce using rule 130 (operand -> expression .)
    LT              reduce using rule 130 (operand -> expression .)
    GT              reduce using rule 130 (operand -> expression .)
    LE              reduce using rule 130 (operand -> expression .)
    GE              reduce using rule 130 (operand -> expression .)
    AND             reduce using rule 130 (operand -> expression .)
    OR              reduce using rule 130 (operand -> expression .)


state 179

    (102) access -> name MEMBER name .
    (100) access -> name . LBRACK name RBRACK
    (101) access -> name . LBRACK expression RBRACK
    (102) access -> name . MEMBER name

  ! shift/reduce conflict for LBRACK resolved as shift
  ! shift/reduce conflict for MEMBER resolved as shift
    INCREMENT       reduce using rule 102 (access -> name MEMBER name .)
    SIMPLE_ASSIGN   reduce using rule 102 (access -> name MEMBER name .)
    COMPLEX_ASSIGN  reduce using rule 102 (access -> name MEMBER name .)
    PLUS            reduce using rule 102 (access -> name MEMBER name .)
    MINUS           reduce using rule 102 (access -> name MEMBER name .)
    ASTERISK        reduce using rule 102 (access -> name MEMBER name .)
    DIVIDE          reduce using rule 102 (access -> name MEMBER name .)
    LSHIFT          reduce using rule 102 (access -> name MEMBER name .)
    RSHIFT          reduce using rule 102 (access -> name MEMBER name .)
    PERCENT         reduce using rule 102 (access -> name MEMBER name .)
    BITAND          reduce using rule 102 (access -> name MEMBER name .)
    BITOR           reduce using rule 102 (access -> name MEMBER name .)
    EQ              reduce using rule 102 (access -> name MEMBER name .)
    NEQ             reduce using rule 102 (access -> name MEMBER name .)
    LT              reduce using rule 102 (access -> name MEMBER name .)
    GT              reduce using rule 102 (access -> name MEMBER name .)
    LE              reduce using rule 102 (access -> name MEMBER name .)
    GE              reduce using rule 102 (access -> name MEMBER name .)
    AND             reduce using rule 102 (access -> name MEMBER name .)
    OR              reduce using rule 102 (access -> name MEMBER name .)
    RPAREN          reduce using rule 102 (access -> name MEMBER name .)
    ID              reduce using rule 102 (access -> name MEMBER name .)
    SEMI            reduce using rule 102 (access -> name MEMBER name .)
    RBRACK          reduce using rule 102 (access -> name MEMBER name .)
    COMMA           reduce using rule 102 (access -> name MEMBER name .)
    CHAR            reduce using rule 102 (access -> name MEMBER name .)
    DOUBLE          reduce using rule 102 (access -> name MEMBER name .)
    FLOAT           reduce using rule 102 (access -> name MEMBER name .)
    INT             reduce using rule 102 (access -> name MEMBER name .)
    VOID            reduce using rule 102 (access -> name MEMBER name .)
    INT8_T          reduce using rule 102 (access -> name MEMBER name .)
    INT16_T         reduce using rule 102 (access -> name MEMBER name .)
    INT32_T         reduce using rule 102 (access -> name MEMBER name .)
    INT64_T         reduce using rule 102 (access -> name MEMBER name .)
    UINT8_T         reduce using rule 102 (access -> name MEMBER name .)
    UINT16_T        reduce using rule 102 (access -> name MEMBER name .)
    UINT32_T        reduce using rule 102 (access -> name MEMBER name .)
    UINT64_T        reduce using rule 102 (access -> name MEMBER name .)
    LPAREN          reduce using rule 102 (access -> name MEMBER name .)
    NEGATE          reduce using rule 102 (access -> name MEMBER name .)
    SIZEOF          reduce using rule 102 (access -> name MEMBER name .)
    FLOAT_L         reduce using rule 102 (access -> name MEMBER name .)
    INT_L           reduce using rule 102 (access -> name MEMBER name .)
    CHAR_L          reduce using rule 102 (access -> name MEMBER name .)
    STRING_L        reduce using rule 102 (access -> name MEMBER name .)
    NONDECIMAL_L    reduce using rule 102 (access -> name MEMBER name .)
    STRUCT          reduce using rule 102 (access -> name MEMBER name .)
    CONST           reduce using rule 102 (access -> name MEMBER name .)
    EXTERN          reduce using rule 102 (access -> name MEMBER name .)
    INLINE          reduce using rule 102 (access -> name MEMBER name .)
    LONG            reduce using rule 102 (access -> name MEMBER name .)
    SHORT           reduce using rule 102 (access -> name MEMBER name .)
    SIGNED          reduce using rule 102 (access -> name MEMBER name .)
    UNSIGNED        reduce using rule 102 (access -> name MEMBER name .)
    VOLATILE        reduce using rule 102 (access -> name MEMBER name .)
    RBRACE          reduce using rule 102 (access -> name MEMBER name .)
    LBRACE          reduce using rule 102 (access -> name MEMBER name .)
    LBRACK          shift and go to state 121
    MEMBER          shift and go to state 122

  ! LBRACK          [ reduce using rule 102 (access -> name MEMBER name .) ]
  ! MEMBER          [ reduce using rule 102 (access -> name MEMBER name .) ]


state 180

    (133) expression -> operand binop operand .
    (133) expression -> operand . binop operand
    (119) binop -> . PLUS
    (120) binop -> . MINUS
    (121) binop -> . ASTERISK
    (122) binop -> . DIVIDE
    (123) binop -> . LSHIFT
    (124) binop -> . RSHIFT
    (125) binop -> . PERCENT
    (126) binop -> . BITAND
    (127) binop -> . BITOR
    (128) binop -> . conditional
    (57) conditional -> . EQ
    (58) conditional -> . NEQ
    (59) conditional -> . LT
    (60) conditional -> . GT
    (61) conditional -> . LE
    (62) conditional -> . GE
    (63) conditional -> . AND
    (64) conditional -> . OR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for ASTERISK resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for BITAND resolved as shift
  ! shift/reduce conflict for BITOR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI            reduce using rule 133 (expression -> operand binop operand .)
    RPAREN          reduce using rule 133 (expression -> operand binop operand .)
    RBRACK          reduce using rule 133 (expression -> operand binop operand .)
    COMMA           reduce using rule 133 (expression -> operand binop operand .)
    ID              reduce using rule 133 (expression -> operand binop operand .)
    CHAR            reduce using rule 133 (expression -> operand binop operand .)
    DOUBLE          reduce using rule 133 (expression -> operand binop operand .)
    FLOAT           reduce using rule 133 (expression -> operand binop operand .)
    INT             reduce using rule 133 (expression -> operand binop operand .)
    VOID            reduce using rule 133 (expression -> operand binop operand .)
    INT8_T          reduce using rule 133 (expression -> operand binop operand .)
    INT16_T         reduce using rule 133 (expression -> operand binop operand .)
    INT32_T         reduce using rule 133 (expression -> operand binop operand .)
    INT64_T         reduce using rule 133 (expression -> operand binop operand .)
    UINT8_T         reduce using rule 133 (expression -> operand binop operand .)
    UINT16_T        reduce using rule 133 (expression -> operand binop operand .)
    UINT32_T        reduce using rule 133 (expression -> operand binop operand .)
    UINT64_T        reduce using rule 133 (expression -> operand binop operand .)
    LPAREN          reduce using rule 133 (expression -> operand binop operand .)
    NEGATE          reduce using rule 133 (expression -> operand binop operand .)
    SIZEOF          reduce using rule 133 (expression -> operand binop operand .)
    FLOAT_L         reduce using rule 133 (expression -> operand binop operand .)
    INT_L           reduce using rule 133 (expression -> operand binop operand .)
    CHAR_L          reduce using rule 133 (expression -> operand binop operand .)
    STRING_L        reduce using rule 133 (expression -> operand binop operand .)
    NONDECIMAL_L    reduce using rule 133 (expression -> operand binop operand .)
    STRUCT          reduce using rule 133 (expression -> operand binop operand .)
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129
    ASTERISK        shift and go to state 130
    DIVIDE          shift and go to state 131
    LSHIFT          shift and go to state 132
    RSHIFT          shift and go to state 133
    PERCENT         shift and go to state 134
    BITAND          shift and go to state 135
    BITOR           shift and go to state 136
    EQ              shift and go to state 138
    NEQ             shift and go to state 139
    LT              shift and go to state 140
    GT              shift and go to state 141
    LE              shift and go to state 142
    GE              shift and go to state 143
    AND             shift and go to state 144
    OR              shift and go to state 145

  ! PLUS            [ reduce using rule 133 (expression -> operand binop operand .) ]
  ! MINUS           [ reduce using rule 133 (expression -> operand binop operand .) ]
  ! ASTERISK        [ reduce using rule 133 (expression -> operand binop operand .) ]
  ! DIVIDE          [ reduce using rule 133 (expression -> operand binop operand .) ]
  ! LSHIFT          [ reduce using rule 133 (expression -> operand binop operand .) ]
  ! RSHIFT          [ reduce using rule 133 (expression -> operand binop operand .) ]
  ! PERCENT         [ reduce using rule 133 (expression -> operand binop operand .) ]
  ! BITAND          [ reduce using rule 133 (expression -> operand binop operand .) ]
  ! BITOR           [ reduce using rule 133 (expression -> operand binop operand .) ]
  ! EQ              [ reduce using rule 133 (expression -> operand binop operand .) ]
  ! NEQ             [ reduce using rule 133 (expression -> operand binop operand .) ]
  ! LT              [ reduce using rule 133 (expression -> operand binop operand .) ]
  ! GT              [ reduce using rule 133 (expression -> operand binop operand .) ]
  ! LE              [ reduce using rule 133 (expression -> operand binop operand .) ]
  ! GE              [ reduce using rule 133 (expression -> operand binop operand .) ]
  ! AND             [ reduce using rule 133 (expression -> operand binop operand .) ]
  ! OR              [ reduce using rule 133 (expression -> operand binop operand .) ]

    binop                          shift and go to state 127
    conditional                    shift and go to state 137

state 181

    (129) operand -> name .
    (134) expression -> name . INCREMENT
    (100) access -> name . LBRACK name RBRACK
    (101) access -> name . LBRACK expression RBRACK
    (102) access -> name . MEMBER name

    SEMI            reduce using rule 129 (operand -> name .)
    PLUS            reduce using rule 129 (operand -> name .)
    MINUS           reduce using rule 129 (operand -> name .)
    ASTERISK        reduce using rule 129 (operand -> name .)
    DIVIDE          reduce using rule 129 (operand -> name .)
    LSHIFT          reduce using rule 129 (operand -> name .)
    RSHIFT          reduce using rule 129 (operand -> name .)
    PERCENT         reduce using rule 129 (operand -> name .)
    BITAND          reduce using rule 129 (operand -> name .)
    BITOR           reduce using rule 129 (operand -> name .)
    EQ              reduce using rule 129 (operand -> name .)
    NEQ             reduce using rule 129 (operand -> name .)
    LT              reduce using rule 129 (operand -> name .)
    GT              reduce using rule 129 (operand -> name .)
    LE              reduce using rule 129 (operand -> name .)
    GE              reduce using rule 129 (operand -> name .)
    AND             reduce using rule 129 (operand -> name .)
    OR              reduce using rule 129 (operand -> name .)
    RPAREN          reduce using rule 129 (operand -> name .)
    RBRACK          reduce using rule 129 (operand -> name .)
    COMMA           reduce using rule 129 (operand -> name .)
    ID              reduce using rule 129 (operand -> name .)
    CHAR            reduce using rule 129 (operand -> name .)
    DOUBLE          reduce using rule 129 (operand -> name .)
    FLOAT           reduce using rule 129 (operand -> name .)
    INT             reduce using rule 129 (operand -> name .)
    VOID            reduce using rule 129 (operand -> name .)
    INT8_T          reduce using rule 129 (operand -> name .)
    INT16_T         reduce using rule 129 (operand -> name .)
    INT32_T         reduce using rule 129 (operand -> name .)
    INT64_T         reduce using rule 129 (operand -> name .)
    UINT8_T         reduce using rule 129 (operand -> name .)
    UINT16_T        reduce using rule 129 (operand -> name .)
    UINT32_T        reduce using rule 129 (operand -> name .)
    UINT64_T        reduce using rule 129 (operand -> name .)
    LPAREN          reduce using rule 129 (operand -> name .)
    NEGATE          reduce using rule 129 (operand -> name .)
    SIZEOF          reduce using rule 129 (operand -> name .)
    FLOAT_L         reduce using rule 129 (operand -> name .)
    INT_L           reduce using rule 129 (operand -> name .)
    CHAR_L          reduce using rule 129 (operand -> name .)
    STRING_L        reduce using rule 129 (operand -> name .)
    NONDECIMAL_L    reduce using rule 129 (operand -> name .)
    STRUCT          reduce using rule 129 (operand -> name .)
    INCREMENT       shift and go to state 119
    LBRACK          shift and go to state 121
    MEMBER          shift and go to state 122


state 182

    (130) operand -> expression .

    SEMI            reduce using rule 130 (operand -> expression .)
    PLUS            reduce using rule 130 (operand -> expression .)
    MINUS           reduce using rule 130 (operand -> expression .)
    ASTERISK        reduce using rule 130 (operand -> expression .)
    DIVIDE          reduce using rule 130 (operand -> expression .)
    LSHIFT          reduce using rule 130 (operand -> expression .)
    RSHIFT          reduce using rule 130 (operand -> expression .)
    PERCENT         reduce using rule 130 (operand -> expression .)
    BITAND          reduce using rule 130 (operand -> expression .)
    BITOR           reduce using rule 130 (operand -> expression .)
    EQ              reduce using rule 130 (operand -> expression .)
    NEQ             reduce using rule 130 (operand -> expression .)
    LT              reduce using rule 130 (operand -> expression .)
    GT              reduce using rule 130 (operand -> expression .)
    LE              reduce using rule 130 (operand -> expression .)
    GE              reduce using rule 130 (operand -> expression .)
    AND             reduce using rule 130 (operand -> expression .)
    OR              reduce using rule 130 (operand -> expression .)
    RPAREN          reduce using rule 130 (operand -> expression .)
    RBRACK          reduce using rule 130 (operand -> expression .)
    COMMA           reduce using rule 130 (operand -> expression .)
    ID              reduce using rule 130 (operand -> expression .)
    CHAR            reduce using rule 130 (operand -> expression .)
    DOUBLE          reduce using rule 130 (operand -> expression .)
    FLOAT           reduce using rule 130 (operand -> expression .)
    INT             reduce using rule 130 (operand -> expression .)
    VOID            reduce using rule 130 (operand -> expression .)
    INT8_T          reduce using rule 130 (operand -> expression .)
    INT16_T         reduce using rule 130 (operand -> expression .)
    INT32_T         reduce using rule 130 (operand -> expression .)
    INT64_T         reduce using rule 130 (operand -> expression .)
    UINT8_T         reduce using rule 130 (operand -> expression .)
    UINT16_T        reduce using rule 130 (operand -> expression .)
    UINT32_T        reduce using rule 130 (operand -> expression .)
    UINT64_T        reduce using rule 130 (operand -> expression .)
    LPAREN          reduce using rule 130 (operand -> expression .)
    NEGATE          reduce using rule 130 (operand -> expression .)
    SIZEOF          reduce using rule 130 (operand -> expression .)
    FLOAT_L         reduce using rule 130 (operand -> expression .)
    INT_L           reduce using rule 130 (operand -> expression .)
    CHAR_L          reduce using rule 130 (operand -> expression .)
    STRING_L        reduce using rule 130 (operand -> expression .)
    NONDECIMAL_L    reduce using rule 130 (operand -> expression .)
    STRUCT          reduce using rule 130 (operand -> expression .)


state 183

    (71) for_loop -> FOR LPAREN init_var . conditional_expr SEMI ID INCREMENT RPAREN
    (65) conditional_expr -> . name conditional expression
    (66) conditional_expr -> . expression conditional name
    (67) conditional_expr -> . expression conditional expression
    (68) conditional_expr -> . name conditional name
    (69) conditional_expr -> . name
    (70) conditional_expr -> . expression
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (113) expression -> . LPAREN expression RPAREN
    (114) expression -> . LPAREN name RPAREN
    (115) expression -> . NEGATE expression
    (116) expression -> . MINUS expression
    (117) expression -> . NEGATE name
    (118) expression -> . MINUS name
    (133) expression -> . operand binop operand
    (134) expression -> . name INCREMENT
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name
    (129) operand -> . name
    (130) operand -> . expression
    (131) operand -> . type_cast name
    (132) operand -> . func_call
    (19) type_cast -> . LPAREN dtype RPAREN
    (98) func_call -> . ID LPAREN func_arglist RPAREN
    (99) func_call -> . SIZEOF LPAREN func_arglist RPAREN

    ID              shift and go to state 71
    LPAREN          shift and go to state 17
    NEGATE          shift and go to state 49
    MINUS           shift and go to state 50
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64
    SIZEOF          shift and go to state 44

    conditional_expr               shift and go to state 212
    name                           shift and go to state 161
    expression                     shift and go to state 162
    literal                        shift and go to state 57
    access                         shift and go to state 58
    operand                        shift and go to state 51
    type_cast                      shift and go to state 56
    func_call                      shift and go to state 72

state 184

    (145) init_var_ls -> declare_var_ls . assign
    (146) init_var_ls -> declare_var_ls . vector_init_list assign
    (16) assign -> . SIMPLE_ASSIGN
    (17) assign -> . COMPLEX_ASSIGN
    (143) vector_init_list -> .
    (144) vector_init_list -> . vector_init_list vector_init

  ! shift/reduce conflict for SIMPLE_ASSIGN resolved as shift
  ! shift/reduce conflict for COMPLEX_ASSIGN resolved as shift
    SIMPLE_ASSIGN   shift and go to state 117
    COMPLEX_ASSIGN  shift and go to state 118
    LBRACK          reduce using rule 143 (vector_init_list -> .)

  ! SIMPLE_ASSIGN   [ reduce using rule 143 (vector_init_list -> .) ]
  ! COMPLEX_ASSIGN  [ reduce using rule 143 (vector_init_list -> .) ]

    assign                         shift and go to state 115
    vector_init_list               shift and go to state 116

state 185

    (137) declare_var_ls -> dtype . ID
    (44) dtype -> dtype . ASTERISK

    ID              shift and go to state 213
    ASTERISK        shift and go to state 66


state 186

    (138) declare_var_ls -> modifier_list . ID
    (139) declare_var_ls -> modifier_list . dtype ID
    (29) modifier_list -> modifier_list . modifier
    (30) dtype -> . CHAR
    (31) dtype -> . DOUBLE
    (32) dtype -> . FLOAT
    (33) dtype -> . INT
    (34) dtype -> . VOID
    (35) dtype -> . INT8_T
    (36) dtype -> . INT16_T
    (37) dtype -> . INT32_T
    (38) dtype -> . INT64_T
    (39) dtype -> . UINT8_T
    (40) dtype -> . UINT16_T
    (41) dtype -> . UINT32_T
    (42) dtype -> . UINT64_T
    (43) dtype -> . struct_type
    (44) dtype -> . dtype ASTERISK
    (20) modifier -> . CONST
    (21) modifier -> . EXTERN
    (22) modifier -> . INLINE
    (23) modifier -> . LONG
    (24) modifier -> . SHORT
    (25) modifier -> . SIGNED
    (26) modifier -> . UNSIGNED
    (27) modifier -> . VOLATILE
    (18) struct_type -> . STRUCT name

    ID              shift and go to state 75
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 31
    FLOAT           shift and go to state 32
    INT             shift and go to state 33
    VOID            shift and go to state 34
    INT8_T          shift and go to state 35
    INT16_T         shift and go to state 36
    INT32_T         shift and go to state 37
    INT64_T         shift and go to state 38
    UINT8_T         shift and go to state 39
    UINT16_T        shift and go to state 40
    UINT32_T        shift and go to state 41
    UINT64_T        shift and go to state 42
    CONST           shift and go to state 77
    EXTERN          shift and go to state 78
    INLINE          shift and go to state 79
    LONG            shift and go to state 80
    SHORT           shift and go to state 81
    SIGNED          shift and go to state 82
    UNSIGNED        shift and go to state 83
    VOLATILE        shift and go to state 84
    STRUCT          shift and go to state 73

    dtype                          shift and go to state 214
    modifier                       shift and go to state 76
    struct_type                    shift and go to state 43

state 187

    (83) func_def -> dtype ID LPAREN func_def_arglist . RPAREN scope
    (87) func_decl -> dtype ID LPAREN func_def_arglist . RPAREN SEMI
    (81) func_def_arglist -> func_def_arglist . func_def_arg
    (82) func_def_arglist -> func_def_arglist . func_def_arg COMMA
    (77) func_def_arg -> . dtype
    (78) func_def_arg -> . dtype name
    (79) func_def_arg -> . modifier_list dtype name
    (30) dtype -> . CHAR
    (31) dtype -> . DOUBLE
    (32) dtype -> . FLOAT
    (33) dtype -> . INT
    (34) dtype -> . VOID
    (35) dtype -> . INT8_T
    (36) dtype -> . INT16_T
    (37) dtype -> . INT32_T
    (38) dtype -> . INT64_T
    (39) dtype -> . UINT8_T
    (40) dtype -> . UINT16_T
    (41) dtype -> . UINT32_T
    (42) dtype -> . UINT64_T
    (43) dtype -> . struct_type
    (44) dtype -> . dtype ASTERISK
    (28) modifier_list -> .
    (29) modifier_list -> . modifier_list modifier
    (18) struct_type -> . STRUCT name

  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT8_T resolved as shift
  ! shift/reduce conflict for INT16_T resolved as shift
  ! shift/reduce conflict for INT32_T resolved as shift
  ! shift/reduce conflict for INT64_T resolved as shift
  ! shift/reduce conflict for UINT8_T resolved as shift
  ! shift/reduce conflict for UINT16_T resolved as shift
  ! shift/reduce conflict for UINT32_T resolved as shift
  ! shift/reduce conflict for UINT64_T resolved as shift
  ! shift/reduce conflict for STRUCT resolved as shift
    RPAREN          shift and go to state 216
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 31
    FLOAT           shift and go to state 32
    INT             shift and go to state 33
    VOID            shift and go to state 34
    INT8_T          shift and go to state 35
    INT16_T         shift and go to state 36
    INT32_T         shift and go to state 37
    INT64_T         shift and go to state 38
    UINT8_T         shift and go to state 39
    UINT16_T        shift and go to state 40
    UINT32_T        shift and go to state 41
    UINT64_T        shift and go to state 42
    CONST           reduce using rule 28 (modifier_list -> .)
    EXTERN          reduce using rule 28 (modifier_list -> .)
    INLINE          reduce using rule 28 (modifier_list -> .)
    LONG            reduce using rule 28 (modifier_list -> .)
    SHORT           reduce using rule 28 (modifier_list -> .)
    SIGNED          reduce using rule 28 (modifier_list -> .)
    UNSIGNED        reduce using rule 28 (modifier_list -> .)
    VOLATILE        reduce using rule 28 (modifier_list -> .)
    STRUCT          shift and go to state 73

  ! CHAR            [ reduce using rule 28 (modifier_list -> .) ]
  ! DOUBLE          [ reduce using rule 28 (modifier_list -> .) ]
  ! FLOAT           [ reduce using rule 28 (modifier_list -> .) ]
  ! INT             [ reduce using rule 28 (modifier_list -> .) ]
  ! VOID            [ reduce using rule 28 (modifier_list -> .) ]
  ! INT8_T          [ reduce using rule 28 (modifier_list -> .) ]
  ! INT16_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! INT32_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! INT64_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT8_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT16_T        [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT32_T        [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT64_T        [ reduce using rule 28 (modifier_list -> .) ]
  ! STRUCT          [ reduce using rule 28 (modifier_list -> .) ]

    dtype                          shift and go to state 215
    func_def_arg                   shift and go to state 217
    modifier_list                  shift and go to state 218
    struct_type                    shift and go to state 43

state 188

    (98) func_call -> ID LPAREN func_arglist RPAREN .

    SEMI            reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    LBRACE          reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    error           reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    PLUS            reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    MINUS           reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    ASTERISK        reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    DIVIDE          reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    LSHIFT          reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    RSHIFT          reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    PERCENT         reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    BITAND          reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    BITOR           reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    EQ              reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    NEQ             reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    LT              reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    GT              reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    LE              reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    GE              reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    AND             reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    OR              reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    RPAREN          reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    RBRACK          reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    COMMA           reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    ID              reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    CHAR            reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    DOUBLE          reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    FLOAT           reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    INT             reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    VOID            reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    INT8_T          reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    INT16_T         reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    INT32_T         reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    INT64_T         reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    UINT8_T         reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    UINT16_T        reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    UINT32_T        reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    UINT64_T        reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    LPAREN          reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    NEGATE          reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    SIZEOF          reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    FLOAT_L         reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    INT_L           reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    CHAR_L          reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    STRING_L        reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    NONDECIMAL_L    reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    STRUCT          reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)
    RBRACE          reduce using rule 98 (func_call -> ID LPAREN func_arglist RPAREN .)


state 189

    (96) func_arglist -> func_arglist func_arg .
    (97) func_arglist -> func_arglist func_arg . COMMA

    RPAREN          reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    ID              reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    CHAR            reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    DOUBLE          reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    FLOAT           reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    INT             reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    VOID            reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    INT8_T          reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    INT16_T         reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    INT32_T         reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    INT64_T         reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    UINT8_T         reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    UINT16_T        reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    UINT32_T        reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    UINT64_T        reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    LPAREN          reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    NEGATE          reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    MINUS           reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    SIZEOF          reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    FLOAT_L         reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    INT_L           reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    CHAR_L          reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    STRING_L        reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    NONDECIMAL_L    reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    BITAND          reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    STRUCT          reduce using rule 96 (func_arglist -> func_arglist func_arg .)
    COMMA           shift and go to state 219


state 190

    (88) func_arg -> name .
    (134) expression -> name . INCREMENT
    (100) access -> name . LBRACK name RBRACK
    (101) access -> name . LBRACK expression RBRACK
    (102) access -> name . MEMBER name
    (129) operand -> name .

  ! reduce/reduce conflict for MINUS resolved using rule 88 (func_arg -> name .)
  ! reduce/reduce conflict for BITAND resolved using rule 88 (func_arg -> name .)
    COMMA           reduce using rule 88 (func_arg -> name .)
    RPAREN          reduce using rule 88 (func_arg -> name .)
    ID              reduce using rule 88 (func_arg -> name .)
    CHAR            reduce using rule 88 (func_arg -> name .)
    DOUBLE          reduce using rule 88 (func_arg -> name .)
    FLOAT           reduce using rule 88 (func_arg -> name .)
    INT             reduce using rule 88 (func_arg -> name .)
    VOID            reduce using rule 88 (func_arg -> name .)
    INT8_T          reduce using rule 88 (func_arg -> name .)
    INT16_T         reduce using rule 88 (func_arg -> name .)
    INT32_T         reduce using rule 88 (func_arg -> name .)
    INT64_T         reduce using rule 88 (func_arg -> name .)
    UINT8_T         reduce using rule 88 (func_arg -> name .)
    UINT16_T        reduce using rule 88 (func_arg -> name .)
    UINT32_T        reduce using rule 88 (func_arg -> name .)
    UINT64_T        reduce using rule 88 (func_arg -> name .)
    LPAREN          reduce using rule 88 (func_arg -> name .)
    NEGATE          reduce using rule 88 (func_arg -> name .)
    MINUS           reduce using rule 88 (func_arg -> name .)
    SIZEOF          reduce using rule 88 (func_arg -> name .)
    FLOAT_L         reduce using rule 88 (func_arg -> name .)
    INT_L           reduce using rule 88 (func_arg -> name .)
    CHAR_L          reduce using rule 88 (func_arg -> name .)
    STRING_L        reduce using rule 88 (func_arg -> name .)
    NONDECIMAL_L    reduce using rule 88 (func_arg -> name .)
    BITAND          reduce using rule 88 (func_arg -> name .)
    STRUCT          reduce using rule 88 (func_arg -> name .)
    INCREMENT       shift and go to state 119
    LBRACK          shift and go to state 121
    MEMBER          shift and go to state 122
    PLUS            reduce using rule 129 (operand -> name .)
    ASTERISK        reduce using rule 129 (operand -> name .)
    DIVIDE          reduce using rule 129 (operand -> name .)
    LSHIFT          reduce using rule 129 (operand -> name .)
    RSHIFT          reduce using rule 129 (operand -> name .)
    PERCENT         reduce using rule 129 (operand -> name .)
    BITOR           reduce using rule 129 (operand -> name .)
    EQ              reduce using rule 129 (operand -> name .)
    NEQ             reduce using rule 129 (operand -> name .)
    LT              reduce using rule 129 (operand -> name .)
    GT              reduce using rule 129 (operand -> name .)
    LE              reduce using rule 129 (operand -> name .)
    GE              reduce using rule 129 (operand -> name .)
    AND             reduce using rule 129 (operand -> name .)
    OR              reduce using rule 129 (operand -> name .)

  ! MINUS           [ reduce using rule 129 (operand -> name .) ]
  ! BITAND          [ reduce using rule 129 (operand -> name .) ]


state 191

    (89) func_arg -> dtype .
    (44) dtype -> dtype . ASTERISK

    COMMA           reduce using rule 89 (func_arg -> dtype .)
    RPAREN          reduce using rule 89 (func_arg -> dtype .)
    ID              reduce using rule 89 (func_arg -> dtype .)
    CHAR            reduce using rule 89 (func_arg -> dtype .)
    DOUBLE          reduce using rule 89 (func_arg -> dtype .)
    FLOAT           reduce using rule 89 (func_arg -> dtype .)
    INT             reduce using rule 89 (func_arg -> dtype .)
    VOID            reduce using rule 89 (func_arg -> dtype .)
    INT8_T          reduce using rule 89 (func_arg -> dtype .)
    INT16_T         reduce using rule 89 (func_arg -> dtype .)
    INT32_T         reduce using rule 89 (func_arg -> dtype .)
    INT64_T         reduce using rule 89 (func_arg -> dtype .)
    UINT8_T         reduce using rule 89 (func_arg -> dtype .)
    UINT16_T        reduce using rule 89 (func_arg -> dtype .)
    UINT32_T        reduce using rule 89 (func_arg -> dtype .)
    UINT64_T        reduce using rule 89 (func_arg -> dtype .)
    LPAREN          reduce using rule 89 (func_arg -> dtype .)
    NEGATE          reduce using rule 89 (func_arg -> dtype .)
    MINUS           reduce using rule 89 (func_arg -> dtype .)
    SIZEOF          reduce using rule 89 (func_arg -> dtype .)
    FLOAT_L         reduce using rule 89 (func_arg -> dtype .)
    INT_L           reduce using rule 89 (func_arg -> dtype .)
    CHAR_L          reduce using rule 89 (func_arg -> dtype .)
    STRING_L        reduce using rule 89 (func_arg -> dtype .)
    NONDECIMAL_L    reduce using rule 89 (func_arg -> dtype .)
    BITAND          reduce using rule 89 (func_arg -> dtype .)
    STRUCT          reduce using rule 89 (func_arg -> dtype .)
    ASTERISK        shift and go to state 66


state 192

    (90) func_arg -> expression .
    (130) operand -> expression .

  ! reduce/reduce conflict for MINUS resolved using rule 90 (func_arg -> expression .)
  ! reduce/reduce conflict for BITAND resolved using rule 90 (func_arg -> expression .)
    COMMA           reduce using rule 90 (func_arg -> expression .)
    RPAREN          reduce using rule 90 (func_arg -> expression .)
    ID              reduce using rule 90 (func_arg -> expression .)
    CHAR            reduce using rule 90 (func_arg -> expression .)
    DOUBLE          reduce using rule 90 (func_arg -> expression .)
    FLOAT           reduce using rule 90 (func_arg -> expression .)
    INT             reduce using rule 90 (func_arg -> expression .)
    VOID            reduce using rule 90 (func_arg -> expression .)
    INT8_T          reduce using rule 90 (func_arg -> expression .)
    INT16_T         reduce using rule 90 (func_arg -> expression .)
    INT32_T         reduce using rule 90 (func_arg -> expression .)
    INT64_T         reduce using rule 90 (func_arg -> expression .)
    UINT8_T         reduce using rule 90 (func_arg -> expression .)
    UINT16_T        reduce using rule 90 (func_arg -> expression .)
    UINT32_T        reduce using rule 90 (func_arg -> expression .)
    UINT64_T        reduce using rule 90 (func_arg -> expression .)
    LPAREN          reduce using rule 90 (func_arg -> expression .)
    NEGATE          reduce using rule 90 (func_arg -> expression .)
    MINUS           reduce using rule 90 (func_arg -> expression .)
    SIZEOF          reduce using rule 90 (func_arg -> expression .)
    FLOAT_L         reduce using rule 90 (func_arg -> expression .)
    INT_L           reduce using rule 90 (func_arg -> expression .)
    CHAR_L          reduce using rule 90 (func_arg -> expression .)
    STRING_L        reduce using rule 90 (func_arg -> expression .)
    NONDECIMAL_L    reduce using rule 90 (func_arg -> expression .)
    BITAND          reduce using rule 90 (func_arg -> expression .)
    STRUCT          reduce using rule 90 (func_arg -> expression .)
    PLUS            reduce using rule 130 (operand -> expression .)
    ASTERISK        reduce using rule 130 (operand -> expression .)
    DIVIDE          reduce using rule 130 (operand -> expression .)
    LSHIFT          reduce using rule 130 (operand -> expression .)
    RSHIFT          reduce using rule 130 (operand -> expression .)
    PERCENT         reduce using rule 130 (operand -> expression .)
    BITOR           reduce using rule 130 (operand -> expression .)
    EQ              reduce using rule 130 (operand -> expression .)
    NEQ             reduce using rule 130 (operand -> expression .)
    LT              reduce using rule 130 (operand -> expression .)
    GT              reduce using rule 130 (operand -> expression .)
    LE              reduce using rule 130 (operand -> expression .)
    GE              reduce using rule 130 (operand -> expression .)
    AND             reduce using rule 130 (operand -> expression .)
    OR              reduce using rule 130 (operand -> expression .)

  ! MINUS           [ reduce using rule 130 (operand -> expression .) ]
  ! BITAND          [ reduce using rule 130 (operand -> expression .) ]


state 193

    (91) func_arg -> type_cast . name
    (92) func_arg -> type_cast . expression
    (94) func_arg -> type_cast . func_call
    (131) operand -> type_cast . name
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (113) expression -> . LPAREN expression RPAREN
    (114) expression -> . LPAREN name RPAREN
    (115) expression -> . NEGATE expression
    (116) expression -> . MINUS expression
    (117) expression -> . NEGATE name
    (118) expression -> . MINUS name
    (133) expression -> . operand binop operand
    (134) expression -> . name INCREMENT
    (98) func_call -> . ID LPAREN func_arglist RPAREN
    (99) func_call -> . SIZEOF LPAREN func_arglist RPAREN
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name
    (129) operand -> . name
    (130) operand -> . expression
    (131) operand -> . type_cast name
    (132) operand -> . func_call
    (19) type_cast -> . LPAREN dtype RPAREN

    ID              shift and go to state 71
    LPAREN          shift and go to state 17
    NEGATE          shift and go to state 49
    MINUS           shift and go to state 50
    SIZEOF          shift and go to state 44
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64

    type_cast                      shift and go to state 56
    name                           shift and go to state 220
    expression                     shift and go to state 221
    func_call                      shift and go to state 222
    literal                        shift and go to state 57
    access                         shift and go to state 58
    operand                        shift and go to state 51

state 194

    (93) func_arg -> func_call .
    (132) operand -> func_call .

  ! reduce/reduce conflict for MINUS resolved using rule 93 (func_arg -> func_call .)
  ! reduce/reduce conflict for BITAND resolved using rule 93 (func_arg -> func_call .)
    COMMA           reduce using rule 93 (func_arg -> func_call .)
    RPAREN          reduce using rule 93 (func_arg -> func_call .)
    ID              reduce using rule 93 (func_arg -> func_call .)
    CHAR            reduce using rule 93 (func_arg -> func_call .)
    DOUBLE          reduce using rule 93 (func_arg -> func_call .)
    FLOAT           reduce using rule 93 (func_arg -> func_call .)
    INT             reduce using rule 93 (func_arg -> func_call .)
    VOID            reduce using rule 93 (func_arg -> func_call .)
    INT8_T          reduce using rule 93 (func_arg -> func_call .)
    INT16_T         reduce using rule 93 (func_arg -> func_call .)
    INT32_T         reduce using rule 93 (func_arg -> func_call .)
    INT64_T         reduce using rule 93 (func_arg -> func_call .)
    UINT8_T         reduce using rule 93 (func_arg -> func_call .)
    UINT16_T        reduce using rule 93 (func_arg -> func_call .)
    UINT32_T        reduce using rule 93 (func_arg -> func_call .)
    UINT64_T        reduce using rule 93 (func_arg -> func_call .)
    LPAREN          reduce using rule 93 (func_arg -> func_call .)
    NEGATE          reduce using rule 93 (func_arg -> func_call .)
    MINUS           reduce using rule 93 (func_arg -> func_call .)
    SIZEOF          reduce using rule 93 (func_arg -> func_call .)
    FLOAT_L         reduce using rule 93 (func_arg -> func_call .)
    INT_L           reduce using rule 93 (func_arg -> func_call .)
    CHAR_L          reduce using rule 93 (func_arg -> func_call .)
    STRING_L        reduce using rule 93 (func_arg -> func_call .)
    NONDECIMAL_L    reduce using rule 93 (func_arg -> func_call .)
    BITAND          reduce using rule 93 (func_arg -> func_call .)
    STRUCT          reduce using rule 93 (func_arg -> func_call .)
    PLUS            reduce using rule 132 (operand -> func_call .)
    ASTERISK        reduce using rule 132 (operand -> func_call .)
    DIVIDE          reduce using rule 132 (operand -> func_call .)
    LSHIFT          reduce using rule 132 (operand -> func_call .)
    RSHIFT          reduce using rule 132 (operand -> func_call .)
    PERCENT         reduce using rule 132 (operand -> func_call .)
    BITOR           reduce using rule 132 (operand -> func_call .)
    EQ              reduce using rule 132 (operand -> func_call .)
    NEQ             reduce using rule 132 (operand -> func_call .)
    LT              reduce using rule 132 (operand -> func_call .)
    GT              reduce using rule 132 (operand -> func_call .)
    LE              reduce using rule 132 (operand -> func_call .)
    GE              reduce using rule 132 (operand -> func_call .)
    AND             reduce using rule 132 (operand -> func_call .)
    OR              reduce using rule 132 (operand -> func_call .)

  ! MINUS           [ reduce using rule 132 (operand -> func_call .) ]
  ! BITAND          [ reduce using rule 132 (operand -> func_call .) ]


state 195

    (84) func_def -> modifier_list dtype ID LPAREN . func_def_arglist RPAREN scope
    (80) func_def_arglist -> .
    (81) func_def_arglist -> . func_def_arglist func_def_arg
    (82) func_def_arglist -> . func_def_arglist func_def_arg COMMA

    RPAREN          reduce using rule 80 (func_def_arglist -> .)
    CHAR            reduce using rule 80 (func_def_arglist -> .)
    DOUBLE          reduce using rule 80 (func_def_arglist -> .)
    FLOAT           reduce using rule 80 (func_def_arglist -> .)
    INT             reduce using rule 80 (func_def_arglist -> .)
    VOID            reduce using rule 80 (func_def_arglist -> .)
    INT8_T          reduce using rule 80 (func_def_arglist -> .)
    INT16_T         reduce using rule 80 (func_def_arglist -> .)
    INT32_T         reduce using rule 80 (func_def_arglist -> .)
    INT64_T         reduce using rule 80 (func_def_arglist -> .)
    UINT8_T         reduce using rule 80 (func_def_arglist -> .)
    UINT16_T        reduce using rule 80 (func_def_arglist -> .)
    UINT32_T        reduce using rule 80 (func_def_arglist -> .)
    UINT64_T        reduce using rule 80 (func_def_arglist -> .)
    STRUCT          reduce using rule 80 (func_def_arglist -> .)
    CONST           reduce using rule 80 (func_def_arglist -> .)
    EXTERN          reduce using rule 80 (func_def_arglist -> .)
    INLINE          reduce using rule 80 (func_def_arglist -> .)
    LONG            reduce using rule 80 (func_def_arglist -> .)
    SHORT           reduce using rule 80 (func_def_arglist -> .)
    SIGNED          reduce using rule 80 (func_def_arglist -> .)
    UNSIGNED        reduce using rule 80 (func_def_arglist -> .)
    VOLATILE        reduce using rule 80 (func_def_arglist -> .)

    func_def_arglist               shift and go to state 223

state 196

    (52) scope -> LBRACE node_list RBRACE .

    INCLUDE         reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    DEFINE          reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    IFNDEF          reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    ENDIF           reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    error           reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    ELSE            reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    STRUCT          reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    CHAR            reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    DOUBLE          reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    FLOAT           reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    INT             reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    VOID            reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    INT8_T          reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    INT16_T         reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    INT32_T         reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    INT64_T         reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    UINT8_T         reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    UINT16_T        reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    UINT32_T        reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    UINT64_T        reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    ID              reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    SIZEOF          reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    LPAREN          reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    NEGATE          reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    MINUS           reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    RETURN          reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    WHILE           reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    IF              reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    FOR             reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    FLOAT_L         reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    INT_L           reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    CHAR_L          reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    STRING_L        reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    NONDECIMAL_L    reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    BITAND          reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    $end            reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    CONST           reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    EXTERN          reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    INLINE          reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    LONG            reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    SHORT           reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    SIGNED          reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    UNSIGNED        reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    VOLATILE        reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    RBRACE          reduce using rule 52 (scope -> LBRACE node_list RBRACE .)
    SEMI            reduce using rule 52 (scope -> LBRACE node_list RBRACE .)


state 197

    (72) control_expr -> control LPAREN conditional_expr RPAREN . scope
    (52) scope -> . LBRACE node_list RBRACE
    (53) scope -> . error RBRACE

    LBRACE          shift and go to state 87
    error           shift and go to state 88

    scope                          shift and go to state 224

state 198

    (65) conditional_expr -> name conditional . expression
    (68) conditional_expr -> name conditional . name
    (113) expression -> . LPAREN expression RPAREN
    (114) expression -> . LPAREN name RPAREN
    (115) expression -> . NEGATE expression
    (116) expression -> . MINUS expression
    (117) expression -> . NEGATE name
    (118) expression -> . MINUS name
    (133) expression -> . operand binop operand
    (134) expression -> . name INCREMENT
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (129) operand -> . name
    (130) operand -> . expression
    (131) operand -> . type_cast name
    (132) operand -> . func_call
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name
    (19) type_cast -> . LPAREN dtype RPAREN
    (98) func_call -> . ID LPAREN func_arglist RPAREN
    (99) func_call -> . SIZEOF LPAREN func_arglist RPAREN

    LPAREN          shift and go to state 17
    NEGATE          shift and go to state 49
    MINUS           shift and go to state 50
    ID              shift and go to state 71
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64
    SIZEOF          shift and go to state 44

    name                           shift and go to state 225
    expression                     shift and go to state 226
    operand                        shift and go to state 51
    literal                        shift and go to state 57
    access                         shift and go to state 58
    type_cast                      shift and go to state 56
    func_call                      shift and go to state 72

state 199

    (66) conditional_expr -> expression conditional . name
    (67) conditional_expr -> expression conditional . expression
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (113) expression -> . LPAREN expression RPAREN
    (114) expression -> . LPAREN name RPAREN
    (115) expression -> . NEGATE expression
    (116) expression -> . MINUS expression
    (117) expression -> . NEGATE name
    (118) expression -> . MINUS name
    (133) expression -> . operand binop operand
    (134) expression -> . name INCREMENT
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name
    (129) operand -> . name
    (130) operand -> . expression
    (131) operand -> . type_cast name
    (132) operand -> . func_call
    (19) type_cast -> . LPAREN dtype RPAREN
    (98) func_call -> . ID LPAREN func_arglist RPAREN
    (99) func_call -> . SIZEOF LPAREN func_arglist RPAREN

    ID              shift and go to state 71
    LPAREN          shift and go to state 17
    NEGATE          shift and go to state 49
    MINUS           shift and go to state 50
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64
    SIZEOF          shift and go to state 44

    expression                     shift and go to state 227
    name                           shift and go to state 228
    literal                        shift and go to state 57
    access                         shift and go to state 58
    operand                        shift and go to state 51
    type_cast                      shift and go to state 56
    func_call                      shift and go to state 72

state 200

    (104) struct_def -> STRUCT ID scope SEMI .

    INCLUDE         reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    DEFINE          reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    IFNDEF          reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    ENDIF           reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    error           reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    ELSE            reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    STRUCT          reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    CHAR            reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    DOUBLE          reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    FLOAT           reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    INT             reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    VOID            reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    INT8_T          reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    INT16_T         reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    INT32_T         reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    INT64_T         reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    UINT8_T         reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    UINT16_T        reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    UINT32_T        reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    UINT64_T        reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    ID              reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    SIZEOF          reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    LPAREN          reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    NEGATE          reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    MINUS           reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    RETURN          reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    WHILE           reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    IF              reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    FOR             reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    FLOAT_L         reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    INT_L           reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    CHAR_L          reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    STRING_L        reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    NONDECIMAL_L    reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    BITAND          reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    $end            reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    CONST           reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    EXTERN          reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    INLINE          reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    LONG            reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    SHORT           reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    SIGNED          reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    UNSIGNED        reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    VOLATILE        reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)
    RBRACE          reduce using rule 104 (struct_def -> STRUCT ID scope SEMI .)


state 201

    (99) func_call -> SIZEOF LPAREN func_arglist RPAREN .

    SEMI            reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    LBRACE          reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    error           reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    PLUS            reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    MINUS           reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    ASTERISK        reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    DIVIDE          reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    LSHIFT          reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    RSHIFT          reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    PERCENT         reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    BITAND          reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    BITOR           reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    EQ              reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    NEQ             reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    LT              reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    GT              reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    LE              reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    GE              reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    AND             reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    OR              reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    RPAREN          reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    RBRACK          reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    COMMA           reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    ID              reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    CHAR            reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    DOUBLE          reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    FLOAT           reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    INT             reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    VOID            reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    INT8_T          reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    INT16_T         reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    INT32_T         reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    INT64_T         reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    UINT8_T         reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    UINT16_T        reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    UINT32_T        reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    UINT64_T        reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    LPAREN          reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    NEGATE          reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    SIZEOF          reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    FLOAT_L         reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    INT_L           reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    CHAR_L          reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    STRING_L        reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    NONDECIMAL_L    reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    STRUCT          reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)
    RBRACE          reduce using rule 99 (func_call -> SIZEOF LPAREN func_arglist RPAREN .)


state 202

    (161) init_var_rs -> LPAREN name RPAREN .
    (114) expression -> LPAREN name RPAREN .

  ! reduce/reduce conflict for MINUS resolved using rule 114 (expression -> LPAREN name RPAREN .)
  ! reduce/reduce conflict for BITAND resolved using rule 114 (expression -> LPAREN name RPAREN .)
    INCLUDE         reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    DEFINE          reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    IFNDEF          reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    ENDIF           reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    error           reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    ELSE            reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    STRUCT          reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    CHAR            reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    DOUBLE          reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    FLOAT           reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    INT             reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    VOID            reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    INT8_T          reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    INT16_T         reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    INT32_T         reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    INT64_T         reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    UINT8_T         reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    UINT16_T        reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    UINT32_T        reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    UINT64_T        reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    ID              reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    SIZEOF          reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    LPAREN          reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    NEGATE          reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    RETURN          reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    WHILE           reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    IF              reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    FOR             reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    FLOAT_L         reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    INT_L           reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    CHAR_L          reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    STRING_L        reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    NONDECIMAL_L    reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    $end            reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    CONST           reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    EXTERN          reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    INLINE          reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    LONG            reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    SHORT           reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    SIGNED          reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    UNSIGNED        reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    VOLATILE        reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    RBRACE          reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .)
    SEMI            reduce using rule 114 (expression -> LPAREN name RPAREN .)
    PLUS            reduce using rule 114 (expression -> LPAREN name RPAREN .)
    MINUS           reduce using rule 114 (expression -> LPAREN name RPAREN .)
    ASTERISK        reduce using rule 114 (expression -> LPAREN name RPAREN .)
    DIVIDE          reduce using rule 114 (expression -> LPAREN name RPAREN .)
    LSHIFT          reduce using rule 114 (expression -> LPAREN name RPAREN .)
    RSHIFT          reduce using rule 114 (expression -> LPAREN name RPAREN .)
    PERCENT         reduce using rule 114 (expression -> LPAREN name RPAREN .)
    BITAND          reduce using rule 114 (expression -> LPAREN name RPAREN .)
    BITOR           reduce using rule 114 (expression -> LPAREN name RPAREN .)
    EQ              reduce using rule 114 (expression -> LPAREN name RPAREN .)
    NEQ             reduce using rule 114 (expression -> LPAREN name RPAREN .)
    LT              reduce using rule 114 (expression -> LPAREN name RPAREN .)
    GT              reduce using rule 114 (expression -> LPAREN name RPAREN .)
    LE              reduce using rule 114 (expression -> LPAREN name RPAREN .)
    GE              reduce using rule 114 (expression -> LPAREN name RPAREN .)
    AND             reduce using rule 114 (expression -> LPAREN name RPAREN .)
    OR              reduce using rule 114 (expression -> LPAREN name RPAREN .)

  ! MINUS           [ reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .) ]
  ! BITAND          [ reduce using rule 161 (init_var_rs -> LPAREN name RPAREN .) ]


state 203

    (153) vector_body -> LBRACE vec_item_list RBRACE .

    SEMI            reduce using rule 153 (vector_body -> LBRACE vec_item_list RBRACE .)
    COMMA           reduce using rule 153 (vector_body -> LBRACE vec_item_list RBRACE .)
    RBRACE          reduce using rule 153 (vector_body -> LBRACE vec_item_list RBRACE .)
    ID              reduce using rule 153 (vector_body -> LBRACE vec_item_list RBRACE .)
    SIZEOF          reduce using rule 153 (vector_body -> LBRACE vec_item_list RBRACE .)
    LBRACE          reduce using rule 153 (vector_body -> LBRACE vec_item_list RBRACE .)
    FLOAT_L         reduce using rule 153 (vector_body -> LBRACE vec_item_list RBRACE .)
    INT_L           reduce using rule 153 (vector_body -> LBRACE vec_item_list RBRACE .)
    CHAR_L          reduce using rule 153 (vector_body -> LBRACE vec_item_list RBRACE .)
    STRING_L        reduce using rule 153 (vector_body -> LBRACE vec_item_list RBRACE .)
    NONDECIMAL_L    reduce using rule 153 (vector_body -> LBRACE vec_item_list RBRACE .)
    BITAND          reduce using rule 153 (vector_body -> LBRACE vec_item_list RBRACE .)


state 204

    (151) vec_item_list -> vec_item_list vector_item .
    (152) vec_item_list -> vec_item_list vector_item . COMMA

    RBRACE          reduce using rule 151 (vec_item_list -> vec_item_list vector_item .)
    ID              reduce using rule 151 (vec_item_list -> vec_item_list vector_item .)
    SIZEOF          reduce using rule 151 (vec_item_list -> vec_item_list vector_item .)
    LBRACE          reduce using rule 151 (vec_item_list -> vec_item_list vector_item .)
    FLOAT_L         reduce using rule 151 (vec_item_list -> vec_item_list vector_item .)
    INT_L           reduce using rule 151 (vec_item_list -> vec_item_list vector_item .)
    CHAR_L          reduce using rule 151 (vec_item_list -> vec_item_list vector_item .)
    STRING_L        reduce using rule 151 (vec_item_list -> vec_item_list vector_item .)
    NONDECIMAL_L    reduce using rule 151 (vec_item_list -> vec_item_list vector_item .)
    BITAND          reduce using rule 151 (vec_item_list -> vec_item_list vector_item .)
    COMMA           shift and go to state 229


state 205

    (147) vector_item -> name .
    (100) access -> name . LBRACK name RBRACK
    (101) access -> name . LBRACK expression RBRACK
    (102) access -> name . MEMBER name

    COMMA           reduce using rule 147 (vector_item -> name .)
    RBRACE          reduce using rule 147 (vector_item -> name .)
    ID              reduce using rule 147 (vector_item -> name .)
    SIZEOF          reduce using rule 147 (vector_item -> name .)
    LBRACE          reduce using rule 147 (vector_item -> name .)
    FLOAT_L         reduce using rule 147 (vector_item -> name .)
    INT_L           reduce using rule 147 (vector_item -> name .)
    CHAR_L          reduce using rule 147 (vector_item -> name .)
    STRING_L        reduce using rule 147 (vector_item -> name .)
    NONDECIMAL_L    reduce using rule 147 (vector_item -> name .)
    BITAND          reduce using rule 147 (vector_item -> name .)
    LBRACK          shift and go to state 121
    MEMBER          shift and go to state 122


state 206

    (148) vector_item -> func_call .

    COMMA           reduce using rule 148 (vector_item -> func_call .)
    RBRACE          reduce using rule 148 (vector_item -> func_call .)
    ID              reduce using rule 148 (vector_item -> func_call .)
    SIZEOF          reduce using rule 148 (vector_item -> func_call .)
    LBRACE          reduce using rule 148 (vector_item -> func_call .)
    FLOAT_L         reduce using rule 148 (vector_item -> func_call .)
    INT_L           reduce using rule 148 (vector_item -> func_call .)
    CHAR_L          reduce using rule 148 (vector_item -> func_call .)
    STRING_L        reduce using rule 148 (vector_item -> func_call .)
    NONDECIMAL_L    reduce using rule 148 (vector_item -> func_call .)
    BITAND          reduce using rule 148 (vector_item -> func_call .)


state 207

    (149) vector_item -> vector_body .

    COMMA           reduce using rule 149 (vector_item -> vector_body .)
    RBRACE          reduce using rule 149 (vector_item -> vector_body .)
    ID              reduce using rule 149 (vector_item -> vector_body .)
    SIZEOF          reduce using rule 149 (vector_item -> vector_body .)
    LBRACE          reduce using rule 149 (vector_item -> vector_body .)
    FLOAT_L         reduce using rule 149 (vector_item -> vector_body .)
    INT_L           reduce using rule 149 (vector_item -> vector_body .)
    CHAR_L          reduce using rule 149 (vector_item -> vector_body .)
    STRING_L        reduce using rule 149 (vector_item -> vector_body .)
    NONDECIMAL_L    reduce using rule 149 (vector_item -> vector_body .)
    BITAND          reduce using rule 149 (vector_item -> vector_body .)


state 208

    (141) vector_init -> LBRACK RBRACK .

    SIMPLE_ASSIGN   reduce using rule 141 (vector_init -> LBRACK RBRACK .)
    COMPLEX_ASSIGN  reduce using rule 141 (vector_init -> LBRACK RBRACK .)
    LBRACK          reduce using rule 141 (vector_init -> LBRACK RBRACK .)


state 209

    (142) vector_init -> LBRACK name . RBRACK
    (100) access -> name . LBRACK name RBRACK
    (101) access -> name . LBRACK expression RBRACK
    (102) access -> name . MEMBER name

    RBRACK          shift and go to state 230
    LBRACK          shift and go to state 121
    MEMBER          shift and go to state 122


state 210

    (100) access -> name LBRACK name RBRACK .

    INCREMENT       reduce using rule 100 (access -> name LBRACK name RBRACK .)
    LBRACK          reduce using rule 100 (access -> name LBRACK name RBRACK .)
    MEMBER          reduce using rule 100 (access -> name LBRACK name RBRACK .)
    SIMPLE_ASSIGN   reduce using rule 100 (access -> name LBRACK name RBRACK .)
    COMPLEX_ASSIGN  reduce using rule 100 (access -> name LBRACK name RBRACK .)
    PLUS            reduce using rule 100 (access -> name LBRACK name RBRACK .)
    MINUS           reduce using rule 100 (access -> name LBRACK name RBRACK .)
    ASTERISK        reduce using rule 100 (access -> name LBRACK name RBRACK .)
    DIVIDE          reduce using rule 100 (access -> name LBRACK name RBRACK .)
    LSHIFT          reduce using rule 100 (access -> name LBRACK name RBRACK .)
    RSHIFT          reduce using rule 100 (access -> name LBRACK name RBRACK .)
    PERCENT         reduce using rule 100 (access -> name LBRACK name RBRACK .)
    BITAND          reduce using rule 100 (access -> name LBRACK name RBRACK .)
    BITOR           reduce using rule 100 (access -> name LBRACK name RBRACK .)
    EQ              reduce using rule 100 (access -> name LBRACK name RBRACK .)
    NEQ             reduce using rule 100 (access -> name LBRACK name RBRACK .)
    LT              reduce using rule 100 (access -> name LBRACK name RBRACK .)
    GT              reduce using rule 100 (access -> name LBRACK name RBRACK .)
    LE              reduce using rule 100 (access -> name LBRACK name RBRACK .)
    GE              reduce using rule 100 (access -> name LBRACK name RBRACK .)
    AND             reduce using rule 100 (access -> name LBRACK name RBRACK .)
    OR              reduce using rule 100 (access -> name LBRACK name RBRACK .)
    RPAREN          reduce using rule 100 (access -> name LBRACK name RBRACK .)
    ID              reduce using rule 100 (access -> name LBRACK name RBRACK .)
    SEMI            reduce using rule 100 (access -> name LBRACK name RBRACK .)
    RBRACK          reduce using rule 100 (access -> name LBRACK name RBRACK .)
    COMMA           reduce using rule 100 (access -> name LBRACK name RBRACK .)
    CHAR            reduce using rule 100 (access -> name LBRACK name RBRACK .)
    DOUBLE          reduce using rule 100 (access -> name LBRACK name RBRACK .)
    FLOAT           reduce using rule 100 (access -> name LBRACK name RBRACK .)
    INT             reduce using rule 100 (access -> name LBRACK name RBRACK .)
    VOID            reduce using rule 100 (access -> name LBRACK name RBRACK .)
    INT8_T          reduce using rule 100 (access -> name LBRACK name RBRACK .)
    INT16_T         reduce using rule 100 (access -> name LBRACK name RBRACK .)
    INT32_T         reduce using rule 100 (access -> name LBRACK name RBRACK .)
    INT64_T         reduce using rule 100 (access -> name LBRACK name RBRACK .)
    UINT8_T         reduce using rule 100 (access -> name LBRACK name RBRACK .)
    UINT16_T        reduce using rule 100 (access -> name LBRACK name RBRACK .)
    UINT32_T        reduce using rule 100 (access -> name LBRACK name RBRACK .)
    UINT64_T        reduce using rule 100 (access -> name LBRACK name RBRACK .)
    LPAREN          reduce using rule 100 (access -> name LBRACK name RBRACK .)
    NEGATE          reduce using rule 100 (access -> name LBRACK name RBRACK .)
    SIZEOF          reduce using rule 100 (access -> name LBRACK name RBRACK .)
    FLOAT_L         reduce using rule 100 (access -> name LBRACK name RBRACK .)
    INT_L           reduce using rule 100 (access -> name LBRACK name RBRACK .)
    CHAR_L          reduce using rule 100 (access -> name LBRACK name RBRACK .)
    STRING_L        reduce using rule 100 (access -> name LBRACK name RBRACK .)
    NONDECIMAL_L    reduce using rule 100 (access -> name LBRACK name RBRACK .)
    STRUCT          reduce using rule 100 (access -> name LBRACK name RBRACK .)
    CONST           reduce using rule 100 (access -> name LBRACK name RBRACK .)
    EXTERN          reduce using rule 100 (access -> name LBRACK name RBRACK .)
    INLINE          reduce using rule 100 (access -> name LBRACK name RBRACK .)
    LONG            reduce using rule 100 (access -> name LBRACK name RBRACK .)
    SHORT           reduce using rule 100 (access -> name LBRACK name RBRACK .)
    SIGNED          reduce using rule 100 (access -> name LBRACK name RBRACK .)
    UNSIGNED        reduce using rule 100 (access -> name LBRACK name RBRACK .)
    VOLATILE        reduce using rule 100 (access -> name LBRACK name RBRACK .)
    RBRACE          reduce using rule 100 (access -> name LBRACK name RBRACK .)
    LBRACE          reduce using rule 100 (access -> name LBRACK name RBRACK .)


state 211

    (101) access -> name LBRACK expression RBRACK .

    INCREMENT       reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    LBRACK          reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    MEMBER          reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    SIMPLE_ASSIGN   reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    COMPLEX_ASSIGN  reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    PLUS            reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    MINUS           reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    ASTERISK        reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    LSHIFT          reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    RSHIFT          reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    PERCENT         reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    BITAND          reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    BITOR           reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    EQ              reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    NEQ             reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    LT              reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    GT              reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    LE              reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    GE              reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    AND             reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    OR              reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    RPAREN          reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    ID              reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    SEMI            reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    RBRACK          reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    COMMA           reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    CHAR            reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    DOUBLE          reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    FLOAT           reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    INT             reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    VOID            reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    INT8_T          reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    INT16_T         reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    INT32_T         reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    INT64_T         reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    UINT8_T         reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    UINT16_T        reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    UINT32_T        reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    UINT64_T        reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    LPAREN          reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    NEGATE          reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    SIZEOF          reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    FLOAT_L         reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    INT_L           reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    CHAR_L          reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    STRING_L        reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    NONDECIMAL_L    reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    STRUCT          reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    CONST           reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    EXTERN          reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    INLINE          reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    LONG            reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    SHORT           reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    SIGNED          reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    UNSIGNED        reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    VOLATILE        reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    RBRACE          reduce using rule 101 (access -> name LBRACK expression RBRACK .)
    LBRACE          reduce using rule 101 (access -> name LBRACK expression RBRACK .)


state 212

    (71) for_loop -> FOR LPAREN init_var conditional_expr . SEMI ID INCREMENT RPAREN

    SEMI            shift and go to state 231


state 213

    (137) declare_var_ls -> dtype ID .

    SIMPLE_ASSIGN   reduce using rule 137 (declare_var_ls -> dtype ID .)
    COMPLEX_ASSIGN  reduce using rule 137 (declare_var_ls -> dtype ID .)
    LBRACK          reduce using rule 137 (declare_var_ls -> dtype ID .)


state 214

    (139) declare_var_ls -> modifier_list dtype . ID
    (44) dtype -> dtype . ASTERISK

    ID              shift and go to state 232
    ASTERISK        shift and go to state 66


state 215

    (77) func_def_arg -> dtype .
    (78) func_def_arg -> dtype . name
    (44) dtype -> dtype . ASTERISK
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name

    COMMA           reduce using rule 77 (func_def_arg -> dtype .)
    RPAREN          reduce using rule 77 (func_def_arg -> dtype .)
    CHAR            reduce using rule 77 (func_def_arg -> dtype .)
    DOUBLE          reduce using rule 77 (func_def_arg -> dtype .)
    FLOAT           reduce using rule 77 (func_def_arg -> dtype .)
    INT             reduce using rule 77 (func_def_arg -> dtype .)
    VOID            reduce using rule 77 (func_def_arg -> dtype .)
    INT8_T          reduce using rule 77 (func_def_arg -> dtype .)
    INT16_T         reduce using rule 77 (func_def_arg -> dtype .)
    INT32_T         reduce using rule 77 (func_def_arg -> dtype .)
    INT64_T         reduce using rule 77 (func_def_arg -> dtype .)
    UINT8_T         reduce using rule 77 (func_def_arg -> dtype .)
    UINT16_T        reduce using rule 77 (func_def_arg -> dtype .)
    UINT32_T        reduce using rule 77 (func_def_arg -> dtype .)
    UINT64_T        reduce using rule 77 (func_def_arg -> dtype .)
    STRUCT          reduce using rule 77 (func_def_arg -> dtype .)
    CONST           reduce using rule 77 (func_def_arg -> dtype .)
    EXTERN          reduce using rule 77 (func_def_arg -> dtype .)
    INLINE          reduce using rule 77 (func_def_arg -> dtype .)
    LONG            reduce using rule 77 (func_def_arg -> dtype .)
    SHORT           reduce using rule 77 (func_def_arg -> dtype .)
    SIGNED          reduce using rule 77 (func_def_arg -> dtype .)
    UNSIGNED        reduce using rule 77 (func_def_arg -> dtype .)
    VOLATILE        reduce using rule 77 (func_def_arg -> dtype .)
    ASTERISK        shift and go to state 66
    ID              shift and go to state 150
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64

    name                           shift and go to state 233
    literal                        shift and go to state 57
    access                         shift and go to state 58

state 216

    (83) func_def -> dtype ID LPAREN func_def_arglist RPAREN . scope
    (87) func_decl -> dtype ID LPAREN func_def_arglist RPAREN . SEMI
    (52) scope -> . LBRACE node_list RBRACE
    (53) scope -> . error RBRACE

    SEMI            shift and go to state 235
    LBRACE          shift and go to state 87
    error           shift and go to state 88

    scope                          shift and go to state 234

state 217

    (81) func_def_arglist -> func_def_arglist func_def_arg .
    (82) func_def_arglist -> func_def_arglist func_def_arg . COMMA

    RPAREN          reduce using rule 81 (func_def_arglist -> func_def_arglist func_def_arg .)
    CHAR            reduce using rule 81 (func_def_arglist -> func_def_arglist func_def_arg .)
    DOUBLE          reduce using rule 81 (func_def_arglist -> func_def_arglist func_def_arg .)
    FLOAT           reduce using rule 81 (func_def_arglist -> func_def_arglist func_def_arg .)
    INT             reduce using rule 81 (func_def_arglist -> func_def_arglist func_def_arg .)
    VOID            reduce using rule 81 (func_def_arglist -> func_def_arglist func_def_arg .)
    INT8_T          reduce using rule 81 (func_def_arglist -> func_def_arglist func_def_arg .)
    INT16_T         reduce using rule 81 (func_def_arglist -> func_def_arglist func_def_arg .)
    INT32_T         reduce using rule 81 (func_def_arglist -> func_def_arglist func_def_arg .)
    INT64_T         reduce using rule 81 (func_def_arglist -> func_def_arglist func_def_arg .)
    UINT8_T         reduce using rule 81 (func_def_arglist -> func_def_arglist func_def_arg .)
    UINT16_T        reduce using rule 81 (func_def_arglist -> func_def_arglist func_def_arg .)
    UINT32_T        reduce using rule 81 (func_def_arglist -> func_def_arglist func_def_arg .)
    UINT64_T        reduce using rule 81 (func_def_arglist -> func_def_arglist func_def_arg .)
    STRUCT          reduce using rule 81 (func_def_arglist -> func_def_arglist func_def_arg .)
    CONST           reduce using rule 81 (func_def_arglist -> func_def_arglist func_def_arg .)
    EXTERN          reduce using rule 81 (func_def_arglist -> func_def_arglist func_def_arg .)
    INLINE          reduce using rule 81 (func_def_arglist -> func_def_arglist func_def_arg .)
    LONG            reduce using rule 81 (func_def_arglist -> func_def_arglist func_def_arg .)
    SHORT           reduce using rule 81 (func_def_arglist -> func_def_arglist func_def_arg .)
    SIGNED          reduce using rule 81 (func_def_arglist -> func_def_arglist func_def_arg .)
    UNSIGNED        reduce using rule 81 (func_def_arglist -> func_def_arglist func_def_arg .)
    VOLATILE        reduce using rule 81 (func_def_arglist -> func_def_arglist func_def_arg .)
    COMMA           shift and go to state 236


state 218

    (79) func_def_arg -> modifier_list . dtype name
    (29) modifier_list -> modifier_list . modifier
    (30) dtype -> . CHAR
    (31) dtype -> . DOUBLE
    (32) dtype -> . FLOAT
    (33) dtype -> . INT
    (34) dtype -> . VOID
    (35) dtype -> . INT8_T
    (36) dtype -> . INT16_T
    (37) dtype -> . INT32_T
    (38) dtype -> . INT64_T
    (39) dtype -> . UINT8_T
    (40) dtype -> . UINT16_T
    (41) dtype -> . UINT32_T
    (42) dtype -> . UINT64_T
    (43) dtype -> . struct_type
    (44) dtype -> . dtype ASTERISK
    (20) modifier -> . CONST
    (21) modifier -> . EXTERN
    (22) modifier -> . INLINE
    (23) modifier -> . LONG
    (24) modifier -> . SHORT
    (25) modifier -> . SIGNED
    (26) modifier -> . UNSIGNED
    (27) modifier -> . VOLATILE
    (18) struct_type -> . STRUCT name

    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 31
    FLOAT           shift and go to state 32
    INT             shift and go to state 33
    VOID            shift and go to state 34
    INT8_T          shift and go to state 35
    INT16_T         shift and go to state 36
    INT32_T         shift and go to state 37
    INT64_T         shift and go to state 38
    UINT8_T         shift and go to state 39
    UINT16_T        shift and go to state 40
    UINT32_T        shift and go to state 41
    UINT64_T        shift and go to state 42
    CONST           shift and go to state 77
    EXTERN          shift and go to state 78
    INLINE          shift and go to state 79
    LONG            shift and go to state 80
    SHORT           shift and go to state 81
    SIGNED          shift and go to state 82
    UNSIGNED        shift and go to state 83
    VOLATILE        shift and go to state 84
    STRUCT          shift and go to state 73

    dtype                          shift and go to state 237
    modifier                       shift and go to state 76
    struct_type                    shift and go to state 43

state 219

    (97) func_arglist -> func_arglist func_arg COMMA .

    RPAREN          reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    ID              reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    CHAR            reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    DOUBLE          reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    FLOAT           reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    INT             reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    VOID            reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    INT8_T          reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    INT16_T         reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    INT32_T         reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    INT64_T         reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    UINT8_T         reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    UINT16_T        reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    UINT32_T        reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    UINT64_T        reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    LPAREN          reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    NEGATE          reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    MINUS           reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    SIZEOF          reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    FLOAT_L         reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    INT_L           reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    CHAR_L          reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    STRING_L        reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    NONDECIMAL_L    reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    BITAND          reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)
    STRUCT          reduce using rule 97 (func_arglist -> func_arglist func_arg COMMA .)


state 220

    (91) func_arg -> type_cast name .
    (131) operand -> type_cast name .
    (134) expression -> name . INCREMENT
    (100) access -> name . LBRACK name RBRACK
    (101) access -> name . LBRACK expression RBRACK
    (102) access -> name . MEMBER name
    (129) operand -> name .

  ! reduce/reduce conflict for MINUS resolved using rule 91 (func_arg -> type_cast name .)
  ! reduce/reduce conflict for BITAND resolved using rule 91 (func_arg -> type_cast name .)
  ! reduce/reduce conflict for PLUS resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for MINUS resolved using rule 91 (func_arg -> type_cast name .)
  ! reduce/reduce conflict for ASTERISK resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for LSHIFT resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for RSHIFT resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for PERCENT resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for BITAND resolved using rule 91 (func_arg -> type_cast name .)
  ! reduce/reduce conflict for BITOR resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for EQ resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for NEQ resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for LT resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for GT resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for LE resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for GE resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for AND resolved using rule 129 (operand -> name .)
  ! reduce/reduce conflict for OR resolved using rule 129 (operand -> name .)
    COMMA           reduce using rule 91 (func_arg -> type_cast name .)
    RPAREN          reduce using rule 91 (func_arg -> type_cast name .)
    ID              reduce using rule 91 (func_arg -> type_cast name .)
    CHAR            reduce using rule 91 (func_arg -> type_cast name .)
    DOUBLE          reduce using rule 91 (func_arg -> type_cast name .)
    FLOAT           reduce using rule 91 (func_arg -> type_cast name .)
    INT             reduce using rule 91 (func_arg -> type_cast name .)
    VOID            reduce using rule 91 (func_arg -> type_cast name .)
    INT8_T          reduce using rule 91 (func_arg -> type_cast name .)
    INT16_T         reduce using rule 91 (func_arg -> type_cast name .)
    INT32_T         reduce using rule 91 (func_arg -> type_cast name .)
    INT64_T         reduce using rule 91 (func_arg -> type_cast name .)
    UINT8_T         reduce using rule 91 (func_arg -> type_cast name .)
    UINT16_T        reduce using rule 91 (func_arg -> type_cast name .)
    UINT32_T        reduce using rule 91 (func_arg -> type_cast name .)
    UINT64_T        reduce using rule 91 (func_arg -> type_cast name .)
    LPAREN          reduce using rule 91 (func_arg -> type_cast name .)
    NEGATE          reduce using rule 91 (func_arg -> type_cast name .)
    MINUS           reduce using rule 91 (func_arg -> type_cast name .)
    SIZEOF          reduce using rule 91 (func_arg -> type_cast name .)
    FLOAT_L         reduce using rule 91 (func_arg -> type_cast name .)
    INT_L           reduce using rule 91 (func_arg -> type_cast name .)
    CHAR_L          reduce using rule 91 (func_arg -> type_cast name .)
    STRING_L        reduce using rule 91 (func_arg -> type_cast name .)
    NONDECIMAL_L    reduce using rule 91 (func_arg -> type_cast name .)
    BITAND          reduce using rule 91 (func_arg -> type_cast name .)
    STRUCT          reduce using rule 91 (func_arg -> type_cast name .)
    INCREMENT       shift and go to state 119
    LBRACK          shift and go to state 121
    MEMBER          shift and go to state 122
    PLUS            reduce using rule 129 (operand -> name .)
    ASTERISK        reduce using rule 129 (operand -> name .)
    DIVIDE          reduce using rule 129 (operand -> name .)
    LSHIFT          reduce using rule 129 (operand -> name .)
    RSHIFT          reduce using rule 129 (operand -> name .)
    PERCENT         reduce using rule 129 (operand -> name .)
    BITOR           reduce using rule 129 (operand -> name .)
    EQ              reduce using rule 129 (operand -> name .)
    NEQ             reduce using rule 129 (operand -> name .)
    LT              reduce using rule 129 (operand -> name .)
    GT              reduce using rule 129 (operand -> name .)
    LE              reduce using rule 129 (operand -> name .)
    GE              reduce using rule 129 (operand -> name .)
    AND             reduce using rule 129 (operand -> name .)
    OR              reduce using rule 129 (operand -> name .)

  ! PLUS            [ reduce using rule 131 (operand -> type_cast name .) ]
  ! MINUS           [ reduce using rule 131 (operand -> type_cast name .) ]
  ! ASTERISK        [ reduce using rule 131 (operand -> type_cast name .) ]
  ! DIVIDE          [ reduce using rule 131 (operand -> type_cast name .) ]
  ! LSHIFT          [ reduce using rule 131 (operand -> type_cast name .) ]
  ! RSHIFT          [ reduce using rule 131 (operand -> type_cast name .) ]
  ! PERCENT         [ reduce using rule 131 (operand -> type_cast name .) ]
  ! BITAND          [ reduce using rule 131 (operand -> type_cast name .) ]
  ! BITOR           [ reduce using rule 131 (operand -> type_cast name .) ]
  ! EQ              [ reduce using rule 131 (operand -> type_cast name .) ]
  ! NEQ             [ reduce using rule 131 (operand -> type_cast name .) ]
  ! LT              [ reduce using rule 131 (operand -> type_cast name .) ]
  ! GT              [ reduce using rule 131 (operand -> type_cast name .) ]
  ! LE              [ reduce using rule 131 (operand -> type_cast name .) ]
  ! GE              [ reduce using rule 131 (operand -> type_cast name .) ]
  ! AND             [ reduce using rule 131 (operand -> type_cast name .) ]
  ! OR              [ reduce using rule 131 (operand -> type_cast name .) ]
  ! MINUS           [ reduce using rule 129 (operand -> name .) ]
  ! BITAND          [ reduce using rule 129 (operand -> name .) ]


state 221

    (92) func_arg -> type_cast expression .
    (130) operand -> expression .

  ! reduce/reduce conflict for MINUS resolved using rule 92 (func_arg -> type_cast expression .)
  ! reduce/reduce conflict for BITAND resolved using rule 92 (func_arg -> type_cast expression .)
    COMMA           reduce using rule 92 (func_arg -> type_cast expression .)
    RPAREN          reduce using rule 92 (func_arg -> type_cast expression .)
    ID              reduce using rule 92 (func_arg -> type_cast expression .)
    CHAR            reduce using rule 92 (func_arg -> type_cast expression .)
    DOUBLE          reduce using rule 92 (func_arg -> type_cast expression .)
    FLOAT           reduce using rule 92 (func_arg -> type_cast expression .)
    INT             reduce using rule 92 (func_arg -> type_cast expression .)
    VOID            reduce using rule 92 (func_arg -> type_cast expression .)
    INT8_T          reduce using rule 92 (func_arg -> type_cast expression .)
    INT16_T         reduce using rule 92 (func_arg -> type_cast expression .)
    INT32_T         reduce using rule 92 (func_arg -> type_cast expression .)
    INT64_T         reduce using rule 92 (func_arg -> type_cast expression .)
    UINT8_T         reduce using rule 92 (func_arg -> type_cast expression .)
    UINT16_T        reduce using rule 92 (func_arg -> type_cast expression .)
    UINT32_T        reduce using rule 92 (func_arg -> type_cast expression .)
    UINT64_T        reduce using rule 92 (func_arg -> type_cast expression .)
    LPAREN          reduce using rule 92 (func_arg -> type_cast expression .)
    NEGATE          reduce using rule 92 (func_arg -> type_cast expression .)
    MINUS           reduce using rule 92 (func_arg -> type_cast expression .)
    SIZEOF          reduce using rule 92 (func_arg -> type_cast expression .)
    FLOAT_L         reduce using rule 92 (func_arg -> type_cast expression .)
    INT_L           reduce using rule 92 (func_arg -> type_cast expression .)
    CHAR_L          reduce using rule 92 (func_arg -> type_cast expression .)
    STRING_L        reduce using rule 92 (func_arg -> type_cast expression .)
    NONDECIMAL_L    reduce using rule 92 (func_arg -> type_cast expression .)
    BITAND          reduce using rule 92 (func_arg -> type_cast expression .)
    STRUCT          reduce using rule 92 (func_arg -> type_cast expression .)
    PLUS            reduce using rule 130 (operand -> expression .)
    ASTERISK        reduce using rule 130 (operand -> expression .)
    DIVIDE          reduce using rule 130 (operand -> expression .)
    LSHIFT          reduce using rule 130 (operand -> expression .)
    RSHIFT          reduce using rule 130 (operand -> expression .)
    PERCENT         reduce using rule 130 (operand -> expression .)
    BITOR           reduce using rule 130 (operand -> expression .)
    EQ              reduce using rule 130 (operand -> expression .)
    NEQ             reduce using rule 130 (operand -> expression .)
    LT              reduce using rule 130 (operand -> expression .)
    GT              reduce using rule 130 (operand -> expression .)
    LE              reduce using rule 130 (operand -> expression .)
    GE              reduce using rule 130 (operand -> expression .)
    AND             reduce using rule 130 (operand -> expression .)
    OR              reduce using rule 130 (operand -> expression .)

  ! MINUS           [ reduce using rule 130 (operand -> expression .) ]
  ! BITAND          [ reduce using rule 130 (operand -> expression .) ]


state 222

    (94) func_arg -> type_cast func_call .
    (132) operand -> func_call .

  ! reduce/reduce conflict for MINUS resolved using rule 94 (func_arg -> type_cast func_call .)
  ! reduce/reduce conflict for BITAND resolved using rule 94 (func_arg -> type_cast func_call .)
    COMMA           reduce using rule 94 (func_arg -> type_cast func_call .)
    RPAREN          reduce using rule 94 (func_arg -> type_cast func_call .)
    ID              reduce using rule 94 (func_arg -> type_cast func_call .)
    CHAR            reduce using rule 94 (func_arg -> type_cast func_call .)
    DOUBLE          reduce using rule 94 (func_arg -> type_cast func_call .)
    FLOAT           reduce using rule 94 (func_arg -> type_cast func_call .)
    INT             reduce using rule 94 (func_arg -> type_cast func_call .)
    VOID            reduce using rule 94 (func_arg -> type_cast func_call .)
    INT8_T          reduce using rule 94 (func_arg -> type_cast func_call .)
    INT16_T         reduce using rule 94 (func_arg -> type_cast func_call .)
    INT32_T         reduce using rule 94 (func_arg -> type_cast func_call .)
    INT64_T         reduce using rule 94 (func_arg -> type_cast func_call .)
    UINT8_T         reduce using rule 94 (func_arg -> type_cast func_call .)
    UINT16_T        reduce using rule 94 (func_arg -> type_cast func_call .)
    UINT32_T        reduce using rule 94 (func_arg -> type_cast func_call .)
    UINT64_T        reduce using rule 94 (func_arg -> type_cast func_call .)
    LPAREN          reduce using rule 94 (func_arg -> type_cast func_call .)
    NEGATE          reduce using rule 94 (func_arg -> type_cast func_call .)
    MINUS           reduce using rule 94 (func_arg -> type_cast func_call .)
    SIZEOF          reduce using rule 94 (func_arg -> type_cast func_call .)
    FLOAT_L         reduce using rule 94 (func_arg -> type_cast func_call .)
    INT_L           reduce using rule 94 (func_arg -> type_cast func_call .)
    CHAR_L          reduce using rule 94 (func_arg -> type_cast func_call .)
    STRING_L        reduce using rule 94 (func_arg -> type_cast func_call .)
    NONDECIMAL_L    reduce using rule 94 (func_arg -> type_cast func_call .)
    BITAND          reduce using rule 94 (func_arg -> type_cast func_call .)
    STRUCT          reduce using rule 94 (func_arg -> type_cast func_call .)
    PLUS            reduce using rule 132 (operand -> func_call .)
    ASTERISK        reduce using rule 132 (operand -> func_call .)
    DIVIDE          reduce using rule 132 (operand -> func_call .)
    LSHIFT          reduce using rule 132 (operand -> func_call .)
    RSHIFT          reduce using rule 132 (operand -> func_call .)
    PERCENT         reduce using rule 132 (operand -> func_call .)
    BITOR           reduce using rule 132 (operand -> func_call .)
    EQ              reduce using rule 132 (operand -> func_call .)
    NEQ             reduce using rule 132 (operand -> func_call .)
    LT              reduce using rule 132 (operand -> func_call .)
    GT              reduce using rule 132 (operand -> func_call .)
    LE              reduce using rule 132 (operand -> func_call .)
    GE              reduce using rule 132 (operand -> func_call .)
    AND             reduce using rule 132 (operand -> func_call .)
    OR              reduce using rule 132 (operand -> func_call .)

  ! MINUS           [ reduce using rule 132 (operand -> func_call .) ]
  ! BITAND          [ reduce using rule 132 (operand -> func_call .) ]


state 223

    (84) func_def -> modifier_list dtype ID LPAREN func_def_arglist . RPAREN scope
    (81) func_def_arglist -> func_def_arglist . func_def_arg
    (82) func_def_arglist -> func_def_arglist . func_def_arg COMMA
    (77) func_def_arg -> . dtype
    (78) func_def_arg -> . dtype name
    (79) func_def_arg -> . modifier_list dtype name
    (30) dtype -> . CHAR
    (31) dtype -> . DOUBLE
    (32) dtype -> . FLOAT
    (33) dtype -> . INT
    (34) dtype -> . VOID
    (35) dtype -> . INT8_T
    (36) dtype -> . INT16_T
    (37) dtype -> . INT32_T
    (38) dtype -> . INT64_T
    (39) dtype -> . UINT8_T
    (40) dtype -> . UINT16_T
    (41) dtype -> . UINT32_T
    (42) dtype -> . UINT64_T
    (43) dtype -> . struct_type
    (44) dtype -> . dtype ASTERISK
    (28) modifier_list -> .
    (29) modifier_list -> . modifier_list modifier
    (18) struct_type -> . STRUCT name

  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT8_T resolved as shift
  ! shift/reduce conflict for INT16_T resolved as shift
  ! shift/reduce conflict for INT32_T resolved as shift
  ! shift/reduce conflict for INT64_T resolved as shift
  ! shift/reduce conflict for UINT8_T resolved as shift
  ! shift/reduce conflict for UINT16_T resolved as shift
  ! shift/reduce conflict for UINT32_T resolved as shift
  ! shift/reduce conflict for UINT64_T resolved as shift
  ! shift/reduce conflict for STRUCT resolved as shift
    RPAREN          shift and go to state 238
    CHAR            shift and go to state 30
    DOUBLE          shift and go to state 31
    FLOAT           shift and go to state 32
    INT             shift and go to state 33
    VOID            shift and go to state 34
    INT8_T          shift and go to state 35
    INT16_T         shift and go to state 36
    INT32_T         shift and go to state 37
    INT64_T         shift and go to state 38
    UINT8_T         shift and go to state 39
    UINT16_T        shift and go to state 40
    UINT32_T        shift and go to state 41
    UINT64_T        shift and go to state 42
    CONST           reduce using rule 28 (modifier_list -> .)
    EXTERN          reduce using rule 28 (modifier_list -> .)
    INLINE          reduce using rule 28 (modifier_list -> .)
    LONG            reduce using rule 28 (modifier_list -> .)
    SHORT           reduce using rule 28 (modifier_list -> .)
    SIGNED          reduce using rule 28 (modifier_list -> .)
    UNSIGNED        reduce using rule 28 (modifier_list -> .)
    VOLATILE        reduce using rule 28 (modifier_list -> .)
    STRUCT          shift and go to state 73

  ! CHAR            [ reduce using rule 28 (modifier_list -> .) ]
  ! DOUBLE          [ reduce using rule 28 (modifier_list -> .) ]
  ! FLOAT           [ reduce using rule 28 (modifier_list -> .) ]
  ! INT             [ reduce using rule 28 (modifier_list -> .) ]
  ! VOID            [ reduce using rule 28 (modifier_list -> .) ]
  ! INT8_T          [ reduce using rule 28 (modifier_list -> .) ]
  ! INT16_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! INT32_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! INT64_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT8_T         [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT16_T        [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT32_T        [ reduce using rule 28 (modifier_list -> .) ]
  ! UINT64_T        [ reduce using rule 28 (modifier_list -> .) ]
  ! STRUCT          [ reduce using rule 28 (modifier_list -> .) ]

    modifier_list                  shift and go to state 218
    dtype                          shift and go to state 215
    func_def_arg                   shift and go to state 217
    struct_type                    shift and go to state 43

state 224

    (72) control_expr -> control LPAREN conditional_expr RPAREN scope .

    INCLUDE         reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    DEFINE          reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    IFNDEF          reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    ENDIF           reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    error           reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    ELSE            reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    STRUCT          reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    CHAR            reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    DOUBLE          reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    FLOAT           reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    INT             reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    VOID            reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    INT8_T          reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    INT16_T         reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    INT32_T         reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    INT64_T         reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    UINT8_T         reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    UINT16_T        reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    UINT32_T        reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    UINT64_T        reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    ID              reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    SIZEOF          reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    LPAREN          reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    NEGATE          reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    MINUS           reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    RETURN          reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    WHILE           reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    IF              reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    FOR             reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    FLOAT_L         reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    INT_L           reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    CHAR_L          reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    STRING_L        reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    NONDECIMAL_L    reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    BITAND          reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    $end            reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    CONST           reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    EXTERN          reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    INLINE          reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    LONG            reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    SHORT           reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    SIGNED          reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    UNSIGNED        reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    VOLATILE        reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)
    RBRACE          reduce using rule 72 (control_expr -> control LPAREN conditional_expr RPAREN scope .)


state 225

    (68) conditional_expr -> name conditional name .
    (134) expression -> name . INCREMENT
    (129) operand -> name .
    (100) access -> name . LBRACK name RBRACK
    (101) access -> name . LBRACK expression RBRACK
    (102) access -> name . MEMBER name

    RPAREN          reduce using rule 68 (conditional_expr -> name conditional name .)
    SEMI            reduce using rule 68 (conditional_expr -> name conditional name .)
    INCREMENT       shift and go to state 119
    PLUS            reduce using rule 129 (operand -> name .)
    MINUS           reduce using rule 129 (operand -> name .)
    ASTERISK        reduce using rule 129 (operand -> name .)
    DIVIDE          reduce using rule 129 (operand -> name .)
    LSHIFT          reduce using rule 129 (operand -> name .)
    RSHIFT          reduce using rule 129 (operand -> name .)
    PERCENT         reduce using rule 129 (operand -> name .)
    BITAND          reduce using rule 129 (operand -> name .)
    BITOR           reduce using rule 129 (operand -> name .)
    EQ              reduce using rule 129 (operand -> name .)
    NEQ             reduce using rule 129 (operand -> name .)
    LT              reduce using rule 129 (operand -> name .)
    GT              reduce using rule 129 (operand -> name .)
    LE              reduce using rule 129 (operand -> name .)
    GE              reduce using rule 129 (operand -> name .)
    AND             reduce using rule 129 (operand -> name .)
    OR              reduce using rule 129 (operand -> name .)
    LBRACK          shift and go to state 121
    MEMBER          shift and go to state 122


state 226

    (65) conditional_expr -> name conditional expression .
    (130) operand -> expression .

    RPAREN          reduce using rule 65 (conditional_expr -> name conditional expression .)
    SEMI            reduce using rule 65 (conditional_expr -> name conditional expression .)
    PLUS            reduce using rule 130 (operand -> expression .)
    MINUS           reduce using rule 130 (operand -> expression .)
    ASTERISK        reduce using rule 130 (operand -> expression .)
    DIVIDE          reduce using rule 130 (operand -> expression .)
    LSHIFT          reduce using rule 130 (operand -> expression .)
    RSHIFT          reduce using rule 130 (operand -> expression .)
    PERCENT         reduce using rule 130 (operand -> expression .)
    BITAND          reduce using rule 130 (operand -> expression .)
    BITOR           reduce using rule 130 (operand -> expression .)
    EQ              reduce using rule 130 (operand -> expression .)
    NEQ             reduce using rule 130 (operand -> expression .)
    LT              reduce using rule 130 (operand -> expression .)
    GT              reduce using rule 130 (operand -> expression .)
    LE              reduce using rule 130 (operand -> expression .)
    GE              reduce using rule 130 (operand -> expression .)
    AND             reduce using rule 130 (operand -> expression .)
    OR              reduce using rule 130 (operand -> expression .)


state 227

    (67) conditional_expr -> expression conditional expression .
    (130) operand -> expression .

    RPAREN          reduce using rule 67 (conditional_expr -> expression conditional expression .)
    SEMI            reduce using rule 67 (conditional_expr -> expression conditional expression .)
    PLUS            reduce using rule 130 (operand -> expression .)
    MINUS           reduce using rule 130 (operand -> expression .)
    ASTERISK        reduce using rule 130 (operand -> expression .)
    DIVIDE          reduce using rule 130 (operand -> expression .)
    LSHIFT          reduce using rule 130 (operand -> expression .)
    RSHIFT          reduce using rule 130 (operand -> expression .)
    PERCENT         reduce using rule 130 (operand -> expression .)
    BITAND          reduce using rule 130 (operand -> expression .)
    BITOR           reduce using rule 130 (operand -> expression .)
    EQ              reduce using rule 130 (operand -> expression .)
    NEQ             reduce using rule 130 (operand -> expression .)
    LT              reduce using rule 130 (operand -> expression .)
    GT              reduce using rule 130 (operand -> expression .)
    LE              reduce using rule 130 (operand -> expression .)
    GE              reduce using rule 130 (operand -> expression .)
    AND             reduce using rule 130 (operand -> expression .)
    OR              reduce using rule 130 (operand -> expression .)


state 228

    (66) conditional_expr -> expression conditional name .
    (134) expression -> name . INCREMENT
    (100) access -> name . LBRACK name RBRACK
    (101) access -> name . LBRACK expression RBRACK
    (102) access -> name . MEMBER name
    (129) operand -> name .

    RPAREN          reduce using rule 66 (conditional_expr -> expression conditional name .)
    SEMI            reduce using rule 66 (conditional_expr -> expression conditional name .)
    INCREMENT       shift and go to state 119
    LBRACK          shift and go to state 121
    MEMBER          shift and go to state 122
    PLUS            reduce using rule 129 (operand -> name .)
    MINUS           reduce using rule 129 (operand -> name .)
    ASTERISK        reduce using rule 129 (operand -> name .)
    DIVIDE          reduce using rule 129 (operand -> name .)
    LSHIFT          reduce using rule 129 (operand -> name .)
    RSHIFT          reduce using rule 129 (operand -> name .)
    PERCENT         reduce using rule 129 (operand -> name .)
    BITAND          reduce using rule 129 (operand -> name .)
    BITOR           reduce using rule 129 (operand -> name .)
    EQ              reduce using rule 129 (operand -> name .)
    NEQ             reduce using rule 129 (operand -> name .)
    LT              reduce using rule 129 (operand -> name .)
    GT              reduce using rule 129 (operand -> name .)
    LE              reduce using rule 129 (operand -> name .)
    GE              reduce using rule 129 (operand -> name .)
    AND             reduce using rule 129 (operand -> name .)
    OR              reduce using rule 129 (operand -> name .)


state 229

    (152) vec_item_list -> vec_item_list vector_item COMMA .

    RBRACE          reduce using rule 152 (vec_item_list -> vec_item_list vector_item COMMA .)
    ID              reduce using rule 152 (vec_item_list -> vec_item_list vector_item COMMA .)
    SIZEOF          reduce using rule 152 (vec_item_list -> vec_item_list vector_item COMMA .)
    LBRACE          reduce using rule 152 (vec_item_list -> vec_item_list vector_item COMMA .)
    FLOAT_L         reduce using rule 152 (vec_item_list -> vec_item_list vector_item COMMA .)
    INT_L           reduce using rule 152 (vec_item_list -> vec_item_list vector_item COMMA .)
    CHAR_L          reduce using rule 152 (vec_item_list -> vec_item_list vector_item COMMA .)
    STRING_L        reduce using rule 152 (vec_item_list -> vec_item_list vector_item COMMA .)
    NONDECIMAL_L    reduce using rule 152 (vec_item_list -> vec_item_list vector_item COMMA .)
    BITAND          reduce using rule 152 (vec_item_list -> vec_item_list vector_item COMMA .)


state 230

    (142) vector_init -> LBRACK name RBRACK .

    SIMPLE_ASSIGN   reduce using rule 142 (vector_init -> LBRACK name RBRACK .)
    COMPLEX_ASSIGN  reduce using rule 142 (vector_init -> LBRACK name RBRACK .)
    LBRACK          reduce using rule 142 (vector_init -> LBRACK name RBRACK .)


state 231

    (71) for_loop -> FOR LPAREN init_var conditional_expr SEMI . ID INCREMENT RPAREN

    ID              shift and go to state 239


state 232

    (139) declare_var_ls -> modifier_list dtype ID .

    SIMPLE_ASSIGN   reduce using rule 139 (declare_var_ls -> modifier_list dtype ID .)
    COMPLEX_ASSIGN  reduce using rule 139 (declare_var_ls -> modifier_list dtype ID .)
    LBRACK          reduce using rule 139 (declare_var_ls -> modifier_list dtype ID .)


state 233

    (78) func_def_arg -> dtype name .
    (100) access -> name . LBRACK name RBRACK
    (101) access -> name . LBRACK expression RBRACK
    (102) access -> name . MEMBER name

    COMMA           reduce using rule 78 (func_def_arg -> dtype name .)
    RPAREN          reduce using rule 78 (func_def_arg -> dtype name .)
    CHAR            reduce using rule 78 (func_def_arg -> dtype name .)
    DOUBLE          reduce using rule 78 (func_def_arg -> dtype name .)
    FLOAT           reduce using rule 78 (func_def_arg -> dtype name .)
    INT             reduce using rule 78 (func_def_arg -> dtype name .)
    VOID            reduce using rule 78 (func_def_arg -> dtype name .)
    INT8_T          reduce using rule 78 (func_def_arg -> dtype name .)
    INT16_T         reduce using rule 78 (func_def_arg -> dtype name .)
    INT32_T         reduce using rule 78 (func_def_arg -> dtype name .)
    INT64_T         reduce using rule 78 (func_def_arg -> dtype name .)
    UINT8_T         reduce using rule 78 (func_def_arg -> dtype name .)
    UINT16_T        reduce using rule 78 (func_def_arg -> dtype name .)
    UINT32_T        reduce using rule 78 (func_def_arg -> dtype name .)
    UINT64_T        reduce using rule 78 (func_def_arg -> dtype name .)
    STRUCT          reduce using rule 78 (func_def_arg -> dtype name .)
    CONST           reduce using rule 78 (func_def_arg -> dtype name .)
    EXTERN          reduce using rule 78 (func_def_arg -> dtype name .)
    INLINE          reduce using rule 78 (func_def_arg -> dtype name .)
    LONG            reduce using rule 78 (func_def_arg -> dtype name .)
    SHORT           reduce using rule 78 (func_def_arg -> dtype name .)
    SIGNED          reduce using rule 78 (func_def_arg -> dtype name .)
    UNSIGNED        reduce using rule 78 (func_def_arg -> dtype name .)
    VOLATILE        reduce using rule 78 (func_def_arg -> dtype name .)
    LBRACK          shift and go to state 121
    MEMBER          shift and go to state 122


state 234

    (83) func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .

    INCLUDE         reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    DEFINE          reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    IFNDEF          reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    ENDIF           reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    error           reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    ELSE            reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    STRUCT          reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    CHAR            reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    DOUBLE          reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    FLOAT           reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    INT             reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    VOID            reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    INT8_T          reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    INT16_T         reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    INT32_T         reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    INT64_T         reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    UINT8_T         reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    UINT16_T        reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    UINT32_T        reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    UINT64_T        reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    ID              reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    SIZEOF          reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    LPAREN          reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    NEGATE          reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    MINUS           reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    RETURN          reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    WHILE           reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    IF              reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    FOR             reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    FLOAT_L         reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    INT_L           reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    CHAR_L          reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    STRING_L        reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    NONDECIMAL_L    reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    BITAND          reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    $end            reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    CONST           reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    EXTERN          reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    INLINE          reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    LONG            reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    SHORT           reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    SIGNED          reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    UNSIGNED        reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    VOLATILE        reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)
    RBRACE          reduce using rule 83 (func_def -> dtype ID LPAREN func_def_arglist RPAREN scope .)


state 235

    (87) func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .

    INCLUDE         reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    DEFINE          reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    IFNDEF          reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    ENDIF           reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    error           reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    ELSE            reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    STRUCT          reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    CHAR            reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    DOUBLE          reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    FLOAT           reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    INT             reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    VOID            reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    INT8_T          reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    INT16_T         reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    INT32_T         reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    INT64_T         reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    UINT8_T         reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    UINT16_T        reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    UINT32_T        reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    UINT64_T        reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    ID              reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    SIZEOF          reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    LPAREN          reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    NEGATE          reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    MINUS           reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    RETURN          reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    WHILE           reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    IF              reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    FOR             reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    FLOAT_L         reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    INT_L           reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    CHAR_L          reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    STRING_L        reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    NONDECIMAL_L    reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    BITAND          reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    $end            reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    CONST           reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    EXTERN          reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    INLINE          reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    LONG            reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    SHORT           reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    SIGNED          reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    UNSIGNED        reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    VOLATILE        reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)
    RBRACE          reduce using rule 87 (func_decl -> dtype ID LPAREN func_def_arglist RPAREN SEMI .)


state 236

    (82) func_def_arglist -> func_def_arglist func_def_arg COMMA .

    RPAREN          reduce using rule 82 (func_def_arglist -> func_def_arglist func_def_arg COMMA .)
    CHAR            reduce using rule 82 (func_def_arglist -> func_def_arglist func_def_arg COMMA .)
    DOUBLE          reduce using rule 82 (func_def_arglist -> func_def_arglist func_def_arg COMMA .)
    FLOAT           reduce using rule 82 (func_def_arglist -> func_def_arglist func_def_arg COMMA .)
    INT             reduce using rule 82 (func_def_arglist -> func_def_arglist func_def_arg COMMA .)
    VOID            reduce using rule 82 (func_def_arglist -> func_def_arglist func_def_arg COMMA .)
    INT8_T          reduce using rule 82 (func_def_arglist -> func_def_arglist func_def_arg COMMA .)
    INT16_T         reduce using rule 82 (func_def_arglist -> func_def_arglist func_def_arg COMMA .)
    INT32_T         reduce using rule 82 (func_def_arglist -> func_def_arglist func_def_arg COMMA .)
    INT64_T         reduce using rule 82 (func_def_arglist -> func_def_arglist func_def_arg COMMA .)
    UINT8_T         reduce using rule 82 (func_def_arglist -> func_def_arglist func_def_arg COMMA .)
    UINT16_T        reduce using rule 82 (func_def_arglist -> func_def_arglist func_def_arg COMMA .)
    UINT32_T        reduce using rule 82 (func_def_arglist -> func_def_arglist func_def_arg COMMA .)
    UINT64_T        reduce using rule 82 (func_def_arglist -> func_def_arglist func_def_arg COMMA .)
    STRUCT          reduce using rule 82 (func_def_arglist -> func_def_arglist func_def_arg COMMA .)
    CONST           reduce using rule 82 (func_def_arglist -> func_def_arglist func_def_arg COMMA .)
    EXTERN          reduce using rule 82 (func_def_arglist -> func_def_arglist func_def_arg COMMA .)
    INLINE          reduce using rule 82 (func_def_arglist -> func_def_arglist func_def_arg COMMA .)
    LONG            reduce using rule 82 (func_def_arglist -> func_def_arglist func_def_arg COMMA .)
    SHORT           reduce using rule 82 (func_def_arglist -> func_def_arglist func_def_arg COMMA .)
    SIGNED          reduce using rule 82 (func_def_arglist -> func_def_arglist func_def_arg COMMA .)
    UNSIGNED        reduce using rule 82 (func_def_arglist -> func_def_arglist func_def_arg COMMA .)
    VOLATILE        reduce using rule 82 (func_def_arglist -> func_def_arglist func_def_arg COMMA .)


state 237

    (79) func_def_arg -> modifier_list dtype . name
    (44) dtype -> dtype . ASTERISK
    (45) name -> . ID
    (46) name -> . literal
    (47) name -> . access
    (11) literal -> . FLOAT_L
    (12) literal -> . INT_L
    (13) literal -> . CHAR_L
    (14) literal -> . STRING_L
    (15) literal -> . NONDECIMAL_L
    (100) access -> . name LBRACK name RBRACK
    (101) access -> . name LBRACK expression RBRACK
    (102) access -> . name MEMBER name
    (103) access -> . BITAND name

    ASTERISK        shift and go to state 66
    ID              shift and go to state 150
    FLOAT_L         shift and go to state 59
    INT_L           shift and go to state 60
    CHAR_L          shift and go to state 61
    STRING_L        shift and go to state 62
    NONDECIMAL_L    shift and go to state 63
    BITAND          shift and go to state 64

    name                           shift and go to state 240
    literal                        shift and go to state 57
    access                         shift and go to state 58

state 238

    (84) func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN . scope
    (52) scope -> . LBRACE node_list RBRACE
    (53) scope -> . error RBRACE

    LBRACE          shift and go to state 87
    error           shift and go to state 88

    scope                          shift and go to state 241

state 239

    (71) for_loop -> FOR LPAREN init_var conditional_expr SEMI ID . INCREMENT RPAREN

    INCREMENT       shift and go to state 242


state 240

    (79) func_def_arg -> modifier_list dtype name .
    (100) access -> name . LBRACK name RBRACK
    (101) access -> name . LBRACK expression RBRACK
    (102) access -> name . MEMBER name

    COMMA           reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    RPAREN          reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    CHAR            reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    DOUBLE          reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    FLOAT           reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    INT             reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    VOID            reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    INT8_T          reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    INT16_T         reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    INT32_T         reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    INT64_T         reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    UINT8_T         reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    UINT16_T        reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    UINT32_T        reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    UINT64_T        reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    STRUCT          reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    CONST           reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    EXTERN          reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    INLINE          reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    LONG            reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    SHORT           reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    SIGNED          reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    UNSIGNED        reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    VOLATILE        reduce using rule 79 (func_def_arg -> modifier_list dtype name .)
    LBRACK          shift and go to state 121
    MEMBER          shift and go to state 122


state 241

    (84) func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .

    INCLUDE         reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    DEFINE          reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    IFNDEF          reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    ENDIF           reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    error           reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    ELSE            reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    STRUCT          reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    CHAR            reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    DOUBLE          reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    FLOAT           reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    INT             reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    VOID            reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    INT8_T          reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    INT16_T         reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    INT32_T         reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    INT64_T         reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    UINT8_T         reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    UINT16_T        reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    UINT32_T        reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    UINT64_T        reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    ID              reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    SIZEOF          reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    LPAREN          reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    NEGATE          reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    MINUS           reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    RETURN          reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    WHILE           reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    IF              reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    FOR             reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    FLOAT_L         reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    INT_L           reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    CHAR_L          reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    STRING_L        reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    NONDECIMAL_L    reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    BITAND          reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    $end            reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    CONST           reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    EXTERN          reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    INLINE          reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    LONG            reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    SHORT           reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    SIGNED          reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    UNSIGNED        reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    VOLATILE        reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)
    RBRACE          reduce using rule 84 (func_def -> modifier_list dtype ID LPAREN func_def_arglist RPAREN scope .)


state 242

    (71) for_loop -> FOR LPAREN init_var conditional_expr SEMI ID INCREMENT . RPAREN

    RPAREN          shift and go to state 243


state 243

    (71) for_loop -> FOR LPAREN init_var conditional_expr SEMI ID INCREMENT RPAREN .

    LBRACE          reduce using rule 71 (for_loop -> FOR LPAREN init_var conditional_expr SEMI ID INCREMENT RPAREN .)
    error           reduce using rule 71 (for_loop -> FOR LPAREN init_var conditional_expr SEMI ID INCREMENT RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CHAR in state 1 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 1 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 1 resolved as shift
WARNING: shift/reduce conflict for INT in state 1 resolved as shift
WARNING: shift/reduce conflict for VOID in state 1 resolved as shift
WARNING: shift/reduce conflict for INT8_T in state 1 resolved as shift
WARNING: shift/reduce conflict for INT16_T in state 1 resolved as shift
WARNING: shift/reduce conflict for INT32_T in state 1 resolved as shift
WARNING: shift/reduce conflict for INT64_T in state 1 resolved as shift
WARNING: shift/reduce conflict for UINT8_T in state 1 resolved as shift
WARNING: shift/reduce conflict for UINT16_T in state 1 resolved as shift
WARNING: shift/reduce conflict for UINT32_T in state 1 resolved as shift
WARNING: shift/reduce conflict for UINT64_T in state 1 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 1 resolved as shift
WARNING: shift/reduce conflict for ID in state 1 resolved as shift
WARNING: shift/reduce conflict for SIMPLE_ASSIGN in state 47 resolved as shift
WARNING: shift/reduce conflict for COMPLEX_ASSIGN in state 47 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 71 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 97 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 97 resolved as shift
WARNING: shift/reduce conflict for IFNDEF in state 97 resolved as shift
WARNING: shift/reduce conflict for ENDIF in state 97 resolved as shift
WARNING: shift/reduce conflict for error in state 97 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 97 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 97 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 97 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 97 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 97 resolved as shift
WARNING: shift/reduce conflict for INT in state 97 resolved as shift
WARNING: shift/reduce conflict for VOID in state 97 resolved as shift
WARNING: shift/reduce conflict for INT8_T in state 97 resolved as shift
WARNING: shift/reduce conflict for INT16_T in state 97 resolved as shift
WARNING: shift/reduce conflict for INT32_T in state 97 resolved as shift
WARNING: shift/reduce conflict for INT64_T in state 97 resolved as shift
WARNING: shift/reduce conflict for UINT8_T in state 97 resolved as shift
WARNING: shift/reduce conflict for UINT16_T in state 97 resolved as shift
WARNING: shift/reduce conflict for UINT32_T in state 97 resolved as shift
WARNING: shift/reduce conflict for UINT64_T in state 97 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 97 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 97 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 97 resolved as shift
WARNING: shift/reduce conflict for INT in state 97 resolved as shift
WARNING: shift/reduce conflict for VOID in state 97 resolved as shift
WARNING: shift/reduce conflict for INT8_T in state 97 resolved as shift
WARNING: shift/reduce conflict for INT16_T in state 97 resolved as shift
WARNING: shift/reduce conflict for INT32_T in state 97 resolved as shift
WARNING: shift/reduce conflict for INT64_T in state 97 resolved as shift
WARNING: shift/reduce conflict for UINT8_T in state 97 resolved as shift
WARNING: shift/reduce conflict for UINT16_T in state 97 resolved as shift
WARNING: shift/reduce conflict for UINT32_T in state 97 resolved as shift
WARNING: shift/reduce conflict for UINT64_T in state 97 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 97 resolved as shift
WARNING: shift/reduce conflict for ID in state 97 resolved as shift
WARNING: shift/reduce conflict for SIZEOF in state 97 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 97 resolved as shift
WARNING: shift/reduce conflict for NEGATE in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 97 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 97 resolved as shift
WARNING: shift/reduce conflict for IF in state 97 resolved as shift
WARNING: shift/reduce conflict for FOR in state 97 resolved as shift
WARNING: shift/reduce conflict for FLOAT_L in state 97 resolved as shift
WARNING: shift/reduce conflict for INT_L in state 97 resolved as shift
WARNING: shift/reduce conflict for CHAR_L in state 97 resolved as shift
WARNING: shift/reduce conflict for STRING_L in state 97 resolved as shift
WARNING: shift/reduce conflict for NONDECIMAL_L in state 97 resolved as shift
WARNING: shift/reduce conflict for BITAND in state 97 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 148 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 148 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 148 resolved as shift
WARNING: shift/reduce conflict for INT in state 148 resolved as shift
WARNING: shift/reduce conflict for VOID in state 148 resolved as shift
WARNING: shift/reduce conflict for INT8_T in state 148 resolved as shift
WARNING: shift/reduce conflict for INT16_T in state 148 resolved as shift
WARNING: shift/reduce conflict for INT32_T in state 148 resolved as shift
WARNING: shift/reduce conflict for INT64_T in state 148 resolved as shift
WARNING: shift/reduce conflict for UINT8_T in state 148 resolved as shift
WARNING: shift/reduce conflict for UINT16_T in state 148 resolved as shift
WARNING: shift/reduce conflict for UINT32_T in state 148 resolved as shift
WARNING: shift/reduce conflict for UINT64_T in state 148 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 148 resolved as shift
WARNING: shift/reduce conflict for LBRACK in state 151 resolved as shift
WARNING: shift/reduce conflict for MEMBER in state 151 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 158 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 158 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 158 resolved as shift
WARNING: shift/reduce conflict for INT in state 158 resolved as shift
WARNING: shift/reduce conflict for VOID in state 158 resolved as shift
WARNING: shift/reduce conflict for INT8_T in state 158 resolved as shift
WARNING: shift/reduce conflict for INT16_T in state 158 resolved as shift
WARNING: shift/reduce conflict for INT32_T in state 158 resolved as shift
WARNING: shift/reduce conflict for INT64_T in state 158 resolved as shift
WARNING: shift/reduce conflict for UINT8_T in state 158 resolved as shift
WARNING: shift/reduce conflict for UINT16_T in state 158 resolved as shift
WARNING: shift/reduce conflict for UINT32_T in state 158 resolved as shift
WARNING: shift/reduce conflict for UINT64_T in state 158 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 158 resolved as shift
WARNING: shift/reduce conflict for ID in state 158 resolved as shift
WARNING: shift/reduce conflict for EQ in state 161 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 161 resolved as shift
WARNING: shift/reduce conflict for LT in state 161 resolved as shift
WARNING: shift/reduce conflict for GT in state 161 resolved as shift
WARNING: shift/reduce conflict for LE in state 161 resolved as shift
WARNING: shift/reduce conflict for GE in state 161 resolved as shift
WARNING: shift/reduce conflict for AND in state 161 resolved as shift
WARNING: shift/reduce conflict for OR in state 161 resolved as shift
WARNING: shift/reduce conflict for EQ in state 162 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 162 resolved as shift
WARNING: shift/reduce conflict for LT in state 162 resolved as shift
WARNING: shift/reduce conflict for GT in state 162 resolved as shift
WARNING: shift/reduce conflict for LE in state 162 resolved as shift
WARNING: shift/reduce conflict for GE in state 162 resolved as shift
WARNING: shift/reduce conflict for AND in state 162 resolved as shift
WARNING: shift/reduce conflict for OR in state 162 resolved as shift
WARNING: shift/reduce conflict for LBRACK in state 179 resolved as shift
WARNING: shift/reduce conflict for MEMBER in state 179 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 180 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 180 resolved as shift
WARNING: shift/reduce conflict for ASTERISK in state 180 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 180 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 180 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 180 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 180 resolved as shift
WARNING: shift/reduce conflict for BITAND in state 180 resolved as shift
WARNING: shift/reduce conflict for BITOR in state 180 resolved as shift
WARNING: shift/reduce conflict for EQ in state 180 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 180 resolved as shift
WARNING: shift/reduce conflict for LT in state 180 resolved as shift
WARNING: shift/reduce conflict for GT in state 180 resolved as shift
WARNING: shift/reduce conflict for LE in state 180 resolved as shift
WARNING: shift/reduce conflict for GE in state 180 resolved as shift
WARNING: shift/reduce conflict for AND in state 180 resolved as shift
WARNING: shift/reduce conflict for OR in state 180 resolved as shift
WARNING: shift/reduce conflict for SIMPLE_ASSIGN in state 184 resolved as shift
WARNING: shift/reduce conflict for COMPLEX_ASSIGN in state 184 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 187 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 187 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 187 resolved as shift
WARNING: shift/reduce conflict for INT in state 187 resolved as shift
WARNING: shift/reduce conflict for VOID in state 187 resolved as shift
WARNING: shift/reduce conflict for INT8_T in state 187 resolved as shift
WARNING: shift/reduce conflict for INT16_T in state 187 resolved as shift
WARNING: shift/reduce conflict for INT32_T in state 187 resolved as shift
WARNING: shift/reduce conflict for INT64_T in state 187 resolved as shift
WARNING: shift/reduce conflict for UINT8_T in state 187 resolved as shift
WARNING: shift/reduce conflict for UINT16_T in state 187 resolved as shift
WARNING: shift/reduce conflict for UINT32_T in state 187 resolved as shift
WARNING: shift/reduce conflict for UINT64_T in state 187 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 187 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 223 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 223 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 223 resolved as shift
WARNING: shift/reduce conflict for INT in state 223 resolved as shift
WARNING: shift/reduce conflict for VOID in state 223 resolved as shift
WARNING: shift/reduce conflict for INT8_T in state 223 resolved as shift
WARNING: shift/reduce conflict for INT16_T in state 223 resolved as shift
WARNING: shift/reduce conflict for INT32_T in state 223 resolved as shift
WARNING: shift/reduce conflict for INT64_T in state 223 resolved as shift
WARNING: shift/reduce conflict for UINT8_T in state 223 resolved as shift
WARNING: shift/reduce conflict for UINT16_T in state 223 resolved as shift
WARNING: shift/reduce conflict for UINT32_T in state 223 resolved as shift
WARNING: shift/reduce conflict for UINT64_T in state 223 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 223 resolved as shift
WARNING: reduce/reduce conflict in state 28 resolved using rule (node_list -> <empty>)
WARNING: rejected rule (control -> ELSE) in state 28
WARNING: reduce/reduce conflict in state 91 resolved using rule (node_list -> <empty>)
WARNING: rejected rule (control_expr -> error LBRACE) in state 91
WARNING: reduce/reduce conflict in state 97 resolved using rule (modifier_list -> <empty>)
WARNING: rejected rule (control_expr -> ELSE node_list) in state 97
WARNING: reduce/reduce conflict in state 123 resolved using rule (expression -> NEGATE expression)
WARNING: rejected rule (operand -> expression) in state 123
WARNING: reduce/reduce conflict in state 124 resolved using rule (expression -> NEGATE name)
WARNING: rejected rule (operand -> name) in state 124
WARNING: reduce/reduce conflict in state 125 resolved using rule (expression -> MINUS expression)
WARNING: rejected rule (operand -> expression) in state 125
WARNING: reduce/reduce conflict in state 126 resolved using rule (expression -> MINUS name)
WARNING: rejected rule (operand -> name) in state 126
WARNING: reduce/reduce conflict in state 171 resolved using rule (operand -> name)
WARNING: rejected rule (operand -> type_cast name) in state 171
WARNING: reduce/reduce conflict in state 190 resolved using rule (func_arg -> name)
WARNING: rejected rule (operand -> name) in state 190
WARNING: reduce/reduce conflict in state 192 resolved using rule (func_arg -> expression)
WARNING: rejected rule (operand -> expression) in state 192
WARNING: reduce/reduce conflict in state 194 resolved using rule (func_arg -> func_call)
WARNING: rejected rule (operand -> func_call) in state 194
WARNING: reduce/reduce conflict in state 202 resolved using rule (expression -> LPAREN name RPAREN)
WARNING: rejected rule (init_var_rs -> LPAREN name RPAREN) in state 202
WARNING: reduce/reduce conflict in state 220 resolved using rule (func_arg -> type_cast name)
WARNING: rejected rule (operand -> type_cast name) in state 220
WARNING: reduce/reduce conflict in state 220 resolved using rule (operand -> name)
WARNING: rejected rule (operand -> type_cast name) in state 220
WARNING: reduce/reduce conflict in state 220 resolved using rule (func_arg -> type_cast name)
WARNING: rejected rule (operand -> name) in state 220
WARNING: reduce/reduce conflict in state 221 resolved using rule (func_arg -> type_cast expression)
WARNING: rejected rule (operand -> expression) in state 221
WARNING: reduce/reduce conflict in state 222 resolved using rule (func_arg -> type_cast func_call)
WARNING: rejected rule (operand -> func_call) in state 222
